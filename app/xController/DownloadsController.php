<?phpApp::uses('AppController', 'Controller');/** * Instruments Controller * */class DownloadsController extends AppController{    public $components = array(        'RequestHandler' => array(            'viewClassMap' => array('csv' => 'CsvView.Csv')        )    );    public function beforeFilter()    {        parent::beforeFilter();        //$this->Auth->allow('test');     //   $this->Auth->allow();    }    public function export() {        $data = array(            array('a', 'b', 'c'),            array(1, 2, 3),            array('you', 'and', 'me'),        );        $_serialize = 'data';        $this->response->download('my_file.csv'); // <= setting the file name        $this->viewClass = 'CsvView.Csv';        $this->set(compact('data', '_serialize'));    }    public function dse_data($instrumentId = 12, $from = '2010-10-25', $to = '2013-04-25')    {        $StockBangladesh = $this->Components->load('StockBangladesh');        $this->set('instrumentList', $StockBangladesh->instrumentList(1));    }    public function adjusted_data()    {       // Configure::write('debug', 2);        App::uses('CakeTime', 'Utility');        $StockBangladesh = $this->Components->load('StockBangladesh');      //  pr($this->request->data('shareLists'));        $instrumentList = $StockBangladesh->instrumentList(2);        $instrumentCode='DSEX';  $from=$tradeEndTime = date('Y-m-d', strtotime("-2 years"));  $to=date('Y-m-d');        if($this->request->data('shareList'))        $instrumentCode=$this->request->data('shareList');        if($this->request->data('from'))        $from=$this->request->data('from');        if($this->request->data('to'))        $to=$this->request->data('to');        $adjusted=$this->request->data('adjusted');        $instrumentId=$instrumentList[$instrumentCode];      //  pr("DataBanksAdjustedEod.instrument_id=$instrumentId and date BETWEEN '$from' AND '$to'");    //        exit;       if($adjusted) {           App::uses('DataBanksAdjustedEod', 'Model');           $DataBanksAdjustedEod = new DataBanksAdjustedEod();           $dataBank = $DataBanksAdjustedEod->find('all', array(               'conditions' => "DataBanksAdjustedEod.instrument_id=$instrumentId and date BETWEEN '$from' AND '$to'",               'recursive' => -1,               'order' => 'DataBanksAdjustedEod.date DESC'           ));           $results = array();           foreach ($dataBank as $row) {               $date = $row['DataBanksAdjustedEod']['date'];               $row['DataBanksAdjustedEod']['date'] = CakeTime::format($date, '%Y/%m/%d');               $row['DataBanksAdjustedEod']['code'] = $instrumentCode;               $results[] = $row;           }           $_serialize = 'results';           $_header = array('Code', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume');           $_extract = array('DataBanksAdjustedEod.code', 'DataBanksAdjustedEod.date', 'DataBanksAdjustedEod.open', 'DataBanksAdjustedEod.high', 'DataBanksAdjustedEod.low', 'DataBanksAdjustedEod.close', 'DataBanksAdjustedEod.volume');           $this->response->download("$instrumentCode"."_DailyDataAdjusted_".$to.".csv"); // <= setting the file name           $this->viewClass = 'CsvView.Csv';           $this->set(compact('results', '_serialize', '_header', '_extract'));       }else       {           App::uses('DataBanksEod', 'Model');           $DataBanksEod = new DataBanksEod();           $dataBank = $DataBanksEod->find('all', array(               'conditions' => "DataBanksEod.instrument_id=$instrumentId and date BETWEEN '$from' AND '$to'",               'recursive' => -1,               'order' => 'DataBanksEod.date DESC'           ));           $results = array();           foreach ($dataBank as $row) {               $date = $row['DataBanksEod']['date'];               $row['DataBanksEod']['date'] = CakeTime::format($date, '%Y/%m/%d');               $row['DataBanksEod']['code'] = $instrumentCode;               $results[] = $row;           }           $_serialize = 'results';           $_header = array('Code', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume');           $_extract = array('DataBanksEod.code', 'DataBanksEod.date', 'DataBanksEod.open', 'DataBanksEod.high', 'DataBanksEod.low', 'DataBanksEod.close', 'DataBanksEod.volume');           $this->response->download("$instrumentCode"."_DailyDataNormal_".$to.".csv"); // <= setting the file name           $this->viewClass = 'CsvView.Csv';           $this->set(compact('results', '_serialize', '_header', '_extract'));       }    }    public function all_data($date='2014-11-17',$adjusted=1)    {   //     Configure::write('debug', 2);        App::uses('CakeTime', 'Utility');        $StockBangladesh = $this->Components->load('StockBangladesh');      //  pr($this->request->data('shareLists'));        $instrumentList = $StockBangladesh->instrumentList(3);        $date=trim($date);      //  pr(CakeTime::format($date, '%Y'));$from=CakeTime::format($date, '%Y').'-'.CakeTime::format($date, '%m').'-01';$to=CakeTime::format($date, '%Y').'-'.CakeTime::format($date, '%m').'-31';        $range="$from"."_"."$to";    //    pr($range);    //    exit;        // pr("DataBanksAdjustedEod.date BETWEEN '$from' AND '$to'");       //     exit;       if($adjusted) {           App::uses('DataBanksAdjustedEod', 'Model');           $DataBanksAdjustedEod = new DataBanksAdjustedEod();           $dataBank = $DataBanksAdjustedEod->find('all', array(               'conditions' => "DataBanksAdjustedEod.date BETWEEN '$from' AND '$to'",               'recursive' => -1,               'limit' =>'9000',               'offset'=>0,               'order' => 'DataBanksAdjustedEod.date DESC'           ));           $results = array();           foreach ($dataBank as $row) {               $instrument_id=$row['DataBanksAdjustedEod']['instrument_id'];               $date = $row['DataBanksAdjustedEod']['date'];               $row['DataBanksAdjustedEod']['date'] = CakeTime::format($date, '%Y/%m/%d');               $row['DataBanksAdjustedEod']['code'] = $instrumentList[$instrument_id];               $results[] = $row;           }           $_serialize = 'results';           $_header = array('Code', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume');           $_extract = array('DataBanksAdjustedEod.code', 'DataBanksAdjustedEod.date', 'DataBanksAdjustedEod.open', 'DataBanksAdjustedEod.high', 'DataBanksAdjustedEod.low', 'DataBanksAdjustedEod.close', 'DataBanksAdjustedEod.volume');           $this->response->download("DataAdjusted_".$range.".csv"); // <= setting the file name           $this->viewClass = 'CsvView.Csv';           $this->set(compact('results', '_serialize', '_header', '_extract'));       }else       {           App::uses('DataBanksEod', 'Model');           $DataBanksEod = new DataBanksEod();           $dataBank = $DataBanksEod->find('all', array(               'conditions' => "DataBanksEod.date BETWEEN '$from' AND '$to'",               'recursive' => -1,               'order' => 'DataBanksEod.date DESC'           ));           $results = array();           foreach ($dataBank as $row) {               $instrument_id=$row['DataBanksEod']['instrument_id'];               $date = $row['DataBanksEod']['date'];               $row['DataBanksEod']['date'] = CakeTime::format($date, '%Y/%m/%d');               $row['DataBanksEod']['code'] = $instrumentList[$instrument_id];;               $results[] = $row;           }           $_serialize = 'results';           $_header = array('Code', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume');           $_extract = array('DataBanksEod.code', 'DataBanksEod.date', 'DataBanksEod.open', 'DataBanksEod.high', 'DataBanksEod.low', 'DataBanksEod.close', 'DataBanksEod.volume');           $this->response->download("DataNormal_".$range.".csv"); // <= setting the file name           $this->viewClass = 'CsvView.Csv';           $this->set(compact('results', '_serialize', '_header', '_extract'));       }    }    public function all_data_lastday($adjusted=1)    {      //  Configure::write('debug', 2);        App::uses('CakeTime', 'Utility');        $StockBangladesh = $this->Components->load('StockBangladesh');      //  pr($this->request->data('shareLists'));        $instrumentList = $StockBangladesh->instrumentList(3);        $marketIdArr = $StockBangladesh->getMarketInfo(0,0);        $marketId=$marketIdArr[0]['Market']['id'];$range=$marketIdArr[0]['Market']['trade_date'];        // pr("DataBanksAdjustedEod.date BETWEEN '$from' AND '$to'");       //     exit;       if($adjusted) {           App::uses('DataBanksAdjustedEod', 'Model');           $DataBanksAdjustedEod = new DataBanksAdjustedEod();           $dataBank = $DataBanksAdjustedEod->find('all', array(               'conditions' => "DataBanksAdjustedEod.market_id=$marketId",               'recursive' => -1,               'limit' =>'9000',               'offset'=>0,               'order' => 'DataBanksAdjustedEod.date DESC'           ));           $results = array();           foreach ($dataBank as $row) {               $instrument_id=$row['DataBanksAdjustedEod']['instrument_id'];               $date = $row['DataBanksAdjustedEod']['date'];               $row['DataBanksAdjustedEod']['date'] = CakeTime::format($date, '%Y/%m/%d');               $row['DataBanksAdjustedEod']['code'] = $instrumentList[$instrument_id];               $results[] = $row;           }           $_serialize = 'results';           $_header = array('Code', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume');           $_extract = array('DataBanksAdjustedEod.code', 'DataBanksAdjustedEod.date', 'DataBanksAdjustedEod.open', 'DataBanksAdjustedEod.high', 'DataBanksAdjustedEod.low', 'DataBanksAdjustedEod.close', 'DataBanksAdjustedEod.volume');           $this->response->download("DataAdjusted_".$range.".csv"); // <= setting the file name           $this->viewClass = 'CsvView.Csv';           $this->set(compact('results', '_serialize', '_header', '_extract'));       }else       {           App::uses('DataBanksEod', 'Model');           $DataBanksEod = new DataBanksEod();           $dataBank = $DataBanksEod->find('all', array(               'conditions' => "DataBanksEod.market_id=$marketId",               'recursive' => -1,               'order' => 'DataBanksEod.date DESC'           ));           $results = array();           foreach ($dataBank as $row) {               $instrument_id=$row['DataBanksEod']['instrument_id'];               $date = $row['DataBanksEod']['date'];               $row['DataBanksEod']['date'] = CakeTime::format($date, '%Y/%m/%d');               $row['DataBanksEod']['code'] = $instrumentList[$instrument_id];;               $results[] = $row;           }           $_serialize = 'results';           $_header = array('Code', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume');           $_extract = array('DataBanksEod.code', 'DataBanksEod.date', 'DataBanksEod.open', 'DataBanksEod.high', 'DataBanksEod.low', 'DataBanksEod.close', 'DataBanksEod.volume');           $this->response->download("DataNormal_".$range.".csv"); // <= setting the file name           $this->viewClass = 'CsvView.Csv';           $this->set(compact('results', '_serialize', '_header', '_extract'));       }    }}