<?phpApp::uses('AppController', 'Controller');/** * Instruments Controller * */class DataManagementsController extends AppController{    var $uses = array('Portfolio', 'User', 'PortfolioTransaction', 'Instrument', 'UserDeposits');    public function beforeFilter()    {        parent::beforeFilter();        //$this->Auth->allow('test');        $this->Auth->allow();    }    public function purchase_power_stats()    {        $pid = 0;        if (isset($_POST['userId'])) {            $userId = $_POST['userId'];            $pid = $userId; // as userid=portfolio_id        }        $Portfolio = $this->Components->load('Portfolio');        $allTransactions = $Portfolio->getAllTransactions($pid);        $this->ttypeArr = $Portfolio->getTransactionType();        $balance = $Portfolio->getPortfolioBalance($allTransactions, $this->ttypeArr);        App::uses('CakeTime', 'Utility');        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'Order.created');        App::uses('Order', 'Model');        $Order = new Order();        $allOrdersInfo = $Order->find('all', array(            'conditions' => "Order.user_id=$userId and $tradeDateCondition",            'recursive' => -1        ));        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(2, 1);        $broker_fee = $userList[$userId]['brker_fee'];        $tradeData['balanceUsed'] = $Omo->getUsedBalance($allOrdersInfo, $broker_fee);        $tradeData['balance'] = $balance;        $jsonresult = json_encode($tradeData);        echo $jsonresult;        exit;    }    public function updatePurchasePower()    {        if (isset($_POST['userId'])) {            $userId = $_POST['userId'];            $portfolio_id = $userId; // as userid=portfolio_id        }        if (isset($_POST['add'])) {            $add = $_POST['add'];        }        if (isset($_POST['total'])) {            $total = $_POST['total'];        }        if (isset($_POST['deduct'])) {            $deduct = $_POST['deduct'];        }        $Portfolio = $this->Components->load('Portfolio');        $allTransactions = $Portfolio->getAllTransactions($portfolio_id);        $this->ttypeArr = $Portfolio->getTransactionType();        $balance = $Portfolio->getPortfolioBalance($allTransactions, $this->ttypeArr);        $portfolioTransactionData = array();        App::uses('PortfolioTransaction', 'Model');        $PortfolioTransaction = new PortfolioTransaction();        $ordersInfo = $PortfolioTransaction->find('all', array(            'conditions' => "PortfolioTransaction.portfolio_id=$userId and PortfolioTransaction.transaction_type_id=12 ",            'recursive' => -1        ));        $msg = '';        if (count($ordersInfo)) {            $portfolioTransactionData['id'] = $ordersInfo[0]['PortfolioTransaction']['id'];            if ($add) {                $rate = $ordersInfo[0]['PortfolioTransaction']['rate'] + $add;                $msg = "$add Taka Added";            }            if ($deduct) {                $rate = $ordersInfo[0]['PortfolioTransaction']['rate'] - $deduct;                $msg = "$deduct Taka deducted";            }            if ($total) {                $adjustedValue = $total - $balance;                $rate = $ordersInfo[0]['PortfolioTransaction']['rate'] + $adjustedValue;                $msg = "Total balanace set to $total Taka";            }            $portfolioTransactionData['portfolio_id'] = $portfolio_id;            $portfolioTransactionData['transaction_type_id'] = 12;//            $portfolioTransactionData['amount'] = $_POST['amount'];            $portfolioTransactionData['rate'] = $rate;            $portfolioTransactionData['transaction_time'] = date('Y-m-d H:i:s');            $portfolioTransactionData['commission'] = 0;            $portfolioTransactionData['parent_id'] = 0;        } else {            if ($add) {                $rate = $add;                $msg = "$add Taka Added";            }            if ($deduct) {                $rate = 0 - $deduct;                $msg = "$deduct Taka deducted";            }            if ($total) {                $adjustedValue = $total - $balance;                $rate = 0 + $adjustedValue;                $msg = "Total balanace set to $total Taka";            }            $portfolioTransactionData['portfolio_id'] = $portfolio_id;            $portfolioTransactionData['transaction_type_id'] = 12;            $portfolioTransactionData['amount'] = 1;            $portfolioTransactionData['rate'] = $rate;            $portfolioTransactionData['transaction_time'] = date('Y-m-d H:i:s');            $portfolioTransactionData['commission'] = 0;            $portfolioTransactionData['parent_id'] = 0;        }        if ($PortfolioTransaction->save($portfolioTransactionData)) {            $allTransactions = $Portfolio->getAllTransactions($portfolio_id);            $this->ttypeArr = $Portfolio->getTransactionType();            $balance = $Portfolio->getPortfolioBalance($allTransactions, $this->ttypeArr);            $msg = "$msg. New Balanace is = $balance Taka ";        } else {            $msg = "There is some problem";        }        $tradeData['balance'] = $balance;        $tradeData['msg'] = $msg;        $jsonresult = json_encode($tradeData);        echo $jsonresult;        exit;    }    public function purchase_power()    {        Configure::write('debug', 2);        $this->set('pageTitleMain', 'Purchase power');        $this->set('pageTitleSmall', '');        if ($this->Auth->user('portfolio_id')) {            $pid = $this->Auth->user('portfolio_id');            $broker_fee = $this->Auth->user('broker_fee');            $broker_id = $this->Auth->user('broker_id');        }        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1);        $thisBrokerUserList = $userList[$broker_id];        $userForDropDown = array();        foreach ($thisBrokerUserList as $user) {            $id = $user['id'];            $portfolio_id = $user['portfolio_id'];            $internal_ref_no = $user['internal_ref_no'];            $userForDropDown[$id] = $internal_ref_no;        }        $this->set('userForDropDown', $userForDropDown);        //  pr($thisBrokerUserList);        // exit;    }    public function manager_list()    {        //  Configure::write('debug', 2);        if (isset($_POST['userId'])) {            $userId = $_POST['userId'];        }        App::uses('User', 'Model');        $User = new User();        $userinfo = $User->findById($userId);        $userinfo = $userinfo['User'];        $portfolio_list = $userinfo['portfolio_list'];        $portfolio_list = unserialize($portfolio_list);        $userListInfo = $User->find('all', array(            'conditions' => array('User.id' => $portfolio_list),            'recursive' => -1        ));        $return = array();        //  pr($userListInfo);        foreach ($userListInfo as $row) {            $return[] = $row['User']['internal_ref_no'];        }        App::uses('String', 'Utility');        echo String::toList($return);        exit;    }    public function updatePortfolioManager()    {        Configure::write('debug', 2);        if (isset($_POST['userId'])) {            $userId = $_POST['userId'];        }        if (isset($_POST['userList'])) {            $userlist = $_POST['userList'];        }        $portfolio_list = array();        foreach ($userlist as $uid) {            $portfolio_list[$uid] = $uid;        }        $portfolio_list[$userId] = $userId;        App::uses('User', 'Model');        $User = new User();        $portfolio_list = serialize($portfolio_list);        $User->id = $userId;        $User->saveField('portfolio_list', $portfolio_list);        echo "successfull";        exit;    }    public function assign_portfolio()    {        Configure::write('debug', 2);        $this->set('pageTitleMain', 'Portfolio Manager');        $this->set('pageTitleSmall', '');        if ($this->Auth->user('portfolio_id')) {            $pid = $this->Auth->user('portfolio_id');            $broker_fee = $this->Auth->user('broker_fee');            $broker_id = $this->Auth->user('broker_id');        }        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1);        $thisBrokerUserList = $userList[$broker_id];        $userForDropDown = array();        foreach ($thisBrokerUserList as $user) {            $id = $user['id'];            $portfolio_id = $user['portfolio_id'];            $internal_ref_no = $user['internal_ref_no'];            $userForDropDown[$id] = $internal_ref_no;        }        $this->set('userForDropDown', $userForDropDown);        //  pr($thisBrokerUserList);        // exit;    }    public function temp()    {        //  Configure::write('debug', 2);        // $StockBangladesh = $this->Components->load('StockBangladesh');        // $t=$StockBangladesh->getLastTradeInfo();        // require_once(APP . 'Vendor' . DS . 'xcrud' . DS . 'xcrud.php');        require_once(APP . 'webroot' . DS . 'xcrud' . DS . 'xcrud.php');        $xcrud = Xcrud::get_instance();        $xcrud->table('metas');        $xcrud->default_tab('Meta list');        $metadetails = $xcrud->nested_table('Meta Group details', 'meta_group_id', 'meta_groups', 'id'); // 2nd level        $fundamentals = $xcrud->nested_table('Fundamentals', 'id', 'fundamentals', 'meta_id'); // 2nd level        //   $xcrud->join('meta_group_id','meta_groups','id');        $xcrud->relation('meta_group_id', 'meta_groups', 'id', 'group_key');        $fundamentals->relation('instrument_id', 'instruments', 'id', 'instrument_code');        $fundamentals->relation('meta_id', 'metas', 'id', 'meta_key');        //  $xcrud->columns('id,meta_key,meta_groups.group_key');        $xcrud->benchmark(true);        $xcrud->unset_csv();        //$user_table= $xcrud->render();        $this->set('xcrud', $xcrud);        // pr($t);        //  exit;    }    public function meta()    {        //  Configure::write('debug', 2);        // $StockBangladesh = $this->Components->load('StockBangladesh');        // $t=$StockBangladesh->getLastTradeInfo();        // require_once(APP . 'Vendor' . DS . 'xcrud' . DS . 'xcrud.php');        require_once(APP . 'webroot' . DS . 'xcrud' . DS . 'xcrud.php');        $xcrud = Xcrud::get_instance();        $xcrud->table('metas');        $xcrud->default_tab('Meta list');        $metadetails = $xcrud->nested_table('Meta Group details', 'meta_group_id', 'meta_groups', 'id'); // 2nd level        $fundamentals = $xcrud->nested_table('Fundamentals', 'id', 'fundamentals', 'meta_id'); // 2nd level        //   $xcrud->join('meta_group_id','meta_groups','id');        $xcrud->relation('meta_group_id', 'meta_groups', 'id', 'group_key');        $fundamentals->relation('instrument_id', 'instruments', 'id', 'instrument_code');        $fundamentals->relation('meta_id', 'metas', 'id', 'meta_key');        //  $xcrud->columns('id,meta_key,meta_groups.group_key');        $xcrud->benchmark(true);        $xcrud->unset_csv();        //$user_table= $xcrud->render();        $xcrud2 = Xcrud::get_instance();        $xcrud2->table('meta_groups');        $this->set('xcrud', $xcrud);        $this->set('xcrud2', $xcrud2);        // pr($t);        //  exit;    }    public function xls()    {        //http://bayu.freelancer.web.id/2010/07/16/phpexcel-advanced-read-write-excel-made-simple/        Configure::write('debug', 2);        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $objPHPExcel = new PHPExcel();        $objReader = new PHPExcel_Reader_Excel5();        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load('balance/apex/balance.csv');        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row) {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false); // Loop all cells, even if it is not set            if (1 == $row->getRowIndex()) continue;//skip first row            $rowIndex = $row->getRowIndex();            $array_data[$rowIndex] = array('A' => '', 'B' => '', 'C' => '', 'D' => '');            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $array_data[$rowIndex][$cell->getColumn()] = $cell->getCalculatedValue();                } else if ('B' == $cell->getColumn()) {                    $array_data[$rowIndex][$cell->getColumn()] = $cell->getCalculatedValue();                } else if ('C' == $cell->getColumn()) {                    $array_data[$rowIndex][$cell->getColumn()] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'YYYY-MM-DD');                } else if ('D' == $cell->getColumn()) {                    $array_data[$rowIndex][$cell->getColumn()] = $cell->getCalculatedValue();                }            }        }        pr($array_data);        exit;    }    public function pdf()    {        Configure::write('debug', 2);        require_once(APP . 'Vendor' . DS . 'class.pdf2text.php');        $a = new PDF2Text();        $a->setFilename('xls/test_data.pdf');        $a->decodePDF();        echo $a->output();        exit;    }    function scan_dir($dir)    {        $ignored = array('.', '..', '.svn', '.htaccess');        $files = array();        foreach (scandir($dir) as $file) {            if (in_array($file, $ignored)) continue;            $files[$file] = filemtime($dir . '/' . $file);        }        arsort($files);        $files = array_keys($files);        return ($files) ? $files : false;    }//UPDATE `omo_new2`.`orders` SET `order_status` = 'locked' WHERE `orders`.`id` = 50 Or `orders`.`id` = 49 Or `orders`.`id` = 48 Or `orders`.`id` = 47;//UPDATE `omo_new2`.`orders` SET `dse_order_id` = NULL  WHERE `orders`.`id` = 50 Or `orders`.`id` = 49 Or `orders`.`id` = 48 Or `orders`.`id` = 47;    public function execute_report()    {        Configure::write('debug', 2);        $broker_id = 11;        App::uses('CakeTime', 'Utility');        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'Order.created');        App::uses('Order', 'Model');        $Order = new Order();        $allOrdersInfo = $Order->find('all', array(            'conditions' => "User.broker_id=$broker_id and $tradeDateCondition /*and Order.dse_order_id IS NULL*/",            'contain' => 'User.broker_id',            'recursive' => -1        ));        $dir = 'execution_report';        $fileArr = $this->scan_dir($dir);        //pr($fileArr);        $reportFile = $fileArr[0];        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $objPHPExcel = new PHPExcel();        $objReader = new PHPExcel_Reader_Excel5();        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load("$dir/$reportFile");        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row) {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false); // Loop all cells, even if it is not set            if (1 == $row->getRowIndex()) continue;//skip first row            $rowIndex = $row->getRowIndex();            //$array_data[$rowIndex] = array('A'=>'', 'B'=>'','C'=>'','D'=>'');            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $array_data[$rowIndex]['client_id'] = $cell->getCalculatedValue();                } else if ('B' == $cell->getColumn()) {                    $array_data[$rowIndex]['instrument_code'] = $cell->getCalculatedValue();                } else if ('C' == $cell->getColumn()) {                    $array_data[$rowIndex]['day_initial_position'] = $cell->getCalculatedValue();                } else if ('D' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_qty'] = $cell->getCalculatedValue();                } else if ('E' == $cell->getColumn()) {                    $array_data[$rowIndex]['executed_qty'] = $cell->getCalculatedValue();                } else if ('F' == $cell->getColumn()) {                    $array_data[$rowIndex]['avg_price'] = $cell->getCalculatedValue();                } else if ('G' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_id'] = trim($cell->getCalculatedValue());                } else if ('H' == $cell->getColumn()) {                    $array_data[$rowIndex][$cell->getColumn()] = $cell->getCalculatedValue();                } else if ('I' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_status'] = $cell->getCalculatedValue();                } else if ('J' == $cell->getColumn()) {                    $array_data[$rowIndex]['resulting_position'] = $cell->getCalculatedValue();                }            }        }        pr($array_data);        exit;        $validTransactionArr = array();        foreach ($array_data as $eachRow) {            $col_c = trim($eachRow['order_qty']);            if ($col_c != '') {                $validTransactionArr[] = $eachRow;            }        }        unset($validTransactionArr[0]);        $validTransactionArr = Hash::sort($validTransactionArr, "{n}.avg_price", 'ASC');        $Omo = $this->Components->load('Omo');        $allUsers = $Omo->getUsersList(1);        $allOrders = $Omo->get_broker_orders($allOrdersInfo, $broker_id);        $allLockedOrder = $allOrders['locked'];        $allExecutedOrder = $allOrders['executed'];        $validTransactionArr = $this->cleanTransaction($validTransactionArr, $allExecutedOrder);        $allLockedOrder = Hash::sort($allLockedOrder, "{n}.rate", 'ASC');        pr($allOrders);//        exit;        $dataToSave = array();        foreach ($allLockedOrder as $lockedOrder) {            $instrument_code = $lockedOrder['instrument_id'];            $user_id = $lockedOrder['user_id'];            $amount = $lockedOrder['amount'];            $rate = $lockedOrder['rate'];            $internal_ref_no = $allUsers[$broker_id][$user_id]['internal_ref_no'];            $allOrderByThisUser = Hash::extract($validTransactionArr, "{n}[client_id=/$internal_ref_no/]");            $allOrderOfThisInstrument = Hash::extract($allOrderByThisUser, "{n}[instrument_code=/$instrument_code/]");//  first process exact match            foreach ($allOrderOfThisInstrument as $row) {                $orderId = trim($row['order_id']);                $executedQty = $row['executed_qty'];                $order_qty = $row['order_qty'];                $order_id = $row['order_id'];                $avg_price = $row['avg_price'];                if ($amount == $order_qty and $amount == $executedQty and $rate == $avg_price) {                    $lockedOrder['instrument_id'] = $lockedOrder['ins_id'];                    $lockedOrder['order_status'] = 'executed';                    $lockedOrder['rate'] = $avg_price;                    $lockedOrder['dse_order_id'] = $order_id;                    $validTransactionArr = Hash::remove($validTransactionArr, "{n}[order_id=/$order_id/]");                    $dataToSave[] = $lockedOrder;                }            }// than process            foreach ($allOrderOfThisInstrument as $row) {                $orderId = trim($row['order_id']);                $executedQty = $row['executed_qty'];                $order_qty = $row['order_qty'];                $order_id = $row['order_id'];                $avg_price = $row['avg_price'];                if ($amount == $order_qty) {                    $lockedOrder['instrument_id'] = $lockedOrder['ins_id'];                    $lockedOrder['order_status'] = 'executed';                    $lockedOrder['rate'] = $avg_price;                    $lockedOrder['dse_order_id'] = $order_id;                }            }        }        if (count($dataToSave)) {            $Order->saveMany($dataToSave, array('atomic' => true));        }        exit;    }    public function all_orders_report()    {        Configure::write('debug', 2);        $broker_id = 11;        App::uses('CakeTime', 'Utility');        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'Order.created');        App::uses('Order', 'Model');        $Order = new Order();        $allOrdersInfo = $Order->find('all', array(            'conditions' => "User.broker_id=$broker_id and $tradeDateCondition /*and Order.dse_order_id IS NULL*/",            'contain' => 'User.broker_id',            'recursive' => -1        ));        $dir = 'execution_report';        $fileArr = $this->scan_dir($dir);        //pr($fileArr);        $reportFile = $fileArr[0];        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $objPHPExcel = new PHPExcel();        $objReader = new PHPExcel_Reader_Excel5();        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load("$dir/$reportFile");        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row) {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false); // Loop all cells, even if it is not set            if (1 == $row->getRowIndex()) continue;//skip first row            $rowIndex = $row->getRowIndex();            //$array_data[$rowIndex] = array('A'=>'', 'B'=>'','C'=>'','D'=>'');            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $array_data[$rowIndex]['client_id'] = $cell->getCalculatedValue();                } else if ('B' == $cell->getColumn()) {                    $array_data[$rowIndex]['instrument_code'] = $cell->getCalculatedValue();                } else if ('C' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_type'] = $cell->getCalculatedValue();                } else if ('D' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_qty'] = $cell->getCalculatedValue();                } else if ('E' == $cell->getColumn()) {                    $array_data[$rowIndex]['avg_price'] = $cell->getCalculatedValue();                } else if ('F' == $cell->getColumn()) {                    $array_data[$rowIndex]['executed_qty'] = $cell->getCalculatedValue();                } else if ('G' == $cell->getColumn()) {                    $array_data[$rowIndex]['status'] = trim($cell->getCalculatedValue());                } else if ('H' == $cell->getColumn()) {                    $array_data[$rowIndex]['sub_status'] = $cell->getCalculatedValue();                } else if ('I' == $cell->getColumn()) {                    $array_data[$rowIndex]['remaining_qty'] = $cell->getCalculatedValue();                } else if ('J' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_id'] = $cell->getCalculatedValue();                }            }        }        $validTransactionArr = array();        foreach ($array_data as $eachRow) {            $col_c = trim($eachRow['order_qty']);            if ($col_c != '') {                $validTransactionArr[] = $eachRow;            }        }        unset($validTransactionArr[0]);        $validTransactionArr = Hash::sort($validTransactionArr, "{n}.avg_price", 'ASC');        $Omo = $this->Components->load('Omo');        $allUsers = $Omo->getUsersList(4);        $allOrders = $Omo->get_broker_orders($allOrdersInfo, $broker_id);        $allLockedOrder = $allOrders['locked'];        $allExecutedOrder = $allOrders['executed'];        $allLockedOrder = Hash::sort($allLockedOrder, "{n}.rate", 'ASC');        $validTransactionArr = $this->cleanTransaction($validTransactionArr, $allExecutedOrder);        pr($validTransactionArr);//        exit;        $dataToSave = array();        foreach ($validTransactionArr as $row) {            $order_id = trim($row['order_id']);            $instrument_code = trim($row['instrument_code']);            $executed_qty = $row['executed_qty'];            $order_qty = $row['order_qty'];            $avg_price = $row['avg_price'];            $status = trim($row['status']);            $sub_status = trim($row['sub_status']);            $internal_ref_no = trim($row['client_id']);            if (isset($allUsers[$broker_id][$internal_ref_no]['id'])) {                $user_id = $allUsers[$broker_id][$internal_ref_no]['id'];                $allOrderByThisUser = Hash::extract($allLockedOrder, "{n}[user_id=$user_id]");                $allOrderOfThisInstrument = Hash::extract($allOrderByThisUser, "{n}[instrument_id=/$instrument_code/]");                if (!empty($allOrderOfThisInstrument)) {                    pr($allOrderOfThisInstrument);                    pr($row);                    if ($sub_status == 'Filled') { // if full executed                        foreach ($allOrderOfThisInstrument as $lockedOrder) {                            //  pr($row);                            //  pr($allOrderOfThisInstrument);                            $partial_amount = $lockedOrder['partial_amount'];                            $amount = $lockedOrder['amount'] + $partial_amount;                            $rate = $lockedOrder['rate'];                            if ($order_qty == $amount and $avg_price == $rate) {                                $lockedOrder['instrument_id'] = $lockedOrder['ins_id'];                                $lockedOrder['order_status'] = 'executed';                                $lockedOrder['rate'] = $avg_price;                                $lockedOrder['dse_order_id'] = $order_id;                                $validTransactionArr = Hash::remove($validTransactionArr, "{n}[order_id=/$order_id/]");                                $dataToSave[] = $lockedOrder;                            }                        }                    }                    if ($sub_status == 'Partially filled') { // if full executed                        foreach ($allOrderOfThisInstrument as $lockedOrder) {                            pr($row);                            pr($allOrderOfThisInstrument);                            $partial_amount = $lockedOrder['partial_amount'];                            $amount = $lockedOrder['amount'] + $partial_amount;                            $rate = $lockedOrder['rate'];                            if ($order_qty == $amount and $avg_price == $rate) {                                // updating un executed amount                                $lockedOrder['instrument_id'] = $lockedOrder['ins_id'];                                $lockedOrder['amount'] = $lockedOrder['amount'] - ($executed_qty - $partial_amount);                                $lockedOrder['partial_amount'] = $lockedOrder['partial_amount'] + ($executed_qty - $partial_amount);                                $dataToSave[] = $lockedOrder;                                // inserting new row into database with executed amount                                unset($lockedOrder['id']);                                $lockedOrder['instrument_id'] = $lockedOrder['ins_id'];                                $lockedOrder['order_status'] = 'executed';                                $lockedOrder['rate'] = $avg_price;                                $lockedOrder['amount'] = $executed_qty - $partial_amount;                                $lockedOrder['partial_amount'] = 0;                                //  $lockedOrder['dse_order_id'] = $order_id;                                $validTransactionArr = Hash::remove($validTransactionArr, "{n}[order_id=/$order_id/]");                                $dataToSave[] = $lockedOrder;                            }                        }                    }                    // exit;                }            }        }        pr($dataToSave);        //exit;        if (count($dataToSave)) {            $Order->saveMany($dataToSave, array('atomic' => true));        }        exit;    }    public function cleanTransaction($validTransactionArr, $allExecutedOrder)    {//pr($validTransactionArr);//pr($allExecutedOrder);//        exit;        foreach ($allExecutedOrder as $row) {            $order_id = $row['dse_order_id'];            $orderIdarr = array();            if ($order_id != '')                $orderIdarr = Hash::extract($validTransactionArr, "{n}[order_id=/$order_id/]");            foreach ($orderIdarr as $arr) {                $sub_status = $arr['sub_status'];                if ($sub_status == 'Filled') {                    $validTransactionArr = Hash::remove($validTransactionArr, "{n}[order_id=/$order_id/]");                }            }        }        return $validTransactionArr;    }    public function instrument()    {        //  Configure::write('debug', 2);        // $StockBangladesh = $this->Components->load('StockBangladesh');        // $t=$StockBangladesh->getLastTradeInfo();        // require_once(APP . 'Vendor' . DS . 'xcrud' . DS . 'xcrud.php');        require_once(APP . 'webroot' . DS . 'xcrud' . DS . 'xcrud.php');        $xcrud = Xcrud::get_instance();        $xcrud->table('instruments');        $xcrud->default_tab('Instrument list');        $xcrud->relation('exchange_id', 'exchanges', 'id', 'name');        $xcrud->relation('sector_list_id', 'sector_lists', 'id', 'name');//        $xcrud->change_type('name', 'image');        $year_news_Info = $xcrud->nested_table('Year news Info', 'id', 'fundamentals', 'instrument_id'); // 2nd level        $year_news_Info->join('meta_id', 'metas', 'id', 'metastable', true);        $year_news_Info->where('metastable.meta_group_id =', 7);        $year_news_Info->columns('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $year_news_Info->fields('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $year_news_Info->relation('meta_id', 'metas', 'id', 'meta_key', 'metas.meta_group_id = 7');        $year_news_Info->relation('instrument_id', 'instruments', 'id', 'instrument_code');        $yearly_change_info = $xcrud->nested_table('Yearly change info', 'id', 'fundamentals', 'instrument_id'); // 2nd level        $yearly_change_info->join('meta_id', 'metas', 'id', 'metastable', true);        $yearly_change_info->where('metastable.meta_group_id =', 8);        $yearly_change_info->columns('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $yearly_change_info->fields('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $yearly_change_info->relation('meta_id', 'metas', 'id', 'meta_key', 'metas.meta_group_id = 8');        $yearly_change_info->relation('instrument_id', 'instruments', 'id', 'instrument_code');        $yearly_fixed_info = $xcrud->nested_table('yearly_fixed_info', 'id', 'fundamentals', 'instrument_id'); // 2nd level        $yearly_fixed_info->join('meta_id', 'metas', 'id', 'metastable', true);        $yearly_fixed_info->where('metastable.meta_group_id =', 9);        $yearly_fixed_info->columns('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $yearly_fixed_info->fields('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $yearly_fixed_info->relation('meta_id', 'metas', 'id', 'meta_key', 'metas.meta_group_id = 9');        $yearly_fixed_info->relation('instrument_id', 'instruments', 'id', 'instrument_code');        $yearly_other_info = $xcrud->nested_table('yearly_other_info', 'id', 'fundamentals', 'instrument_id'); // 2nd level        $yearly_other_info->join('meta_id', 'metas', 'id', 'metastable', true);        $yearly_other_info->where('metastable.meta_group_id =', 10);        $yearly_other_info->columns('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $yearly_other_info->fields('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $yearly_other_info->relation('meta_id', 'metas', 'id', 'meta_key', 'metas.meta_group_id = 10');        $yearly_other_info->relation('instrument_id', 'instruments', 'id', 'instrument_code');        $q1_report_news_info = $xcrud->nested_table('q1_report_news_info', 'id', 'fundamentals', 'instrument_id'); // 2nd level        $q1_report_news_info->join('meta_id', 'metas', 'id', 'metastable', true);        $q1_report_news_info->where('metastable.meta_group_id =', 12);        $q1_report_news_info->columns('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $q1_report_news_info->fields('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $q1_report_news_info->relation('meta_id', 'metas', 'id', 'meta_key', 'metas.meta_group_id = 12');        $q1_report_news_info->relation('instrument_id', 'instruments', 'id', 'instrument_code');        $q2_report_news_info = $xcrud->nested_table('q2_report_news_info', 'id', 'fundamentals', 'instrument_id'); // 2nd level        $q2_report_news_info->join('meta_id', 'metas', 'id', 'metastable', true);        $q2_report_news_info->where('metastable.meta_group_id =', 14);        $q2_report_news_info->columns('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $q2_report_news_info->fields('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $q2_report_news_info->relation('meta_id', 'metas', 'id', 'meta_key', 'metas.meta_group_id = 14');        $q2_report_news_info->relation('instrument_id', 'instruments', 'id', 'instrument_code');        $q3_report_news_info = $xcrud->nested_table('q3_report_news_info', 'id', 'fundamentals', 'instrument_id'); // 2nd level        $q3_report_news_info->join('meta_id', 'metas', 'id', 'metastable', true);        $q3_report_news_info->where('metastable.meta_group_id =', 13);        $q3_report_news_info->columns('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $q3_report_news_info->fields('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $q3_report_news_info->relation('meta_id', 'metas', 'id', 'meta_key', 'metas.meta_group_id = 13');        $q3_report_news_info->relation('instrument_id', 'instruments', 'id', 'instrument_code');        $logo = $xcrud->nested_table('Logo', 'id', 'fundamentals', 'instrument_id'); // 2nd level        $logo->join('meta_id', 'metas', 'id', 'metastable', true);        $logo->where('metastable.meta_group_id =', 15);        $logo->columns('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $logo->fields('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $logo->change_type('fundamentals.meta_value', 'image', '', array('path' => '../files/uploads', 'url' => 'http://localhost/omo/files/uploads/'));        $logo->relation('meta_id', 'metas', 'id', 'meta_key', 'metas.meta_group_id = 15');        $logo->relation('instrument_id', 'instruments', 'id', 'instrument_code');        $report = $xcrud->nested_table('Reports', 'id', 'fundamentals', 'instrument_id'); // 2nd level        $report->join('meta_id', 'metas', 'id', 'metastable', true);        $report->where('metastable.meta_group_id =', 16);        $report->columns('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $report->fields('fundamentals.instrument_id,fundamentals.meta_id,fundamentals.meta_value,fundamentals.meta_date,fundamentals.created,fundamentals.updated');        $report->change_type('fundamentals.meta_value', 'file', '', array('path' => '../files/uploads/reports', 'url' => 'http://localhost/omo/files/uploads/reports/'));        $report->relation('meta_id', 'metas', 'id', 'meta_key', 'metas.meta_group_id = 16');        $report->relation('instrument_id', 'instruments', 'id', 'instrument_code');        $this->set('xcrud', $xcrud);    }    public function runBalance()    {        Configure::write('debug', 2);        $file = fopen("balance/apex/balance.csv", "r");        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4);        $brokerUsers = array();        foreach ($userList[11] as $irn => $arr) {            $key = trim($irn);            $key = str_pad($key, 5, "0", STR_PAD_LEFT);            $key = strtoupper($key);            $brokerUsers[$key] = $arr;        }        //pr($brokerUsers);        $powerArr = array();        while (!feof($file)) {            $row = fgetcsv($file);            $internal_ref_no = trim($row[0]);            $internal_ref_no = strtoupper($internal_ref_no);            $powerArr[$internal_ref_no][] = $row[15];        }        fclose($file);        //pr($powerArr);        $dataToSave = array();        $dataToSave2 = array();        foreach ($brokerUsers as $irn => $usr) {            if (isset($powerArr[$irn])) {                $pid = $usr['portfolio_id'];                $id = $usr['id']; //userid                $balance = $usr['balance'];                $ppower = $powerArr[$irn][0];                $ppower = (float)str_replace(',', '', $ppower);                if ($balance > $ppower) {                    $transaction_type_id = 13;  // adjustment withdraw;                } else {                    $transaction_type_id = 12; // adjustment deposit                }                $amount = abs($ppower - $balance);                //  echo "$irn=$ppower <br />";                $temp = array();                $temp['portfolio_id'] = $pid;                $temp['transaction_type_id'] = $transaction_type_id;                $temp['amount'] = 1;                $temp['rate'] = $amount;                $temp['transaction_time'] = date('Y-m-d H:i:s');                // update users table balance                $temp2 = array();                $temp2['id'] = $id;                $temp2['balance'] = $ppower;                if ($amount > 5)  // difference less than 5 is overlooked                {                    $dataToSave[] = $temp;                    $dataToSave2[] = $temp2;                }            }        }        // pr($dataToSave2);        //  exit;        $model = ClassRegistry::init('PortfolioTransaction');        $model2 = ClassRegistry::init('User');        if (count($dataToSave)) {            $model->saveMany($dataToSave, array('atomic' => true));            $model2->saveMany($dataToSave2, array('atomic' => true));            echo count($dataToSave) . ' balanace updated';        }        exit;    }    public function runTradeIns()    {        App::uses('CakeEmail', 'Network/Email');        Configure::write('debug', 2);        $file = fopen("tradeins/apex/trade.csv", "r");        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4);        $StockBangladesh = $this->Components->load('StockBangladesh');        $ip = $StockBangladesh->getIp();        $instrumentList = $StockBangladesh->instrumentList(2);        $brokerUsers = array();        foreach ($userList[11] as $irn => $arr) {            $key = trim($irn);            $key = str_pad($key, 5, "0", STR_PAD_LEFT);            $key = strtoupper($key);            $brokerUsers[$key] = $arr;        }        $dateRow = fgetcsv($file);        $reportDate = $dateRow[13];        $reportDate = date('Y-m-d', strtotime($reportDate));        if ($reportDate == '1970-01-01') {            echo "date not found";            CakeEmail::deliver('info@stockbangladesh.com', 'Trade Ins problem-Apex', 'Date string can not be found', array('from' => 'omo@stockbangladesh.net'));            exit;        }        $tradeArr = array();        while (!feof($file)) {            $row = fgetcsv($file);            $internal_ref_no = trim($row[1]);            $internal_ref_no = strtoupper($internal_ref_no);            $instrument_code = trim($row[2]);            $transaction_time = trim($row[4]);            $amount = trim($row[5]);            $rate = trim($row[6]);            $order_id = trim($row[8]);            $execution_id = trim($row[9]);            $tradeArr[$internal_ref_no]['instrument_code'] = $instrument_code;            $tradeArr[$internal_ref_no]['transaction_time'] = $transaction_time;            $tradeArr[$internal_ref_no]['amount'] = $amount;            $tradeArr[$internal_ref_no]['rate'] = $rate;            $tradeArr[$internal_ref_no]['order_id'] = $order_id;            $tradeArr[$internal_ref_no]['execution_id'] = $execution_id;        }        fclose($file);        //pr($powerArr);        $dataToSave = array();        foreach ($brokerUsers as $irn => $usr) {            if (isset($tradeArr[$irn])) {                $pid = $usr['portfolio_id'];                $instrument_code = $tradeArr[$irn]['instrument_code'];                if ($tradeArr[$irn]['amount'] < 0) {                    $transaction_type_id = 2; // sell                } else {                    $transaction_type_id = 1; // buy                }                $temp = array();                $temp['portfolio_id'] = $pid;                $temp['instrument_id'] = $instrumentList[$instrument_code];                $temp['transaction_type_id'] = $transaction_type_id;                $temp['amount'] = abs($tradeArr[$irn]['amount']);                $temp['rate'] = $tradeArr[$irn]['rate'];                $transaction_time = $tradeArr[$irn]['transaction_time'];                $temp['transaction_time'] = "$reportDate $transaction_time";                $temp['dse_order_id'] = $tradeArr[$irn]['order_id'];                $temp['dse_execution_id'] = $tradeArr[$irn]['execution_id'];                $dataToSave[] = $temp;            }        }        // pr($dataToSave2);        //  exit;        $model = ClassRegistry::init('PortfolioTransaction');        /* $model->bindModel(             array('belongsTo' => array(                 'User' => array(                     'className' => 'User',                     'foreignKey' => 'portfolio_id',                     'conditions' => '',                     'fields' => 'User.broker_id',                     'order' => ''                 )             )             )         );         $allTransactions = $model->find('all',array(                 'conditions' => "PortfolioTransaction.id=50106",             )         );         pr($allTransactions);         exit;*/        if (count($dataToSave)) {            $model->deleteAll("Portfolio.broker=11 and PortfolioTransaction.dse_execution_id  LIKE  'temp'", false);            exit;            //     $model->saveMany($dataToSave, array('atomic' => true));            $n = count($dataToSave);            echo count($dataToSave) . 'rows inserted in portfolio transaction table';            echo "<pre>";            print_r($dataToSave);            CakeEmail::deliver('info@stockbangladesh.com', 'Trade Ins run sucessfuly-Apex', "$n rows inserted in portfolio transaction table. Script run from $ip", array('from' => 'omo@stockbangladesh.net'));        }        exit;    }    public function adjustShare()    {        //Configure::write('debug', 2);        if ($this->Auth->user('portfolio_id')) {            $pid = $this->Auth->user('portfolio_id');            $broker_fee = $this->Auth->user('broker_fee');            $broker_id = $this->Auth->user('broker_id');        }        // pr("brokerid".$broker_id);        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1);        $thisBrokerUserList = $userList[$broker_id];        $userForDropDown = array();        foreach ($thisBrokerUserList as $user) {            $id = $user['id'];            $portfolio_id = $user['portfolio_id'];            $internal_ref_no = $user['internal_ref_no'];            $userForDropDown[$id] = $internal_ref_no;        }        $this->set('userForDropDown', $userForDropDown);        // $stockBangladesh = $this->Components->load('StockBangladesh');        $instruments = $this->Instrument->find('list');        //pr($instruments);        $this->set('instruments', $instruments);        //  $instruments = $this->$stockBangladesh->instrumentList(3);        // $this->set('instruments', $instruments);        // pr($userForDropDown);        if (isset($_POST['userId'])) {            $userId = $_POST['userId'];            // pr('userid'.$userId);            $Portfolio = $this->Components->load('Portfolio');            $totalAmount = 0;            $allTransactions = $Portfolio->getAllTransactions($userId);            // pr($allTransactions);            $this->ttypeArr = $Portfolio->getTransactionType();            $balance = $Portfolio->getPortfolioBalance($allTransactions, $this->ttypeArr);            $portfolioHoldingsTransaction = $Portfolio->getPortfolioHoldings($allTransactions, $this->ttypeArr);            pr($portfolioHoldingsTransaction);            // $this->set("portfolioHoldingsTransaction", $portfolioHoldingsTransaction);            foreach ($portfolioHoldingsTransaction as $key1 => $transaction) {                foreach ($transaction['transactions'] as $key2 => $neededinfo) {                    $info[$key1][$key2]['portfolio_id'] = $neededinfo['portfolio_id'];                    $info[$key1][$key2]['instrument_id'] = $neededinfo['instrument_id'];                    $info[$key1][$key2]['transaction_type_id'] = $neededinfo['transaction_type_id'];                    $info[$key1][$key2]['amount'] = $neededinfo['amount'];                    $info[$key1][$key2]['rate'] = $neededinfo['rate'];                    $info[$key1][$key2]['portfolio_id'] = $neededinfo['portfolio_id'];                    $totalAmount += $neededinfo['amount'];                }                $ins_code = $this->Instrument->find('all', array('conditions' => array('Instrument.id' => $key1), 'fields' => 'instrument_code', 'recursive' => -1));                //  pr($ins_code);                $summery[$key1]['totalAmount'] = $totalAmount;  //totalQuantity                $summery[$key1]['saleAbleShares'] = $transaction['saleAbleShares'];                $summery[$key1]['ins_code'] = $ins_code[0]['Instrument']['instrument_code'];                $totalAmount = 0;            }            $this->set('summery', $summery);            $allinfo['summery'] = $summery;            $allinfo['info'] = $info;            // pr($allinfo['summery']);            echo json_encode($allinfo);            die();            // pr($portfolioHoldingsTransaction);        }    }    public function addShare()    {        // Configure::write('debug', 2);        if ($this->request->is('post')) {            // pr ($this->data);            $addShareInfo['portfolio_id'] = $this->data['portfolioId'];            $addShareInfo['instrument_id'] = $this->data['instruments'];            $addShareInfo['amount'] = $this->data['quantity'];            $addShareInfo['rate'] = $this->data['rate'];            $addShareInfo['transaction_time'] = $this->data['transactionTime'];            $addShareInfo['transaction_type_id'] = 1;            $addShareInfo['commission'] = 0.5;            $addShareInfo['parent_id'] = 0;            $addShareInfo['id'] = 0;            $totalRate = $addShareInfo['amount'] * $addShareInfo['rate'];            $flag = 0;            if ($this->data['effect'] == 1) {                //  pr ($addShareInfo['portfolio_id']);                if ($transactionRate = $this->PortfolioTransaction->find('all', array('conditions' => array('PortfolioTransaction.portfolio_id' => $addShareInfo['portfolio_id'], 'PortfolioTransaction.transaction_type_id' => 12), 'fields' => 'rate', 'recursive' => -1))) {                    $updatedRate = $transactionRate[0][PortfolioTransaction][rate] + $totalRate + (($totalRate * .5) / 100);                    // pr("updatedRate");                    //  pr($updatedRate);                    if ($this->PortfolioTransaction->updateAll(array('PortfolioTransaction.rate' => $updatedRate), array('PortfolioTransaction.portfolio_id' => $addShareInfo['portfolio_id'], 'PortfolioTransaction.transaction_type_id' => 12)))                        $flag = 1;                } else {                    $newEntry['portfolio_id'] = $this->data['portfolioId'];                    $newEntry['instrument_id'] = 0;                    $newEntry['transaction_type_id'] = 12;                    $newEntry['amount'] = 1;                    $newEntry['rate'] = $totalRate + (($totalRate * .5) / 100);                    $newEntry['transaction_time'] = $this->data['transactionTime'];                    $newEntry['id'] = 0;                    // pr("newEntry");                    // pr($newEntry);                    // pr($this->PortfolioTransaction->save($newEntry));                    if ($this->PortfolioTransaction->save($newEntry))                        $flag = 1;                }                if ($flag == 1 && $this->PortfolioTransaction->save($addShareInfo)) {                    echo "Share added successfully without effect on balance";                }            }            if ($this->data['effect'] == 0) {                if ($this->PortfolioTransaction->save($addShareInfo)) {                    echo "Share added successfully";                }            }            // pr ($addShareInfo);            die();        }    }    public function removeShare()    {        //  Configure::write('debug', 2);        if (count($this->data) == 2) {            $userId = $this->data['userId'];            $shareInstrument = $this->data['shareInstrument'];            $transactionAmount = $this->PortfolioTransaction->find('all', array('conditions' => array('PortfolioTransaction.portfolio_id' => $userId, 'PortfolioTransaction.transaction_type_id' => 1, 'PortfolioTransaction.instrument_id' => $shareInstrument), 'fields' => 'amount', 'recursive' => -1));            // pr($transactionAmount);            $totalShare = 0;            foreach ($transactionAmount as $neededinfo) {                $totalShare += $neededinfo [PortfolioTransaction]['amount'];            }            echo json_encode($totalShare);            die();        }        if (count($this->data) > 2) {            // pr($this->data);            $userId = $this->data['portfolioId_r'];            $shareInstrument = $this->data['wonInstruments'];            $quantity = $this->data['quantity_r'];            $effect = $this->data['effect_r'];            $transactions = $this->PortfolioTransaction->find('all', array('conditions' => array('PortfolioTransaction.portfolio_id' => $userId, 'PortfolioTransaction.transaction_type_id' => 1, 'PortfolioTransaction.instrument_id' => $shareInstrument), 'order' => array('PortfolioTransaction.amount DESC'), 'recursive' => -1));            // pr($transactions);            // $totalBalance=0;            foreach ($transactions as $neededData) {                $transaction_id = $neededData[PortfolioTransaction]['id'];                if ($quantity >= $neededData[PortfolioTransaction][amount]) {                    $quantity = $quantity - $neededData[PortfolioTransaction][amount];                    $balance = $neededData[PortfolioTransaction][amount] * $neededData[PortfolioTransaction][rate];                    $totalBalance += $balance;                    //delete query                    $this->PortfolioTransaction->deleteAll(array('PortfolioTransaction.id' => $transaction_id));                    if ($quantity == 0)                        break;                } else                                                       //($quantity < $neededData[PortfolioTransaction][amount])                {                    $remainingQuantity = $neededData[PortfolioTransaction][amount] - $quantity;                    $balance = $quantity * $neededData[PortfolioTransaction][rate];                    $totalBalance += $balance;                    $quantity = $quantity - $quantity;                    //update query                    $this->PortfolioTransaction->updateAll(array('PortfolioTransaction.amount' => $remainingQuantity), array('PortfolioTransaction.id' => $transaction_id));                    if ($quantity == 0)                        break;                }            }            if ($effect == 1) {                //  pr ($addShareInfo['portfolio_id']);                if ($transactionRate = $this->PortfolioTransaction->find('all', array('conditions' => array('PortfolioTransaction.portfolio_id' => $userId, 'PortfolioTransaction.transaction_type_id' => 12), 'fields' => 'rate', 'recursive' => -1))) {                    $updatedRate = $transactionRate[0][PortfolioTransaction][rate] - ($totalBalance + (($totalBalance * .5) / 100));                    // pr("updatedRate");                    //  pr($updatedRate);                    if ($this->PortfolioTransaction->updateAll(array('PortfolioTransaction.rate' => $updatedRate), array('PortfolioTransaction.portfolio_id' => $userId, 'PortfolioTransaction.transaction_type_id' => 12))) {                        if ($quantity != 0) {                            echo "Rest of " . $quantity . " shares can't be deleted because of empty Database";                        } else                            echo "delete successful without effecting on balance";                    }                } else {                    $newEntry['portfolio_id'] = $this->data['portfolioId_r'];                    $newEntry['instrument_id'] = 0;                    $newEntry['transaction_type_id'] = 12;                    $newEntry['amount'] = 1;                    $newEntry['rate'] = -($totalBalance + (($totalBalance * .5) / 100));                    $newEntry['id'] = 0;                    if ($this->PortfolioTransaction->save($newEntry)) {                        if ($quantity != 0) {                            echo "Rest of " . $quantity . " shares can't be deleted because of empty Database";                        } else                            echo "delete successful without effecting on balance";                    }                }            } else {                if ($quantity != 0) {                    echo "Rest of " . $quantity . " shares can't be deleted because of empty Database";                } else                    echo "delete successful";            }        }        die();    }    public function deposit()    {        Configure::write('debug', 2);        // $this->layout = 'default-login';        if ($this->Auth->user('portfolio_id')) {            $pid = $this->Auth->user('portfolio_id');        }        /*  if (!$this->data && $this->Session->check('last_post_data')) {              $this->data = $this->Session->read('last_post_data');              $this->Session->delete('last_post_data');          }  */        if (isset($_FILES['depositSlip']['name'])) {            print_r($_FILES);            /*  $folder_name = './img/';              $str_file = (basename($_FILES['file']['name']));              $upload_dir = $folder_name.$str_file;              if (move_uploaded_file($_FILES['file']['tmp_name'], $upload_dir))              {                  $st = ", cheque_ref='" . $str_file . "'";              }              else              {                  $st = "";              }*/        }        /*                if (count($this->data)>2) {                    pr("this->data");                    pr($this->data);                    pr("file");                    pr($_FILES['file']['name']);                    /*    $validextensions = array("jpeg", "jpg", "png");                        pr($_FILES);                        $temporary = explode(".", $_FILES["file"]["name"]);                        $file_extension = end($temporary);                        if ((($_FILES["file"]["type"] == "image/png") || ($_FILES["file"]["type"] == "image/jpg") || ($_FILES["file"]["type"] == "image/jpeg")) && ($_FILES["file"]["size"] < 100000)&& in_array($file_extension, $validextensions)) {                            if ($_FILES["file"]["error"] > 0) {                                echo "Return Code: " . $_FILES["file"]["error"] . "<br/><br/>";                            }                            else {                                echo "<span>Your File Uploaded Succesfully...!!</span><br/>";                                echo "<br/><b>File Name:</b> " . $_FILES["file"]["name"] . "<br>";                                echo "<b>Type:</b> " . $_FILES["file"]["type"] . "<br>";                                echo "<b>Size:</b> " . ($_FILES["file"]["size"] / 1024) . " kB<br>";                                echo "<b>Temp file:</b> " . $_FILES["file"]["tmp_name"] . "<br>";                                if (file_exists("upload/" . $_FILES["file"]["name"])) {                                    echo $_FILES["file"]["name"] . " <b>already exists.</b> ";                                }                                else {                                    move_uploaded_file($_FILES["file"]["tmp_name"], "upload/" . $_FILES["file"]["name"]);                                    echo "<b>Stored in:</b> " . "upload/" . $_FILES["file"]["name"];                                }                            }                        }                        else {                            echo "<span>***Invalid file Size or Type***<span>";                        }                        */        /*   $userDepositData['user_id']=$pid;            $userDepositData['amount']=$this->data['depositAmount'];            $userDepositData['bank'] =$this->data['bankName'];            $userDepositData['branch']=$this->data['branchName'];            $userDepositData['ddate']=$this->data['depositDate'];            // $_FILES["uploadedimage"]["type"];            $userDepositData['payment_type']=$this->data['pay'];            $userDepositData['cheque_ref']=$_FILES['file']['name'];           // pr($userDepositData);             //$this->UserDeposits->save($userDepositData) ;            echo "successfully submitted";            die();        }        */        //$this->SignMeUp->register();    }    public function depositFile()    {        Configure::write('debug', 2);        $target_dir ="img/";        $target_file = $target_dir . basename($_FILES["depositSlip"]["name"]);        $uploadOk = 1;        $imageFileType = pathinfo($target_file,PATHINFO_EXTENSION);        // Check if image file is a actual image or fake image                if(isset($_POST["submit"])) {                    $check = getimagesize($_FILES["depositSlip"]["tmp_name"]);                    if($check !== false) {                        echo "File is an image - " . $check["mime"] . ".";                        $uploadOk = 1;                    } else {                        echo "File is not an image.";                        $uploadOk = 0;                    }                }        // Check if file already exists                if (file_exists($target_file)) {                    echo "Sorry, file already exists.";                    $uploadOk = 0;                }        // Check file size                if ($_FILES["depositSlip"]["size"] > 500000000000) {                    echo "Sorry, your file is too large.";                    $uploadOk = 0;                }        // Allow certain file formats                if($imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg"                    && $imageFileType != "gif" ) {                    echo "Sorry, only JPG, JPEG, PNG & GIF files are allowed.";                    $uploadOk = 0;                }        // Check if $uploadOk is set to 0 by an error                if ($uploadOk == 0) {                    echo "Sorry, your file was not uploaded.";        // if everything is ok, try to upload file                } else {                    if (move_uploaded_file($_FILES["depositSlip"]["tmp_name"], $target_file)) {                        echo "The file ". basename( $_FILES["depositSlip"]["name"]). " has been uploaded.";                    } else {                        echo "Sorry, there was an error uploading your file.";                    }                }        die();    }    }