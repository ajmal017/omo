<?phpApp::uses('AppController', 'Controller');/** * Markets Controller * * @property Market $Market */class TechnicalAnalysisController extends AppController{    /**     * home method     *     * @return void     */    private $instrumentList = null;    public function beforeFilter()    {        parent::beforeFilter();        //$this->Auth->allow('test');        $this->Auth->allow();        $StockBangladesh = $this->Components->load('StockBangladesh');        $this->instrumentList = $StockBangladesh->instrumentList(2);    }    public $helpers = array('Js' => array('Jquery'), 'StockBangladesh');    //public $components = array('HighCharts.HighCharts','StockBangladesh','Cookie');    public $chartData = array(7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6, 7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6, 7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6, 7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6);    public $lastTradeInfo = null, $yesterdayTradeInfo = null;    public function _getLastTradeInfo()    {        if ($this->lastTradeInfo) {//pr('from variable');        } else {            $StockBangladesh = $this->Components->load('StockBangladesh');            //          pr('generated');            $exchangeId = Configure::read('EXCHANGE_ID');            $lastTradeInfo = Cache::read('lastTradeInfo');            //$lastTradeInfo = Cache::delete('lastTradeInfo');            if (!$lastTradeInfo) {                //pr("mem empty here");                $lastTradeInfo = $this->Market->find('first', array(                    'conditions' => "Market.is_trading_day=1 and Market.exchange_id=$exchangeId",                    'recursive' => 1                ));                Cache::write('lastTradeInfo', $lastTradeInfo, 'minute');            }            //pr(Hash::sort(Hash::extract($lastTradeInfo, 'DataBanksIntraday.{n}'), '{n}.id', 'asc'));            $databank = Hash::extract($lastTradeInfo, 'DataBanksIntraday.{n}');            $result = Hash::combine($databank, '{n}.trade_time', '{n}', '{n}.instrument_code');            //$lastTradeInfo['DataBanksIntraday']=Hash::combine(Hash::sort(Hash::extract($lastTradeInfo, 'DataBanksIntraday.{n}'), '{n}.id', 'asc'), '{n}.instrument_code', '{n}');            //pr($result);            $DataBanksIntradayCombinedWithPrevMinute = $StockBangladesh->merge_last_two_minutes($result);            //pr(Hash::sort($DataBanksIntradayCombinedWithPrevMinute, '{s}.p_pub_last_traded_price_change_per', 'desc'));            //$lastTradeInfo['DataBanksIntraday']=$DataBanksIntradayCombinedWithPrevMinute;            //$lastTradeInfo['DataBanksIntradayLast']=Hash::combine( Hash::sort($databank, '{n}.id', 'asc'), '{n}.instrument_code', '{n}');            //$dataBanksIntradayLast=Hash::combine( Hash::sort($databank, '{n}.id', 'asc'), '{n}.instrument_code', '{n}');            $yesterdayTradeInfo = $this->_getYesterdayTradeInfo();            //$DataBanksIntradayCombinedWithYesterday=$StockBangladesh->merge_with_yesterday($lastTradeInfo['DataBanksIntradayLast'],$yesterdayTradeInfo['DataBanksIntraday']);            $DataBanksIntradayCombinedWithYesterday = $StockBangladesh->merge_with_yesterday($DataBanksIntradayCombinedWithPrevMinute, $yesterdayTradeInfo['DataBanksIntraday']);            $lastTradeInfo['DataBanksIntraday'] = $DataBanksIntradayCombinedWithYesterday;            // pr($DataBanksIntradayCombinedWithYesterday);            //$lastTradeInfo['DataBanksIntradayLast']=$DataBanksIntradayCombinedWithYesterday;            //$databank_change_up=Hash::sort($lastTradeInfo['DataBanksIntradayLast'], '{s}.change', 'desc');            //pr($databank_change_up);            //exit;            $this->lastTradeInfo = $lastTradeInfo;        }        return $this->lastTradeInfo;    }    public function _getYesterdayTradeInfo()    {        if ($this->yesterdayTradeInfo) {        } else {            $exchangeId = Configure::read('EXCHANGE_ID');            $yesterdayTradeInfo = Cache::read('yesterdayTradeInfo');            //$yesterdayTradeInfo = Cache::delete('yesterdayTradeInfo');            if (!$yesterdayTradeInfo) {                //pr("mem empty here");                $lastTwoMarketsInfo = $this->Market->find('all', array(                    'conditions' => "Market.is_trading_day=1 and Market.exchange_id=$exchangeId",                    'recursive' => 0,                    'limit' => 2                ));                $yesterayMarketId = Hash::get($lastTwoMarketsInfo, '1.Market.id');                $yesterdayTradeInfo = $this->Market->find('first', array(                    'conditions' => "Market.id=$yesterayMarketId",                    'recursive' => 1                ));                Cache::write('yesterdayTradeInfo', $yesterdayTradeInfo, 'day');            }            //pr(Hash::sort(Hash::extract($lastTradeInfo, 'DataBanksIntraday.{n}'), '{n}.id', 'asc'));            $yesterdayTradeInfo['DataBanksIntraday'] = Hash::combine(Hash::sort(Hash::extract($yesterdayTradeInfo, 'DataBanksIntraday.{n}'), '{n}.id', 'asc'), '{n}.instrument_code', '{n}');            //pr($lastTradeInfo);            $this->yesterdayTradeInfo = $yesterdayTradeInfo;        }        return $this->yesterdayTradeInfo;    }    public function home()    {        App::uses('CakeTime', 'Utility');        $this->layout = 'default3';        /*         * TRY TO MINIMUM USE MODEL IN COMPONENT. SO WE ARE USING _getLastTradeInfo INSTEAD OF $this->StockBangladesh->getLastTradeInfo();         */        //$lastTradeInfo=$this->StockBangladesh->getLastTradeInfo();        $lastTradeInfo = $this->_getLastTradeInfo();//print_r($_SESSION);        //$this->Session->write('Auth.User.uuid','test');        /*  pr($this->Session->read('Auth.User'));          pr($this->Auth->user());          exit;*/        //$this->set('lastTradeInfo', $lastTradeInfo);        //pr($lastTradeInfo);        $nextTradeInfo = Cache::read('nextTradeInfo');        $exchangeId = Configure::read('EXCHANGE_ID');        //$nextTradeInfo = Cache::delete('nextTradeInfo');        if (!$nextTradeInfo) {            //pr("mem empty here");            $nextTradeInfo = $this->Market->find('first', array(                'order' => array('Market.id' => 'asc'),                'conditions' => "Market.is_trading_day=2 and Market.exchange_id=$exchangeId",                'recursive' => 0            ));            Cache::write('nextTradeInfo', $nextTradeInfo, 'minute');        }        /*         * @TODO TIME SHOULD BE INTERNATIONALIZE. CONSIDER USER TIME ZONE         *///    pr(CakeTime::nice(CakeTime::fromString('Dec 19 2013 02:30:53:073PM')));        $tradeDayTime = $lastTradeInfo['Market']['trade_date'] . " " . $lastTradeInfo['Market']['market_closed'];        if (CakeTime::isPast($tradeDayTime)) {            $nextTradeDayTime = $nextTradeInfo['Market']['trade_date'] . " " . $nextTradeInfo['Market']['market_started'];            $remainingTime = CakeTime::fromString($nextTradeDayTime) - CakeTime::fromString('now');            $remainingText = "to open market";        } else {            $remainingTime = CakeTime::fromString($tradeDayTime) - CakeTime::fromString('now');            $remainingText = "to close market";        }        $this->set('remainingTime', $remainingTime);        $this->set('remainingText', $remainingText);        // DSEX CHART        $this->market_summary(0);        $this->index_chart(0);        $this->trade_chart(0);        $this->value_chart(0);    }    public function trade_chart($ajax = 1)    {        App::uses('CakeTime', 'Utility');        $StockBangladesh = $this->Components->load('StockBangladesh');        if ($ajax)            $this->layout = 'ajax'; //WHEN THIS CALLED FROM AJAX CHANGE THE LAYOUT TO AJAX        $lastTradeInfo = $this->_getLastTradeInfo();        $showBarLimit = 120;        $yesterdayTradeInfo = $this->_getYesterdayTradeInfo();        $chartName = 'trade Chart';        $tradeVal = Hash::extract(Hash::extract($lastTradeInfo, 'MarketStat.{n}[stat_id=2]'), '{n}.stats_value');        $tradeValYesterday = Hash::extract(Hash::extract($yesterdayTradeInfo, 'MarketStat.{n}[stat_id=2]'), '{n}.stats_value');        $tradeTime = Hash::extract(Hash::extract($lastTradeInfo, 'MarketStat.{n}[stat_id=2]'), '{n}.stats_time');        $tradeTimeYesterday = Hash::extract(Hash::extract($yesterdayTradeInfo, 'MarketStat.{n}[stat_id=2]'), '{n}.stats_time');        $tradeValDiff = $StockBangladesh->array_subtract($tradeVal);        $totalPointToday = count($tradeValDiff);        $tradeValDiffYesterday = $StockBangladesh->array_subtract($tradeValYesterday);        $tradeValDiffAll = Hash::merge($tradeValDiff, $tradeValDiffYesterday);        $tradeTimeAll = Hash::merge($tradeTime, $tradeTimeYesterday);        $dateTime = Hash::map($tradeTimeAll, '{n}', function ($newArr) {            return CakeTime::format('h:i A', $newArr);            //return CakeTime::format('d h:i',$newArr);        });        $dateTime = array_slice($dateTime, 0, $showBarLimit);        $tradeValDiffAll = array_slice($tradeValDiffAll, 0, $showBarLimit);        $dateTime = Hash::sort($dateTime, ' ', 'desc');;        $tradeValDiff = Hash::sort($tradeValDiffAll, ' ', 'desc');        // pr($tradeVal);        //pr($tradeTime);        // $yMin=Hash::apply($ds30Data, '{n}', 'min');        // $dateTime=Hash::sort($arrDate, ' ', 'desc');;        $mychart = $this->HighCharts->create($chartName, 'column');        $this->HighCharts->setChartParams(            $chartName,            array(                'renderTo' => 'trade_div', // div to display chart inside                //'chartWidth'=> 400,                'chartHeight' => 110,                'xAxisCategories' => $dateTime,                //'yAxisMax' 				=> 60,                'enableAutoStep' => false,                'creditsEnabled' => true,                'creditsText' => 'StockBangladesh.com',                'creditsURL' => 'http://stockbangladesh.com',                //'tickInterval' => 'auto'            )        );        $mychart->xAxis->tickInterval = 15;        if ($showBarLimit > $totalPointToday) {            $mychart->xAxis->plotBands->from = 0;            $mychart->xAxis->plotBands->to = $showBarLimit - $totalPointToday;            $mychart->xAxis->plotBands->color = 'rgba(68, 170, 213, .2)';            $mychart->xAxis->plotBands->label->text = 'yesterday';        }        $mychart->yAxis->title->text = "No of trades";        $mychart->chart->zoomType = 'x';        $mychart->plotOptions->series->marker->radius = 2;        $mychart->plotOptions->series->marker->symbol = 'triangle';        $series = $this->HighCharts->addChartSeries();        $series->addName('vol')->addData($tradeValDiff);        $series->showInLegend = false;        $mychart->addSeries($series);        // TRADE CHART---END    }    public function market_summary($ajax = 1)    {        /* $this->request->addDetector('internalIp', array(             'env' => 'CLIENT_IP',             'options' => array('127.0.0.1')         ));         if($this->request->is('internalIp'))             echo "OK";         exit;*/        App::uses('CakeTime', 'Utility');        $StockBangladesh = $this->Components->load('StockBangladesh');        if ($ajax)            $this->layout = 'ajax'; //WHEN THIS CALLED FROM AJAX CHANGE THE LAYOUT TO AJAX        $lastTradeInfo = $this->_getLastTradeInfo();        // pr(Hash::extract($lastTradeInfo, 'DataBanksIntraday.{s}[highdiff=0]'));        $this->set('lastTradeInfo', $lastTradeInfo);        // TRADE CHART---START    }    public function value_chart($ajax = 1)    {        App::uses('CakeTime', 'Utility');        $StockBangladesh = $this->Components->load('StockBangladesh');        if ($ajax)            $this->layout = 'ajax'; //WHEN THIS CALLED FROM AJAX CHANGE THE LAYOUT TO AJAX        $lastTradeInfo = $this->_getLastTradeInfo();        $showBarLimit = 120;        $yesterdayTradeInfo = $this->_getYesterdayTradeInfo();        // TRADE VALUE CHART---START        $chartName = 'value Chart';        $tradeVal = Hash::extract(Hash::extract($lastTradeInfo, 'MarketStat.{n}[stat_id=3]'), '{n}.stats_value');        $tradeValYesterday = Hash::extract(Hash::extract($yesterdayTradeInfo, 'MarketStat.{n}[stat_id=3]'), '{n}.stats_value');        $tradeTime = Hash::extract(Hash::extract($lastTradeInfo, 'MarketStat.{n}[stat_id=3]'), '{n}.stats_time');        $tradeTimeYesterday = Hash::extract(Hash::extract($yesterdayTradeInfo, 'MarketStat.{n}[stat_id=3]'), '{n}.stats_time');        $tradeValDiff = $StockBangladesh->array_subtract($tradeVal);        $tradeValDiffYesterday = $StockBangladesh->array_subtract($tradeValYesterday);        $totalPointToday = count($tradeValDiff);        $tradeValDiffAll = Hash::merge($tradeValDiff, $tradeValDiffYesterday);        $tradeTimeAll = Hash::merge($tradeTime, $tradeTimeYesterday);        $dateTime = Hash::map($tradeTimeAll, '{n}', function ($newArr) {            return CakeTime::format('h:i A', $newArr);            //return CakeTime::format('d h:i',$newArr);        });        $dateTime = array_slice($dateTime, 0, $showBarLimit);        $tradeValDiffAll = array_slice($tradeValDiffAll, 0, $showBarLimit);        $dateTime = Hash::sort($dateTime, ' ', 'desc');;        $tradeValDiff = Hash::sort($tradeValDiffAll, ' ', 'desc');        // $yMin=Hash::apply($ds30Data, '{n}', 'min');        // $dateTime=Hash::sort($arrDate, ' ', 'desc');;        $mychart = $this->HighCharts->create($chartName, 'column');        $this->HighCharts->setChartParams(            $chartName,            array(                'renderTo' => 'value_div', // div to display chart inside                //'chartWidth'=> 400,                'chartHeight' => 110,                'xAxisCategories' => $dateTime,                'enableAutoStep' => false,                'creditsEnabled' => true,                'creditsText' => 'StockBangladesh.com',                'creditsURL' => 'http://stockbangladesh.com',                //'tickInterval' => 'auto'            )        );        $mychart->xAxis->tickInterval = 30;        if ($showBarLimit > $totalPointToday) {            $mychart->xAxis->plotBands->from = 0;            $mychart->xAxis->plotBands->to = $showBarLimit - $totalPointToday;            $mychart->xAxis->plotBands->color = 'rgba(68, 170, 213, .2)';            $mychart->xAxis->plotBands->label->text = 'yesterday';        }        $mychart->yAxis->title->text = "Trade Value";        $mychart->chart->zoomType = 'x';        $mychart->plotOptions->series->marker->radius = 2;        $mychart->plotOptions->series->marker->symbol = 'triangle';        $series = $this->HighCharts->addChartSeries();        $series->addName('vol')->addData($tradeValDiff);        $series->showInLegend = false;        $mychart->addSeries($series);        // TRADE VALUE CHART---END    }    public function index_chart($ajax = 1)    {        App::uses('CakeTime', 'Utility');        $StockBangladesh = $this->Components->load('StockBangladesh');        if ($ajax)            $this->layout = 'ajax'; //WHEN THIS CALLED FROM AJAX CHANGE THE LAYOUT TO AJAX        // DSEX CHART---START        $chartName = 'DSEX Chart';        $lastTradeInfo = $this->_getLastTradeInfo();        $dsExData = Hash::extract(Hash::extract($lastTradeInfo, 'IndexValue.{n}[index_id=2]'), '{n}.capital_value');        $arr = Hash::map($dsExData, '{n}', function ($newArr) {            return $newArr + 0;        });        $dsExData = Hash::sort($arr, ' ', 'desc');        $dateTime = Hash::extract(Hash::extract($lastTradeInfo, 'IndexValue.{n}[index_id=2]'), '{n}.date_time');        $arrDate = Hash::map($dateTime, '{n}', function ($newArr) {            return CakeTime::format('h:i A', $newArr);        });        $yMin = Hash::apply($dsExData, '{n}', 'min');        $dateTime = Hash::sort($arrDate, ' ', 'desc');;        $mychart = $this->HighCharts->create($chartName, 'areaspline');        $this->HighCharts->setChartParams(            $chartName,            array(                'renderTo' => 'dsex_div', // div to display chart inside                'chartHeight' => 200,                'xAxisCategories' => $dateTime,                'yAxisMin' => $yMin,                'enableAutoStep' => false,                'creditsEnabled' => true,                'creditsText' => 'StockBangladesh.com',                'creditsURL' => 'http://stockbangladesh.com',                //'tickInterval' => 'auto'            )        );        $mychart->xAxis->tickInterval = 8;        $series = $this->HighCharts->addChartSeries();        $series->addName('DSEX')->addData($dsExData);        $series->showInLegend = false;        $mychart->plotOptions->series->marker->radius = 2;        $mychart->plotOptions->series->marker->symbol = 'triangle';        $mychart->addSeries($series);        // DSEX CHART---END        // DS30 CHART---START        $chartName = 'DS30 Chart';        $ds30Data = Hash::extract(Hash::extract($lastTradeInfo, 'IndexValue.{n}[index_id=1]'), '{n}.capital_value');        $arr = Hash::map($ds30Data, '{n}', function ($newArr) {            return $newArr + 0;        });        $ds30Data = Hash::sort($arr, ' ', 'asc');        $dateTime = Hash::extract(Hash::extract($lastTradeInfo, 'IndexValue.{n}[index_id=1]'), '{n}.date_time');        $arrDate = Hash::map($dateTime, '{n}', function ($newArr) {            return CakeTime::format('h:i A', $newArr);        });        $yMin = Hash::apply($ds30Data, '{n}', 'min');        $dateTime = Hash::sort($arrDate, ' ', 'desc');;        $mychart = $this->HighCharts->create($chartName, 'areaspline');        $this->HighCharts->setChartParams(            $chartName,            array(                'renderTo' => 'ds30_div', // div to display chart inside                'chartWidth' => 400,                'chartHeight' => 200,                'xAxisCategories' => $dateTime,                'yAxisMin' => $yMin,                'enableAutoStep' => false,                'creditsEnabled' => true,                'creditsText' => 'StockBangladesh.com',                'creditsURL' => 'http://stockbangladesh.com',                //'tickInterval' => 'auto'            )        );        $mychart->xAxis->tickInterval = 8;        $mychart->plotOptions->series->marker->radius = 2;        $mychart->plotOptions->series->marker->symbol = 'triangle';        $series = $this->HighCharts->addChartSeries();        $series->addName('DS30')->addData($ds30Data);        $series->showInLegend = false;        $mychart->addSeries($series);        // DS30 CHART---END    }    public function test()    {        $this->layout = 'default3';        $data = array(            array(                'Person' => array(                    'first_name' => 'Nate',                    'last_name' => 'Abele',                    'city' => 'Boston',                    'state' => 5,                    'something' => '42'                )            ),            array(                'Person' => array(                    'first_name' => 'Larry',                    'last_name' => 'Masters',                    'city' => 'Boondock',                    'state' => 10,                    'something' => '{0}'                )            ),            array(                'Person' => array(                    'first_name' => 'Garrett',                    'last_name' => 'Woodworth',                    'city' => 'Venice Beach',                    'state' => 20,                    'something' => '{1}'                )            )        );        pr($data);        $res = Hash::format($data, array('{n}.Person.something', '{n}.Person.last_name', '{n}.Person.last_name'), '%1$d,%1$s,%3$s');        pr($res);        /*        Array        (            [0] => 42, Nate            [1] => 0, Larry            [2] => 0, Garrett        )        */        $res = Hash::format($data, array('{n}.Person.first_name', '{n}.Person.something'), '%1$s, (%2$d-%2$d)');        pr($res);        /*        Array        (            [0] => Nate, 42            [1] => Larry, 0            [2] => Garrett, 0        )        */        $ratings = array(            'Rating' => array(                array(                    'id' => 4,                    'rating' => -1                ),                array(                    'id' => 14,                    'rating' => 9.7                ),                array(                    'id' => 26,                    'rating' => 9.55                )            )        );        pr(Hash::extract($ratings, 'Rating.{n}[rating>-1]'));        //exit;    }    public function modal($type)    {        $this->layout = 'ajax';        $this->set('type', $type);    }    public function send_feedback()    {        $this->layout = 'ajax';    }    public function search_result()    {        $this->layout = 'ajax';        //echo "here";        //print_r($this->request->query['q']);        $key = $this->request->query['q'];        //$key='BANK';        $key = strtoupper($key);        $lastTradeInfo = $this->_getLastTradeInfo();        //pr(Hash::extract($lastTradeInfo['DataBanksIntraday'], "{s}[instrument_code=/.*$key.*/]"));        $result = Hash::extract($lastTradeInfo['DataBanksIntraday'], "{s}[instrument_code=/.*$key.*/]");        echo json_encode($result);        exit;        //    }    function mail_test()    {        App::uses('CakeEmail', 'Network/Email');        $Email = new CakeEmail('test');        $Email->template('email2');        $Email->emailFormat('html');        $Email->viewVars(array('value' => 'This is me penetrating here :)'));        $Email->from(array('info@stockbangladesh.com' => 'My Site'));        $Email->to('afmsohail@gmail.com');        $Email->subject('About');        $Email->send();        /* $Email->template('welcome', 'fancy')             ->emailFormat('html')             ->to('bob@example.com')             ->from('app@domain.com')             ->send();*/        exit;    }    public function chart()    {      //  $this->layout = 'layout';        $this->set('js_asset_compression_enable', false);        $StockBangladesh = $this->Components->load('StockBangladesh');        $this->set('instrumentList', $StockBangladesh->instrumentList(1));    }    function  chart_data($instrumentCode = 'DSEX')    { //Configure::write('debug', 2);        $chart = $this->Components->load('Chart');        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $instrumentId = $instrumentList[$instrumentCode];        $adj=1;        $from='1999-10-20';        $to = date('Y-m-d');        if ($adj)            $ohlcData = $chart->getAdjustedDailyData($instrumentId, $from, $to);        else            $ohlcData = $chart->getDailyData($instrumentId, $from, $to);        $str = "Date,Open,High,Low,Close\n";        //$lastday= date("Y-m-d",$dataBank[0]['data_banks_daily']['date']+24*60*60);        $index=count($ohlcData['realtimeStamps']);        $lastday = $ohlcData['realtimeStamps'][$index-1];        $lastday= date("Y-m-d",$lastday+24*60*60);        $str .= "$lastday,null,null,null,null\n";        for($i=0;$i<count($ohlcData['realtimeStamps']);$i++)        {            $dateformate =date('Y-m-d', $ohlcData['realtimeStamps'][$i]);            $str .= $dateformate . "," . $ohlcData['open'][$i] . "," . $ohlcData['high'][$i] . "," . $ohlcData['low'][$i] . "," . $ohlcData['close'][$i] . "," . $ohlcData['volume'][$i] . "\n";        }        echo $str;        exit;    }    function  chart_img_data($reportrange = "2013-10-25|2014-04-25", $instrumentCode = 'ABBANK', $comparewith = 'ABBANK', $Indicators = "RSI", $configure = "dfgfd", $charttype = "dfgfd", $overlay = "dfgfd", $mov1 = "dfgfd", $mov2 = "dfgfd")    {        $chart = $this->Components->load('Chart');        $width = 1000;        $mainHeight = 320;        $indicatorHeight = 90;        $instrumentCode = 'ABBANK';        $this->loadModel('DataBanksEod');        require_once(APP . 'Vendor' . DS . 'chartdir' . DS . 'FinanceChart.php');        //App::import('Vendor', 'recaptchalib');        // App::import('Vendor', 'FinanceChart');        $timeStamps = null;        $volData = null;        $highData = null;        $lowData = null;        $openData = null;        $closeData = null;        $extraPoints = null;        $instrumentId = $this->instrumentList[$instrumentCode];        //$dataBank = $this->Instrument->query('SELECT date,open, high, low, close,volume FROM data_banks_daily WHERE instrument_id=\''.$instrumentId.'\' ORDER BY id DESC');        $datearr = explode('|', $reportrange);        $from = $datearr[0];        $to = $datearr[1];        // pr($datearr);        // exit;        $dataBank = $this->DataBanksEod->find('all', array(            'conditions' => "DataBanksEod.instrument_id=$instrumentId and date BETWEEN '$from' AND '$to'",            'recursive' => -1        ));        //  SELECT *  FROM `data_banks_eods` WHERE `instrument_id` = 12 AND `date` BETWEEN '2010-01-30' AND '2011-09-29'        foreach ($dataBank as $data) {            $timeStamps[] = chartTime2(strtotime($data['DataBanksEod']['date']));            $closeData[] = $data['DataBanksEod']['close'];            $openData[] = $data['DataBanksEod']['open'];            $lowData[] = $data['DataBanksEod']['low'];            $highData[] = $data['DataBanksEod']['high'];            $volData[] = $data['DataBanksEod']['volume'];        }        // pr($timeStamps);        // echo "$Indicators from control ".$instrumentCode;        $m = new FinanceChart($width);        # Set the data into the chart object        $m->setData($timeStamps, $highData, $lowData, $openData, $closeData, $volData,            $extraPoints);        $m->addMainChart($mainHeight);        $m->addCandleStick(0x33ff33, 0xff3333);        $indiArr = explode(",", $Indicators);        foreach ($indiArr as $indi) {            $chart->addIndicator($m, $indi, $indicatorHeight);        }        header("Content-type: image/png");        print($m->makeChart2(PNG));        exit;    }    public function chart_img()    {        $this->layout = 'default-anychart';        $StockBangladesh = $this->Components->load('StockBangladesh');        $this->set('instrumentList', $StockBangladesh->instrumentList(1));    }    public function getchart($chartQuery)    {        $this->layout = 'ajax';        session_cache_limiter("private_no_expire");        if (!session_id()) {            session_start();        }        $paramArr = explode('&', $chartQuery);        $imgArr = explode('=', $paramArr[0]);        $filename = null;        $stype = null;        $image = $_SESSION[$imgArr[1]];        /*if (isset($_GET)){    $image = $_SESSION[$imgArr[1]];    if (isset($_GET["filename"]))        $filename = $_GET["filename"];    if (isset($_GET["stype"]))        $stype = $_GET["stype"];}else{    $image = $HTTP_SESSION_VARS[$HTTP_GET_VARS["img"]];    if (isset($HTTP_GET_VARS["filename"]))        $filename = $HTTP_GET_VARS["filename"];    if (isset($HTTP_GET_VARS["stype"]))        $stype = $HTTP_GET_VARS["stype"];}*/        $contentType = "text/html; charset=utf-8";        if (strlen($image) >= 3) {            $c0 = ord($image[0]);            $c1 = ord($image[1]);            $c2 = ord($image[2]);            if (($c0 == 0x47) && ($c1 == 0x49))                $contentType = "image/gif";            else if (($c1 == 0x50) && ($c2 == 0x4e))                $contentType = "image/png";            else if (($c0 == 0x42) && ($c1 == 0x4d))                $contentType = "image/bmp";            else if (($c0 == 0xff) && ($c1 == 0xd8))                $contentType = "image/jpeg";            else if (($c0 == 0) && ($c1 == 0))                $contentType = "image/vnd.wap.wbmp";            else if ($stype == ".svg")                $contentType = "image/svg+xml";            if (($c0 == 0x1f) && ($c1 == 0x8b))                header("Content-Encoding: gzip");        }        header("Content-type: $contentType");        if ($filename != null)            header("Content-Disposition: inline; filename=$filename");        print $image;    }    public function chart_img_trac($reportrange = "", $instrumentCode = 'DSEX', $comparewith = 'ABBANK', $Indicators = "RSI,MACD", $configure = "VOLBAR", $charttype = "CandleStick", $overlay = "dfgfd", $mov1 = "SMA",$avgPeriod1=20, $mov2 = "SMA",$avgPeriod2=30,$adj=1)    {        require_once(APP . 'Vendor' . DS . 'chartdir' . DS . 'FinanceChart.php');      //  $this->set('js_asset_compression_enable', false);       // $this->layout = 'layout';        $StockBangladesh = $this->Components->load('StockBangladesh');        $this->set('instrumentList', $StockBangladesh->instrumentList(1));        $chart = $this->Components->load('Chart');        $width = 1000;        $mainHeight = 320;        $indicatorHeight = 90;     //   $instrumentCode = 'ABBANK';        $this->loadModel('DataBanksEod');        //App::import('Vendor', 'recaptchalib');        // App::import('Vendor', 'FinanceChart');        $timeStamps = null;        $volData = null;        $highData = null;        $lowData = null;        $openData = null;        $closeData = null;        $extraPoints = null;        $instrumentId = $this->instrumentList[$instrumentCode];        //$dataBank = $this->Instrument->query('SELECT date,open, high, low, close,volume FROM data_banks_daily WHERE instrument_id=\''.$instrumentId.'\' ORDER BY id DESC');        if ($reportrange == '') {            //2010-10-25|2013-04-25            $from = date('Y-m-d', strtotime(' -120 days'));            $to = date('Y-m-d');        }else        {            $datearr = explode('|', $reportrange);            $from = $datearr[0];            $to = $datearr[1];        }        $extraPoints=19;        if ($avgPeriod1 > $extraPoints) {            $extraPoints = $avgPeriod1;        }        if ($avgPeriod2 > $extraPoints) {            $extraPoints = $avgPeriod2;        }        /* $week=ceil($extraPoints/5);         pr($week);         $dayTosubtract=$week*2+$extraPoints;         $fromstamp=strtotime("$from-$dayTosubtract days");         $from=date("Y-m-d",$fromstamp);*/        // pr($from);        // $ohlcData=$chart->getDailyData($instrumentId,$from,$to,$extraPoints);        //pr($ohlcData);        $adj=1;        if ($adj)            $ohlcData = $chart->getAdjustedDailyData($instrumentId, $from, $to, $extraPoints);        else            $ohlcData = $chart->getDailyData($instrumentId, $from, $to, $extraPoints);        // $ohlcData = $chart->getDailyData($instrumentId, $from, $to, $extraPoints);        //pr($ohlcData);        //exit;        $timeStamps = $ohlcData['date'];        $closeData =$ohlcData['close'];        $openData = $ohlcData['open'];        $lowData = $ohlcData['low'];        $highData = $ohlcData['high'];        $volData = $ohlcData['volume'];        // pr($timeStamps);        // echo "$Indicators from control ".$instrumentCode;        $m = new FinanceChart($width);        $m->setLegendStyle("normal", 8, Transparent, Transparent);        # Set the data into the chart object        $m->setData($timeStamps, $highData, $lowData, $openData, $closeData, $volData,            $extraPoints);        $m->addMainChart($mainHeight);        $m->addCandleStick(0x33ff33, 0xff3333);        $m->addVolBars(75, 0x99ff99, 0xff9999, 0x808080);        $indiArr = explode(",", $Indicators);        foreach ($indiArr as $indi) {            $chart->addIndicator($m, $indi, $indicatorHeight);        }        $index=count($ohlcData['realtimeStamps']);        $lastday = $ohlcData['realtimeStamps'][$index-1];        $lastday= date("M d, Y",$lastday);        $open=$openData[$index-1];        $high=$highData[$index-1];        $low=$lowData[$index-1];        $close=$closeData[$index-1];        $volume=$volData[$index-1];        $metaKey=array();        $metaKey[]='name';        $metaKey[]='category';        $metaKey[]='market_lot';        $metaKey[]='no_of_securities';        $metaKey[]='share_percentage_public';        $metaKey[]='year_end';        $fundamentalDataOrganized = $StockBangladesh->getFundamentalInfo($instrumentId,$metaKey);        $publicText=$fundamentalDataOrganized['share_percentage_public']['meta_value'].'%';        $topText=$fundamentalDataOrganized['name']['meta_value'];        $topText .= '<*font=arial.ttf,size=9*> CAT:- '.$fundamentalDataOrganized['category']['meta_value'].',';        $topText .= '<*font=arial.ttf,size=9*> LOT:- '.$fundamentalDataOrganized['market_lot']['meta_value'].',';        $topText .= '<*font=arial.ttf,size=9*> YearEnd:- '.$fundamentalDataOrganized['year_end']['meta_value'].',';        $share_percentage_public=($fundamentalDataOrganized['no_of_securities']['meta_value']*$fundamentalDataOrganized['share_percentage_public']['meta_value'])/100;        //   pr($fundamentalDataOrganized);        //    exit;        $m->addPlotAreaTitle(BottomLeft, sprintf(            "<*font=arial.ttf,size=8*>%s - Open: %s High: %s Low: %s Close: %s Volume: %s   NOS: %s Public( %s ): %s", $lastday, $open,$high,$low,$close,$volume,$fundamentalDataOrganized['no_of_securities']['meta_value'],$publicText,$share_percentage_public));        # A copyright message at the bottom left corner the title area        $m->addPlotAreaTitle(BottomRight,            "<*font=arial.ttf,size=8*>(c) StockBangladesh Ltd.");        $textBoxObj = $m->addText(650, 270, "www.stockbangladesh.com", 'arial.ttf', 20, 0xc09090, '', 0);        $textBoxObj->setAlignment(TopRight);        $m->addPlotAreaTitle(TopLeft, $topText);        App::uses('String', 'Utility');        $chartId = md5(String::uuid());# Create the WebChartViewer object        //$viewer = new WebChartViewer("chart");        $viewer = new WebChartViewer("chart$chartId");# Output the chart        $chartQuery = $m->makeSession($viewer->getId());# Set the chart URL to the viewer        $viewer->setImageUrl("getchart/" . $chartQuery);# Output Javascript chart model to the browser to support tracking cursor        //$viewer->setChartModel($m->getJsChartModel());  // SHOULD BE DISABLE IN LIVE AS IT IS NOT WORKING COMPRESSION        $this->set('viewer', $viewer);    }    public function chart_img_trac2($reportrange = "2010-10-25|2013-04-25", $instrumentCode = 'ABBANK', $comparewith = 'ABBANK', $Indicators = "RSI,MACD", $configure = "VOLBAR", $charttype = "CandleStick", $overlay = "dfgfd", $mov1 = "SMA",$avgPeriod1=20, $mov2 = "SMA",$avgPeriod2=30,$adj=1)    {        //Configure::write('debug', 2);        $this->layout = 'ajax_chart';       // $this->request->allowMethod('ajax');        $chart = $this->Components->load('Chart');        $width = 1000;        $mainHeight = 320;        $indicatorHeight = 90;        //$instrumentCode = 'ABBANK';       // $this->loadModel('DataBanksEod');        require_once(APP . 'Vendor' . DS . 'chartdir' . DS . 'FinanceChart.php');        //App::import('Vendor', 'recaptchalib');        // App::import('Vendor', 'FinanceChart');        $timeStamps = null;        $volData = null;        $highData = null;        $lowData = null;        $openData = null;        $closeData = null;        $extraPoints = null;        $instrumentId = $this->instrumentList[$instrumentCode];        $StockBangladesh = $this->Components->load('StockBangladesh');        $this->set('instrumentInfo', $StockBangladesh->instrumentInfo($instrumentId));//pr($StockBangladesh->instrumentInfo($instrumentId));        //$dataBank = $this->Instrument->query('SELECT date,open, high, low, close,volume FROM data_banks_daily WHERE instrument_id=\''.$instrumentId.'\' ORDER BY id DESC');        $datearr = explode('|', $reportrange);        $from = $datearr[0];        $to = $datearr[1];        $extraPoints=19;        if ($avgPeriod1 > $extraPoints) {            $extraPoints = $avgPeriod1;        }        if ($avgPeriod2 > $extraPoints) {            $extraPoints = $avgPeriod2;        }       /* $week=ceil($extraPoints/5);        pr($week);        $dayTosubtract=$week*2+$extraPoints;        $fromstamp=strtotime("$from-$dayTosubtract days");        $from=date("Y-m-d",$fromstamp);*/       // pr($from);       // $ohlcData=$chart->getDailyData($instrumentId,$from,$to,$extraPoints);        //pr($ohlcData);        if ($adj)            $ohlcData = $chart->getAdjustedDailyData($instrumentId, $from, $to, $extraPoints);        else            $ohlcData = $chart->getDailyData($instrumentId, $from, $to, $extraPoints);       // $ohlcData = $chart->getDailyData($instrumentId, $from, $to, $extraPoints);        //pr($ohlcData);        //exit;        $timeStamps = $ohlcData['date'];        $closeData =$ohlcData['close'];        $openData = $ohlcData['open'];        $lowData = $ohlcData['low'];        $highData = $ohlcData['high'];        $volData = $ohlcData['volume'];        $this->set('ohlcData', $ohlcData);        $this->set('totalData', count($ohlcData['date']));        // echo "$Indicators from control ".$instrumentCode;        $m = new FinanceChart($width);        $m->setLegendStyle("normal", 8, Transparent, Transparent);        # Set the data into the chart object        $m->setData($timeStamps, $highData, $lowData, $openData, $closeData, $volData,            $extraPoints);        $m->addMainChart($mainHeight);        $indiArr = explode(",", $Indicators);        foreach ($indiArr as $indi) {            $chart->addIndicator($m, $indi, $indicatorHeight);        }        $mainType = $charttype;        if ($mainType == "Close") {            $m->addCloseLine(0x000040);        } else if ($mainType == "TP") {            $m->addTypicalPrice(0x000040);        } else if ($mainType == "WC") {            $m->addWeightedClose(0x000040);        } else if ($mainType == "Median") {            $m->addMedianPrice(0x000040);        }        if ($mainType == "CandleStick") {            $m->addCandleStick(0x33ff33, 0xff3333);        } else if ($mainType == "OHLC") {            $m->addHLOC(0x008800, 0xcc0000);        }        $confArr = explode(",", $configure);        foreach ($confArr as $conf) {            if ($conf == "PSAR") {                $m->addParabolicSAR(0.02, 0.02, 0.2, DiamondShape, 5, 0x008800, 0x000000);            }            if ($conf == "VOLBAR") {                $m->addVolBars(75, 0x99ff99, 0xff9999, 0x808080);            }            if ($conf == "LOG") {                $m->setLogScale(true);            }            if ($conf == "PSCALE") {                $m->setPercentageAxis();            }        }        $bandType = $overlay;        if ($bandType == "BB") {            $m->addBollingerBand(20, 2, 0x9999ff, 0xc06666ff);        } else if ($bandType == "DC") {            $m->addDonchianChannel(20, 0x9999ff, 0xc06666ff);        } else if ($bandType == "Envelop") {            $m->addEnvelop(20, 0.1, 0x9999ff, 0xc06666ff);        }        $chart->addMovingAvg($m, $mov1, $avgPeriod1, 0x663300);        $chart->addMovingAvg($m, $mov2, $avgPeriod2, 0x9900ff);        $index=count($ohlcData['realtimeStamps']);        $lastday = $ohlcData['realtimeStamps'][$index-1];        $lastday= date("M d, Y",$lastday);        $open=$openData[$index-1];        $high=$highData[$index-1];        $low=$lowData[$index-1];        $close=$closeData[$index-1];        $volume=$volData[$index-1];        $metaKey=array();        $metaKey[]='name';        $metaKey[]='category';        $metaKey[]='market_lot';        $metaKey[]='no_of_securities';        $metaKey[]='share_percentage_public';        $metaKey[]='year_end';        $fundamentalDataOrganized = $StockBangladesh->getFundamentalInfo($instrumentId,$metaKey);        $publicText=$fundamentalDataOrganized['share_percentage_public']['meta_value'].'%';        $topText=$fundamentalDataOrganized['name']['meta_value'];        $topText .= '<*font=arial.ttf,size=9*> CAT:- '.$fundamentalDataOrganized['category']['meta_value'].',';        $topText .= '<*font=arial.ttf,size=9*> LOT:- '.$fundamentalDataOrganized['market_lot']['meta_value'].',';        $topText .= '<*font=arial.ttf,size=9*> YearEnd:- '.$fundamentalDataOrganized['year_end']['meta_value'].',';        $share_percentage_public=($fundamentalDataOrganized['no_of_securities']['meta_value']*$fundamentalDataOrganized['share_percentage_public']['meta_value'])/100;     //   pr($fundamentalDataOrganized);    //    exit;        $m->addPlotAreaTitle(BottomLeft, sprintf(            "<*font=arial.ttf,size=8*>%s - Open: %s High: %s Low: %s Close: %s Volume: %s   NOS: %s Public( %s ): %s", $lastday, $open,$high,$low,$close,$volume,$fundamentalDataOrganized['no_of_securities']['meta_value'],$publicText,$share_percentage_public));/*  $m->addPlotAreaTitle(BottomLeft, sprintf(            "<*font=arial.ttf,size=8*>%s - Open: %s High: %s Low: %s Close: %s Volume: %s   NOS: %s Public( %s %): %s", $lastday, $open,$high,$low,$close,$volume,$fundamentalDataOrganized['no_of_securities']['meta_value'],$fundamentalDataOrganized['share_percentage_public']['meta_value'],$share_percentage_public));*/        # A copyright message at the bottom left corner the title area        $m->addPlotAreaTitle(BottomRight,            "<*font=arial.ttf,size=8*>(c) StockBangladesh Ltd.");        $textBoxObj = $m->addText(650, 270, "www.stockbangladesh.com", 'arial.ttf', 20, 0xc09090, '', 0);        $textBoxObj->setAlignment(TopRight);        $m->addPlotAreaTitle(TopLeft, $topText);        /*$compArr = explode(",", $comparewith);        foreach ($compArr as $comp) {            $compareData=$chart->getDailyData($this->instrumentList[$comp],$from,$to,$extraPoints);            $m->addComparison($compareData['close'], 0x0000ff, $comp);        }*/        App::uses('String', 'Utility');        $chartId = md5(String::uuid());# Create the WebChartViewer object        //$viewer = new WebChartViewer("chart");        $viewer = new WebChartViewer("chart$chartId");# Output the chart        $chartQuery = $m->makeSession($viewer->getId());# Set the chart URL to the viewer        $viewer->setImageUrl("getchart/" . $chartQuery);# Output Javascript chart model to the browser to support tracking cursor      //  $viewer->setChartModel($m->getJsChartModel());  // SHOULD BE DISABLE IN LIVE AS IT IS NOT WORKING COMPRESSION        $this->set('viewer', $viewer);    }    public function chart2()    {        // echo "here";        // exit;        //Configure::write('debug', 3);        $this->layout = 'default_m2';    }    public function company_details($instrumentCode='ABBANK')    {        $this->layout = 'ajax';        $instrumentId = $this->instrumentList[$instrumentCode];$this->set('instrumentId',$instrumentId);        // echo "here";        // exit;        //Configure::write('debug', 3);      /*  $this->layout = 'ajax';        echo "This is company details jjj";        exit;*/    }    public function market_depth($instrumentCode='ABBANK')    {        $this->layout = 'ajax';        $instrumentId = $this->instrumentList[$instrumentCode];$this->set('instrumentId',$instrumentId);    }    public function advance_chart()    {       // Configure::write('debug', 2);        $this->set('js_asset_compression_enable', false);        $StockBangladesh = $this->Components->load('StockBangladesh');        $this->set('instrumentList', $StockBangladesh->instrumentList(1));    }    /*     * Trading view needed function     *     *     * */    function getTradingviewChartConfig()    {        echo "{\"exchanges\":[{\"value\":\"DSE\",\"name\":\"DSE\",\"desc\":\"DSE\"}],\"supports_group_request\":false,\"supports_search\":true,\"supportedResolutions\":[\"D\",\"W\",\"M\"],\"symbolsTypes\":[{\"name\":\"Stock\",\"value\":\"stock\"}]}";        exit;    }    function config()    {        echo "{\"exchanges\":[{\"value\":\"DSE\",\"name\":\"DSE\",\"desc\":\"DSE\"}],\"supports_group_request\":false,\"supports_search\":true,\"supportedResolutions\":[\"D\",\"W\",\"M\"],\"symbolsTypes\":[{\"name\":\"Stock\",\"value\":\"stock\"}]}";        exit;    }    function search()    {        $query=$this->params['url']['query'];        $exchange=$this->params['url']['exchange'];        $limit=$this->params['url']['limit'];        $type=$this->params['url']['type'];      //   Configure::write('debug',3);        $symbol_arr=array();        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentInfo = $StockBangladesh->instrumentInfo();        $sectorsymbol=Hash::extract($instrumentInfo, "{n}.Instrument[instrument_code=/.*$query.*/]");        foreach ($sectorsymbol as $s)        {            //  $sector_symbol_list[$s['symbols']['id']]=$s['symbols']['dse_code'];            $temp=array();            $temp['symbol']=$s['instrument_code'];            $temp['full_name']=$s['instrument_code'];            $temp['description']=$s['name'];            // $temp['exchange']='DSE';            $temp['type']='stock';            $symbol_arr[]=$temp;        }        echo json_encode($symbol_arr);        exit;    }    function symbols()    {        /*         * "name": <symbol name>,        "exchange-traded": <exchange name>,        "exchange-listed": <exchange name>,        "timezone": <timezone name>,        "pricescale": <see the description below>,        "minmov":  <see the description below>,        "minmove2":  <used for formatting purposes>,        "has_intraday":  <showing whether symbol has intraday history data>,    "intraday_multipliers":  <Optional. see below>,        "has_weekly_and_monthly":  <Optional. see below>,        "has_no_volume": <boolean showing whether symbol has volume data or not>,        "ticker": <symbol ticker name>,        "description": <symbol description>,        "session": <trading hours. see the description above>        "regular_session": <Optional. regular trading hours.>        "data_status": <see below>        "type": "stock" | "futiljsures" | "bitcoin" | "forex" | "index"         * */        $query=$this->params['url']['symbol'];        $temp=array();        $temp['name']=$query;        $temp['exchange-traded']='DSE';        $temp['exchange-listed']='DSE';        $temp['timezone']='UTC';        $temp['pricescale']=10;        $temp['minmov']=1;        $temp['minmove2']=2;        $temp['has_intraday']='false';        //$temp['intraday_multipliers']='false';        // $temp['has_weekly_and_monthly']='false';        $temp['has_no_volume']='false';        $temp['ticker']=$query;        $temp['description']="$query (Adjusted by stockbangladesh.com)";        $temp['session']='24x7';        //  $temp['regular_session']='';        //  $temp['data_status']='';        $temp['type']='stock';        echo json_encode($temp);        /* echo "{\"name\":\"DESCO\",\"exchange_traded\":\"DSE\",\"exchange_listed\":\"DSE\",\"timezone\":\"UTC\",         \"minmov\":\"1\",\"minmov2\":\"2\",\"pricescale\":\"10\",\"pointvalue\":\"1\",        \"has_intraday\":false,\"has_no_volume\":false,\"ticker\":\"DESCO\",        \"description\":\"Dhaka Electric Supply Company Limited\",\"type\":\"stock\"}";*/        exit;    }    function history()    {      //   Configure::write('debug',3);        $symbol=$this->params['url']['symbol'];        $symbol_exg=explode(":",$symbol);        if(count($symbol_exg)>1)        {            $symbol=$symbol_exg[1];        }        // $resolution=$this->params['url']['resolution'];     //   $from=$this->params['url']['from']+12*60*60;     //   $to=$this->params['url']['to']+12*60*60;        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $chart = $this->Components->load('Chart');        $instrumentId=$instrumentList[trim($symbol)];        $adj=1;        $from='1999-10-20';        $to = date('Y-m-d');        if ($adj)            $ohlcData = $chart->getAdjustedDailyData($instrumentId, $from, $to);        else            $ohlcData = $chart->getDailyData($instrumentId, $from, $to);        $data_arr=array();        $add12Hours = function($a) { return $a+12*60*60; }; // as tradeview time zone lags        $data_arr['t']=$ohlcData['realtimeStamps'];        $data_arr['t'] = array_map($add12Hours, $data_arr['t']);        $data_arr['c']=$ohlcData['close'];        $data_arr['o']=$ohlcData['open'];        $data_arr['h']=$ohlcData['high'];        $data_arr['l']=$ohlcData['low'];        $data_arr['v']=$ohlcData['volume'];        $data_arr['s']='ok';  //pr($ohlcData);//          exit;        echo json_encode($data_arr);        // echo "{'t':[1262476800,1262563200,1262649600,1262736000,1262822400,1263081600,1263168000,1263254400,1263340800,1263427200,1263686400,1263772800,1263859200,1263945600,1264032000,1264291200,1264377600,1264464000,1264550400,1264636800,1264896000,1264982400,1265068800,1265155200,1265241600,1265500800,1265587200,1265673600,1265760000,1265846400,1266105600,1266192000,1266278400,1266364800,1266451200,1266796800,1266883200,1266969600,1267056000,1267315200,1267401600,1267488000,1267574400,1267660800,1267920000,1268006400,1268092800,1268179200,1268265600,1268524800,1268611200,1268697600,1268870400,1269129600,1269216000,1269302400,1269388800,1269475200,1269734400,1269820800,1269907200,1269993600,1270080000,1270339200,1270425600,1270512000,1270598400,1270684800,1270944000,1271030400,1271116800,1271289600,1271548800,1271635200,1271721600,1271808000,1271894400,1272153600,1272240000,1272326400,1272412800,1272499200,1272758400,1272844800,1272931200,1273017600,1273104000,1273363200,1273449600,1273536000,1273622400,1273708800,1273968000,1274054400,1274140800,1274227200,1274313600,1274572800,1274659200,1274745600,1274832000,1275177600,1275264000,1275350400,1275436800,1275523200,1275782400,1275868800,1275955200,1276041600,1276128000,1276387200,1276473600,1276560000,1276646400,1276732800,1276992000,1277078400,1277164800,1277251200,1277337600,1277596800,1277683200,1277769600,1277856000,1278201600,1278288000,1278374400,1278460800,1278547200,1278806400,1278892800,1278979200,1279065600,1279152000,1279411200,1279497600,1279584000,1279670400,1279756800,1280016000,1280102400,1280188800,1280361600,1280620800,1280707200,1280793600,1280880000,1280966400,1281225600,1281312000,1281398400,1281484800,1281571200,1281916800,1282003200,1282089600,1282176000,1282435200,1282521600,1282608000,1282694400,1282780800,1283040000,1283126400,1283212800,1283385600,1283644800,1283731200,1283904000,1284336000,1284422400,1284508800,1284595200,1284854400,1284940800,1285027200,1285113600,1285200000,1285459200,1285545600,1285632000,1285718400,1285804800,1286064000,1286150400,1286236800,1286323200,1286409600,1286668800,1286755200,1286841600,1286928000,1287014400,1287360000,1287446400,1287532800,1287619200,1287878400,1287964800,1288051200,1288137600,1288224000,1288483200,1288569600,1288656000,1288742400,1288828800,1289088000,1289174400,1289260800,1289347200,1289692800,1289779200,1290297600,1290384000,1290470400,1290556800,1290643200,1290902400,1290988800,1291075200,1291161600,1291248000,1291507200,1291593600,1291680000,1291766400,1291852800,1292112000,1292198400,1292284800,1292371200,1292716800,1292803200,1292889600,1292976000,1293062400,1293321600,1293408000,1293494400,1293580800,1293667200,1293926400,1294012800,1294099200,1294185600,1294272000,1294531200,1294617600,1294704000,1294790400,1294876800,1295136000,1295222400,1295308800,1295395200,1295481600,1295913600,1296000000,1296086400,1296345600,1296432000,1296518400,1296604800,1296691200,1296950400,1297036800,1297123200,1297209600,1297555200,1297641600,1297728000,1298160000,1298332800,1298419200,1298505600,1298764800,1298851200,1298937600,1299024000,1299110400,1299369600,1299456000,1299542400,1299628800,1299715200,1299974400,1300060800,1300147200,1300233600,1300579200,1300665600,1300752000,1300838400,1300924800,1301184000,1301270400,1301356800,1301443200,1301529600,1301788800,1301875200,1301961600,1302048000,1302134400,1302393600,1302480000,1302566400,1302652800,1302998400,1303084800,1303171200,1303257600,1303344000,1303603200,1303689600,1303776000,1303862400,1303948800,1304294400,1304380800,1304467200,1304553600,1304812800,1304899200,1304985600,1305072000,1305158400,1305417600,1305504000,1305676800,1305763200,1306022400,1306108800,1306195200,1306281600,1306368000,1306627200,1306713600,1306800000,1306886400,1306972800,1307232000,1307318400,1307404800,1307491200,1307577600,1307836800,1307923200,1308009600,1308096000,1308182400,1308441600,1308528000,1308614400,1308700800,1308787200,1309046400,1309132800,1309219200,1309305600,1309392000,1309651200,1309737600,1309824000,1309910400,1309996800,1310256000,1310342400,1310428800,1310515200,1310601600,1310860800,1311033600,1311120000,1311206400,1311465600,1311552000,1311638400,1311724800,1311811200,1312070400,1312156800,1312243200,1312329600,1312416000,1312675200,1312761600,1312848000,1312934400,1313020800,1313280000,1313452800,1313539200,1313625600,1313884800,1314057600,1314144000,1314230400,1315094400,1315180800,1315267200,1315353600,1315440000,1315699200,1315785600,1315872000,1315958400,1316044800,1316304000,1316390400,1316476800,1316563200,1316649600,1316908800,1316995200,1317081600,1317168000,1317254400,1317513600,1317600000,1317772800,1318118400,1318204800,1318291200,1318377600,1318464000,1318723200,1318809600,1318896000,1318982400,1319068800,1319328000,1319414400,1319500800,1319587200,1319673600,1319932800,1320019200,1320105600,1320192000,1320278400,1321142400,1321228800,1321401600,1321488000,1321747200,1321833600,1321920000,1322006400,1322092800,1322352000,1322438400,1322524800,1322611200,1322956800,1323043200,1323216000,1323302400,1323561600,1323648000,1323734400,1323820800,1323907200,1324166400,1324252800,1324339200,1324425600,1324512000,1324857600,1324944000,1325030400,1325116800,1325376000,1325462400,1325548800,1325635200,1325721600,1325980800,1326067200,1326153600,1326240000,1326326400,1326585600,1326672000,1326844800,1326931200,1327190400,1327276800,1327363200,1327449600,1327536000,1327795200,1327881600,1327968000,1328054400,1328140800,1328486400,1328572800,1328659200,1328745600,1329004800,1329091200,1329177600,1329264000,1329350400,1329609600,1329696000,1329868800,1329955200,1330214400,1330300800,1330387200,1330473600,1330560000,1330819200,1330905600,1330992000,1331078400,1331164800,1331424000,1331510400,1331596800,1331683200,1331769600,1332028800,1332115200,1332201600,1332288000,1332374400,1332633600,1332806400,1332892800,1332979200,1333238400,1333324800,1333411200,1333497600,1333584000,1333843200,1333929600,1334016000,1334102400,1334188800,1334448000,1334534400,1334620800,1334707200,1334793600,1335052800,1335139200,1335225600,1335312000,1335398400,1335657600,1335744000,1335916800,1336003200,1336348800,1336435200,1336521600,1336608000,1336867200,1336953600,1337040000,1337126400,1337212800,1337472000,1337558400,1337644800,1337731200,1337817600,1338076800,1338163200,1338249600,1338336000,1338422400,1338681600,1338768000,1338854400,1338940800,1339027200,1339286400,1339372800,1339459200,1339545600,1339632000,1339891200,1339977600,1340064000,1340150400,1340236800,1340496000,1340582400,1340668800,1340755200,1340841600,1341187200,1341273600,1341360000,1341446400,1341705600,1341792000,1341878400,1341964800,1342051200,1342310400,1342396800,1342483200,1342569600,1342656000,1342915200,1343001600,1343088000,1343174400,1343260800,1343520000,1343606400,1343779200,1343865600,1344124800,1344211200,1344297600,1344384000,1344729600,1344816000,1344902400,1345939200,1346025600,1346112000,1346198400,1346284800,1346544000,1346630400,1346716800,1346803200,1346889600,1347148800,1347235200,1347321600,1347408000,1347494400,1347753600,1347840000,1347926400,1348012800,1348099200,1348358400,1348444800,1348531200,1348617600,1348704000,1348963200,1349049600,1349136000,1349222400,1349308800,1349568000,1349654400,1349740800,1349827200,1349913600,1350172800,1350259200,1350345600,1350432000,1350518400,1350777600,1350864000,1350950400,1351555200,1351641600,1351728000,1351987200,1352073600,1352160000,1352332800,1352592000,1352678400,1352764800,1352851200,1352937600,1353196800,1353283200,1353369600,1353456000,1353542400,1353888000,1353974400,1354060800,1354147200,1354406400,1354492800,1354579200,1354665600,1354752000,1355011200,1355097600,1355184000,1355270400,1355356800,1355702400,1355788800,1355875200,1355961600,1356220800,1356307200,1356480000,1356566400,1356825600,1356998400,1357084800,1357171200,1357430400,1357516800,1357603200,1357689600,1357776000,1358035200,1358121600,1358208000,1358294400,1358380800,1358640000,1358726400,1358812800,1358899200,1358985600,1359244800,1359331200,1359417600,1359504000,1359590400,1359849600,1359936000,1360022400,1360108800,1360195200,1360454400,1360540800,1360627200,1360713600,1360800000,1361059200,1361145600,1361232000,1361318400,1361664000,1361750400,1361836800,1361923200,1362009600,1362268800,1362355200,1362441600,1362528000,1362614400,1362873600,1362960000,1363046400,1363132800,1363219200,1363564800,1363651200,1363737600,1364083200,1364169600,1364342400,1364428800,1364688000,1364774400,1364860800,1364947200,1365033600,1365292800,1365379200,1365465600,1365552000,1365638400,1365984000,1366070400,1366156800,1366243200,1366502400,1366588800,1366675200,1366761600,1366848000,1367107200,1367193600,1367280000,1367452800,1367712000,1367798400,1367884800,1367971200,1368057600,1368316800,1368403200,1368489600,1368576000,1368662400,1368921600,1369008000,1369094400,1369180800,1369526400,1369612800,1369699200,1369785600,1369872000,1370131200,1370217600,1370304000,1370390400,1370476800,1370736000,1370822400,1370908800,1370995200,1371081600,1371340800,1371427200,1371513600,1371600000,1371686400,1371945600,1372032000,1372118400,1372204800,1372291200,1372550400,1372723200,1372809600,1372896000,1373155200,1373241600,1373328000,1373414400,1373500800,1373760000,1373846400,1373932800,1374019200,1374105600,1374364800,1374451200,1374537600,1374624000,1374710400,1374969600,1375056000,1375142400,1375228800,1375315200,1375574400,1375660800,1376265600,1376352000,1376438400,1376784000,1376870400,1376956800,1377043200,1377043200,1377129600,1377129600,1377388800,1377475200,1377561600,1377734400,1377993600,1378080000,1378166400,1378252800,1378339200,1378598400,1378684800,1378771200,1378857600,1378944000,1379203200,1379289600,1379376000,1379462400,1379548800,1379808000,1379894400,1379980800,1380067200,1380153600,1380412800,1380499200,1380585600,1380672000,1380758400,1381017600,1381104000,1381190400,1381276800,1381363200,1382227200,1382313600,1382400000,1382486400,1382572800,1382832000,1382918400,1383004800,1383091200,1383177600,1383436800,1383523200,1383696000,1383782400,1384041600,1384128000,1384214400,1384300800,1384387200,1384646400,1384732800,1384819200,1384905600,1384992000,1385251200,1385337600,1385424000,1385510400,1385596800,1385856000,1385942400,1386028800,1386115200,1386201600,1386460800,1386547200,1386633600,1386720000,1386806400,1387065600,1387238400,1387324800,1387411200,1387670400,1387756800,1387843200,1388016000,1388275200,1388361600,1388534400,1388620800,1388966400,1389052800,1389139200,1389225600,1389484800,1389571200,1389744000,1389830400,1390089600,1390176000,1390262400,1390348800,1390435200,1390694400,1390780800,1390867200,1390953600,1391040000,1391299200,1391385600,1391385600,1391472000,1391558400,1391644800,1391904000,1391990400,1392076800,1392163200,1392249600,1392508800,1392595200,1392681600,1392768000,1392854400,1392854400,1393113600,1393200000,1393286400,1393372800,1393459200,1393718400,1393804800,1393891200,1393977600,1394064000,1394323200,1394409600,1394496000,1394582400,1394668800,1394928000,1395100800,1395187200,1395273600,1395532800,1395619200,1395705600,1395878400,1396137600,1396224000,1396310400,1396396800,1396742400,1396828800,1396915200,1397001600,1397088000,1397347200,1397520000,1397606400,1397692800,1397952000,1398038400,1398124800,1398211200,1398297600,1398556800,1398643200,1398729600,1398816000,1399161600,1399248000,1399334400,1399420800,1399507200,1399766400,1399852800,1400025600,1400112000,1400371200,1400457600,1400544000,1400630400,1400716800,1400976000,1401062400,1401200880,1401287340,1401373680,1401632880,1401719280,1401805560,1401892080,1401978360,1402237560,1402321680],'c':[62.16,62.27,63.5,62.82,62.7,65.15,64.03,63.17,61.85,62.12,62.61,62.3,61.8,62.69,62.46,61.97,62.08,63.57,65.06,66.71,65.28,64.58,65.36,64.56,64.13,63.83,63.23,62.7,62.8,64.36,65.35,64.37,63.98,63.55,63.72,64.52,64.2,63.7,62.91,63.48,63.72,63.93,65.06,64.92,65.52,65.46,65.73,66.66,66.74,66.29,66.31,68.59,70.24,71.26,71.3,69.41,70.97,70.33,68.9,68.23,68.77,68.72,69.72,69.79,68.92,68.78,69.37,69.11,68.53,69.2,71.02,70.71,70.97,70.24,71.22,73.75,73.71,75.07,75.3,75.25,74.5,73.71,74.37,74.02,77.58,76.48,78.61,79.85,78.81,79.98,81.02,79.01,80.81,79.63,78.3,79.34,79.34,79.16,78.11,77.23,77.27,80.19,80.99,82.52,83.72,87.13,88.69,85.66,87.43,90.1,94.15,94.2,96.32,94.98,92.68,91.85,89.11,86.8,88.54,88.14,87.37,87.59,86.48,89.81,91.79,93.18,94.77,93.83,94.71,95.61,92.97,93.81,96.16,96.56,97.81,102.34,101.23,100.15,100.19,98.68,94.97,95.52,97.18,98.91,101.32,102.35,101.47,100.99,101.76,103.61,104.65,105.48,104.77,104.94,103.86,103.42,104.87,103.72,104.73,104.1,103.36,102.26,102.16,101.65,101.28,101.23,104.21,109.77,107.7,108.03,107.73,109.17,108.3,107.53,107.32,107.04,107.14,106.23,105.81,107.83,113.71,117.03,119.8,122.02,126.45,125.47,125.03,126.22,124.75,120.63,123.67,126.51,124.71,123.77,123.37,125.46,124.44,131.12,132.36,132.59,136.88,138.39,135.95,137.58,128.93,124.77,124.36,120.71,110.54,113.88,116.63,117.23,121.52,117.57,121.68,119.5,117.31,123.32,121.83,117.47,114.85,113.91,113.17,109.52,109.54,116.03,115.51,113.2,112.35,110.95,111.07,110.84,111.5,106.17,107.66,113.5,113.25,113.51,108.37,109.81,108.37,107.32,105.86,106.3,105.23,101.83,102.77,99.81,94.35,87.2,97.72,103.78,104.3,101.23,101.09,99.84,96.3,87.96,93.21,98.43,103.63,108.77,108.7,106.65,105.99,101.6,96.37,91.37,96.6,91.92,83.87,78.63,83.31,88.55,84.71,81.34,78.35,74.59,70.25,74.69,70.57,71.01,71.66,75.78,80.47,83.43,86.97,81.7,83.23,79.83,80.02,85.08,90.33,92.3,90.75,88.63,88.65,93.69,94.23,96.23,97.75,97.8,98.68,97.02,97.12,100.04,105.3,101.75,106.04,105.35,104.25,105.23,105.0,103.88,104.91,102.46,100.9,99.22,103.35,98.49,94.49,91.7,89.81,87.9,82.74,82.77,80.27,80.69,83.35,87.17,86.27,84.52,84.19,81.12,77.89,79.03,76.86,79.1,80.48,82.66,85.5,84.57,85.52,83.58,83.48,84.57,84.07,85.41,81.29,82.03,81.43,80.34,80.22,79.99,80.37,80.61,81.07,82.4,82.09,83.53,85.1,86.16,88.77,88.03,87.37,86.63,86.41,88.53,91.78,94.38,93.79,93.67,92.21,89.62,89.57,92.21,91.23,90.5,90.85,90.03,88.04,90.13,88.58,87.28,86.09,86.7,84.52,82.96,85.64,83.5,82.5,82.58,81.73,80.83,80.18,81.73,80.98,80.99,83.51,83.81,84.24,84.58,82.74,82.69,83.12,82.85,82.6,82.97,82.73,82.7,81.35,82.0,81.93,79.65,79.52,80.4,83.4,81.82,80.81,81.57,80.95,79.32,79.57,78.12,78.06,75.84,78.58,80.59,78.92,79.27,78.31,76.09,79.04,80.97,78.23,77.8,73.26,68.63,68.29,69.04,71.21,72.42,74.49,71.21,71.54,75.45,76.5,76.28,74.12,78.8,75.72,77.37,73.5,75.52,74.64,75.17,74.55,71.2,69.29,67.84,67.18,66.59,71.91,69.95,70.86,71.46,72.57,74.49,74.49,76.39,73.1,74.03,73.3,73.63,74.94,74.94,74.42,79.22,76.85,75.15,72.97,70.8,71.2,67.25,67.58,65.41,62.78,65.61,60.94,58.57,55.03,56.4,52.39,47.07,45.81,42.27,40.16,40.56,38.71,42.59,40.89,43.32,46.41,47.0,45.69,46.34,46.41,47.0,46.21,46.61,48.31,52.13,51.27,54.17,53.44,50.68,50.88,47.07,46.47,45.29,46.21,46.67,47.59,50.1,50.16,52.13,52.32,54.63,54.76,52.71,54.5,57.45,59.23,61.79,63.5,69.88,69.49,73.23,73.57,79.48,79.48,82.04,80.59,78.17,80.13,78.43,78.23,77.77,76.91,73.7,69.55,76.0,73.76,70.86,67.78,63.24,65.93,66.85,64.82,64.42,62.25,58.5,63.37,62.19,62.78,61.59,60.88,60.42,61.07,61.53,59.96,59.17,59.3,58.7,57.78,56.4,56.79,57.45,59.89,56.93,58.1,61.86,61.66,59.89,58.83,58.63,58.3,57.58,55.42,54.03,53.7,51.47,51.73,52.19,52.39,56.01,57.52,58.83,55.81,55.35,54.5,54.63,54.69,52.52,50.42,53.37,53.97,50.42,51.34,52.0,54.17,53.24,52.52,55.22,56.34,54.03,55.35,53.9,52.91,52.19,52.13,52.06,52.39,52.85,54.89,55.03,53.9,55.09,58.37,56.07,55.49,57.58,58.83,61.07,64.3,63.9,60.61,59.62,62.64,60.42,60.88,61.07,60.22,60.08,58.9,60.48,59.56,57.85,62.32,60.35,60.54,59.62,58.63,57.12,57.12,58.7,58.9,58.9,56.93,56.27,57.45,56.2,55.55,56.47,55.42,54.83,53.97,54.57,53.83,57.45,56.47,56.93,57.25,58.04,56.54,56.14,55.42,54.65,51.63,51.4,53.52,53.59,55.78,56.54,54.5,53.75,55.26,54.35,52.16,51.7,50.72,53.75,52.46,50.95,51.25,50.8,50.11,49.51,49.36,49.66,49.66,49.36,50.72,49.81,51.7,50.64,50.64,49.74,50.27,51.55,53.52,52.01,50.27,50.72,50.8,50.27,49.97,50.11,49.97,49.66,49.13,49.06,49.13,50.87,50.72,49.74,50.11,51.1,51.03,51.48,51.55,53.9,54.8,53.82,55.1,55.94,57.9,57.45,58.28,58.74,58.21,59.42,60.17,61.23,60.55,60.55,59.19,58.05,56.92,55.49,56.54,54.12,53.67,50.95,52.69,51.1,51.1,51.48,50.8,50.42,51.1,52.77,52.91,52.83,54.28,53.67,51.48,50.34,49.13,50.04,49.74,49.36,49.97,51.03,51.25,51.25,50.57,52.01,51.63,51.1,52.01,50.34,50.5,52.08,51.63,51.48,51.32,51.32,51.25,51.03,50.95,50.72,51.32,51.03,51.1,51.63,51.25,52.01,53.37,53.44,55.78,53.44,55.26,56.84,55.86,54.5,53.75,52.99,53.97,54.2,54.73,54.88,56.09,57.52,58.28,58.21,57.45,55.1,57.45,57.76,57.3,57.23,58.21,58.97,63.72,69.02,67.43,66.45,67.36,68.19,68.19,65.23,66.83,70.45,70.0,68.57,67.73,67.05,70.38,68.26,66.83,65.77,67.13,66.97,70.68,67.2,63.57,63.12,60.32,63.04,60.1,58.28,60.48,59.42,59.03,58.74,57.9,58.97,59.19,60.02,59.57,62.44,62.37,61.69,61.08,61.08,61.76,61.76,60.7,60.48,61.0,60.24,59.79,59.5,59.72,59.87,59.34,58.36,58.13,57.45,56.92,56.47,59.5,59.64,59.26,59.19,57.98,57.0,56.77,57.15,57.23,56.47,55.78,54.5,54.57,54.5,54.65,61.43,60.48,59.7,60.48,60.57,60.39,60.13,60.22,58.83,58.91,60.3,60.48,60.3,59.87,60.13,62.39,62.48,64.6,64.0,62.6,64.6,58.9,59.7,59.1,59.7,60.3,61.6,61.7,60.9,60.0,60.7,60.0,59.8,59.7,58.9,58.8,59.9,59.8,59.6,59.4,59.6,59.8,60.7,60.2,60.5,59.9,59.5,58.9,58.8,58.9,58.2,57.0,57.1,58.4,58.4,58.6,58.5,59.3,60.2,60.4,63.5,62.8,62.6,62.1,64.6,63.6,63.7,63.9,63.2,62.8,61.8,61.5,62.1,62.7,60.6,61.0,61.0,60.0,60.1,60.3,63.2,62.4,61.9,63.9,69.3,67.0,66.6,65.0,66.9,69.1,69.1,67.0,67.9,67.9,67.2,67.0,65.8,66.1,66.2,66.6,66.0,65.6,65.9,65.7,65.6,64.6,64.8,63.7,63.8,64.3,63.3,62.9,64.2,64.0,64.0,64.1,64.6,65.9,64.9,64.4,67.0,65.5,65.5,65.3,66.8,69.1,68.4,67.4,65.5,66.8,68.6,67.6,66.8,61.8,60.1,58.3,58.2,58.1,58.4,58.5,58.8,58.9,58.8,58.1,57.5,57.7,57.0,57.1,57.4,56.7,56.6,56.8,57.5,57.3,57.6,57.5,57.2,57.0,56.9,55.4,55.0,56.7],'o':[59.7,62.16,63.33,63.95,62.93,63.14,65.32,64.51,62.93,62.81,62.45,63.3,62.52,62.24,62.93,62.93,62.45,62.12,64.07,65.32,67.34,65.28,63.79,66.17,65.11,63.95,64.14,62.75,62.93,63.2,65.16,64.95,63.74,64.8,61.7,64.51,63.78,64.62,63.14,63.57,63.33,63.45,64.51,65.16,65.11,65.44,65.36,66.21,66.9,66.5,65.83,66.94,69.0,70.54,70.82,71.38,70.66,71.31,70.63,69.69,68.39,69.49,69.0,69.41,69.73,70.1,69.44,69.77,69.2,68.39,69.52,71.23,70.66,71.35,69.61,71.69,74.05,73.93,75.48,74.67,74.67,74.5,74.43,74.67,74.67,76.37,74.46,79.03,79.94,79.16,78.71,79.11,80.48,81.26,79.2,81.14,79.92,79.72,79.89,77.9,77.9,79.56,80.49,81.5,82.97,84.37,88.75,88.83,87.61,88.84,91.66,95.3,96.03,96.88,94.29,93.48,92.07,88.83,87.21,87.61,87.7,87.97,86.23,86.16,91.26,90.04,93.88,94.7,93.77,94.53,90.12,93.07,94.09,95.3,95.72,98.74,103.15,101.77,96.92,99.75,96.51,96.1,96.07,98.05,99.15,102.05,102.17,102.1,102.58,102.91,102.58,105.58,105.42,104.77,105.01,103.88,103.11,105.42,105.37,104.73,104.2,102.22,102.99,102.26,101.9,101.37,101.57,104.2,106.23,108.65,109.02,107.84,110.23,108.45,109.06,109.02,108.24,107.84,104.41,105.01,108.24,116.22,117.15,120.39,123.63,128.28,126.37,126.45,126.45,124.23,120.39,124.43,127.67,125.41,126.42,125.81,126.05,125.52,131.92,132.12,133.3,138.19,140.22,148.67,136.97,130.5,124.83,125.32,120.43,109.46,119.17,117.68,120.09,123.03,121.57,121.03,119.72,116.3,124.71,120.03,117.46,116.77,116.24,115.51,113.57,112.89,117.35,116.72,116.03,114.93,108.42,110.68,109.46,111.3,111.03,109.37,114.62,113.93,112.36,108.2,110.25,110.63,106.97,107.0,107.78,106.25,100.63,104.2,100.25,89.52,93.69,102.94,102.21,103.72,101.3,101.05,100.52,94.21,93.21,98.42,101.25,104.08,110.41,109.41,107.36,106.3,102.63,92.63,90.05,99.68,85.79,81.58,83.1,88.26,91.05,83.16,79.84,77.37,73.48,74.54,77.8,68.23,71.85,72.64,77.8,82.05,83.96,84.79,82.63,83.69,81.95,80.95,87.74,93.63,91.57,87.9,87.9,89.47,95.0,95.52,96.73,98.89,97.31,99.95,97.37,96.05,100.14,104.94,100.0,107.3,106.68,104.73,106.04,103.15,103.1,104.47,102.1,101.05,99.9,104.13,98.49,94.21,93.1,91.05,85.84,80.06,83.06,78.53,79.58,84.17,88.05,85.9,83.69,83.74,81.37,80.01,78.96,77.9,79.96,80.54,82.9,84.77,84.17,85.93,83.63,82.37,84.59,82.96,83.69,80.06,82.23,81.11,80.69,80.11,78.63,83.1,81.58,81.32,82.53,82.63,84.37,86.32,86.32,90.52,88.42,87.62,85.79,86.85,89.84,92.1,93.95,93.69,93.21,90.02,90.27,91.05,92.1,92.89,92.05,91.0,88.95,90.47,91.05,85.74,87.74,86.48,86.63,82.0,84.63,84.76,81.06,83.16,83.16,80.27,80.02,82.43,83.16,80.54,83.16,85.1,85.27,84.22,84.74,83.63,83.16,82.85,83.06,81.7,83.14,82.73,81.11,80.54,83.03,80.59,80.01,79.63,81.32,83.32,82.9,81.32,82.53,82.37,79.76,79.48,77.9,77.43,75.54,78.74,78.74,80.01,79.63,76.5,76.85,83.16,80.01,78.27,77.43,70.01,71.32,67.44,69.17,72.05,73.7,72.7,70.03,75.91,75.6,78.5,74.62,75.93,82.97,75.27,77.82,71.98,74.29,74.29,76.52,73.96,69.81,68.37,64.42,68.03,66.13,74.62,71.26,70.15,72.57,71.98,71.98,74.81,77.9,73.96,76.52,75.2,74.62,76.85,75.2,75.86,79.55,76.78,74.94,73.5,71.32,71.32,67.44,65.87,66.07,62.25,64.1,59.82,59.62,53.44,55.55,51.61,43.05,48.12,39.57,41.08,41.74,41.08,41.41,41.02,41.81,45.69,46.01,45.03,48.31,45.81,47.0,47.0,47.92,49.3,52.59,55.49,54.89,54.63,50.22,51.61,47.0,46.01,44.9,47.46,47.32,47.32,49.03,50.81,54.17,52.25,54.89,54.43,52.91,56.2,58.17,59.76,62.71,64.76,71.98,69.55,75.2,73.63,80.47,77.24,83.82,82.44,78.89,81.19,78.57,79.55,78.23,77.9,75.27,70.61,77.77,74.55,71.2,66.07,64.1,69.23,68.63,66.66,64.62,61.53,59.5,65.35,64.42,62.84,62.71,60.48,61.66,61.46,60.81,58.9,59.5,58.77,58.5,57.65,57.45,57.85,57.85,60.81,58.1,59.03,62.64,61.53,59.5,57.52,59.1,57.65,56.2,54.89,53.57,53.57,54.17,54.89,51.54,53.24,55.55,58.83,58.17,54.23,55.55,55.09,55.49,54.23,51.61,48.97,55.88,52.06,49.03,51.34,51.67,53.97,53.57,52.91,55.55,56.54,56.14,54.57,54.63,53.24,53.11,51.8,52.52,52.91,53.51,55.94,55.28,54.23,56.54,58.17,56.86,55.22,58.83,61.4,62.51,64.76,63.43,60.81,59.5,64.1,61.66,61.79,60.94,60.22,60.22,61.4,60.28,59.5,60.81,58.83,60.81,59.96,59.82,59.5,56.54,60.08,59.43,60.42,58.9,58.17,57.52,54.89,56.86,56.86,56.59,56.86,54.96,54.23,54.57,53.57,59.5,56.86,56.86,57.52,58.17,56.2,56.54,53.75,54.96,53.59,51.1,52.69,55.1,56.09,56.47,54.57,54.73,55.71,54.2,52.01,54.04,51.93,53.82,51.25,50.42,51.17,50.42,48.9,49.29,49.66,50.42,49.66,50.42,51.17,49.89,51.93,51.17,50.42,49.81,53.37,51.93,54.12,51.32,51.78,52.16,50.57,50.42,50.42,50.19,50.04,49.66,49.29,49.66,49.97,51.4,49.89,49.66,50.8,51.93,51.85,51.93,55.18,55.49,54.28,53.44,55.71,56.77,58.36,57.52,59.34,59.11,58.58,59.57,60.63,60.7,61.16,61.46,59.42,58.74,57.6,55.78,56.09,54.8,51.17,53.29,53.14,53.06,50.64,52.3,49.97,49.74,51.7,52.08,53.06,53.9,55.56,53.06,50.5,49.58,51.17,49.13,49.29,49.66,50.8,49.89,51.17,49.74,51.17,53.06,51.48,52.08,52.08,50.5,51.78,52.23,51.25,52.61,51.17,51.17,50.95,49.89,51.17,51.17,51.85,51.03,51.25,51.93,51.17,53.06,53.59,53.9,56.02,54.12,55.71,57.23,56.17,54.2,53.82,53.59,54.5,54.96,55.94,55.18,56.31,57.98,57.9,58.36,56.17,56.02,58.28,57.6,57.23,57.9,59.19,59.5,65.17,70.38,67.5,66.45,68.57,68.57,68.94,65.23,67.81,71.14,70.38,69.17,68.94,68.19,70.68,68.34,66.52,66.97,68.79,67.36,70.08,68.19,64.03,62.74,61.16,63.27,60.24,60.24,59.95,59.87,60.24,58.05,58.5,57.98,59.87,60.02,60.1,61.76,63.04,61.83,61.83,61.08,61.08,63.2,61.76,60.32,61.3,60.7,59.95,59.57,59.87,59.19,58.89,57.76,57.98,57.98,56.84,57.83,60.93,59.5,58.81,59.03,58.36,57.83,56.84,57.98,57.45,57.98,55.71,56.84,54.96,55.26,61.96,62.13,59.0,58.74,59.87,60.04,59.87,60.3,60.3,59.0,57.26,60.57,60.39,60.65,60.74,60.48,63.78,63.0,65.0,64.1,62.5,60.1,59.5,60.0,59.0,60.0,61.2,62.1,61.1,61.0,60.3,60.0,60.8,60.9,59.0,59.0,59.1,60.2,59.5,59.5,59.6,59.6,60.0,60.9,58.5,60.1,60.0,59.9,60.0,59.8,58.9,58.0,56.7,58.0,59.7,58.0,58.6,59.0,60.0,60.7,60.9,63.0,62.9,62.9,62.5,64.0,62.2,63.8,63.9,64.3,63.6,58.1,61.9,63.3,62.0,61.0,61.0,61.7,60.2,61.0,61.8,63.5,62.7,62.2,65.8,69.5,67.5,67.0,65.5,67.8,67.8,69.0,67.8,67.3,68.1,67.9,66.7,65.5,66.0,66.6,67.0,67.6,66.0,66.2,66.0,65.3,66.2,63.3,64.0,63.9,64.2,63.5,63.5,64.0,65.0,65.0,64.5,64.5,66.0,65.0,64.2,67.0,66.2,64.9,65.1,67.5,70.9,67.3,68.0,67.9,68.7,69.0,68.0,64.4,62.0,60.5,57.6,58.5,58.6,58.8,58.6,59.0,59.0,58.9,58.5,58.0,59.7,56.5,57.6,57.6,56.2,56.7,57.0,58.2,57.2,57.4,57.4,57.1,56.2,56.8,54.3,55.1],'h':[62.45,63.02,64.02,64.14,63.3,65.57,65.36,64.55,63.5,62.81,63.3,63.3,62.61,62.89,63.45,62.93,62.61,63.74,65.35,67.25,67.34,65.6,66.37,66.17,65.16,64.1,64.14,63.95,63.09,64.76,65.76,65.76,65.28,65.0,64.07,65.16,65.07,64.62,63.95,63.74,64.3,64.17,65.35,65.23,66.21,65.81,66.37,66.9,67.34,66.74,66.57,68.96,70.57,71.79,72.52,71.43,71.5,71.43,70.63,69.69,69.61,69.49,70.16,70.4,70.01,70.1,69.68,69.77,69.41,69.52,71.53,71.79,71.43,71.35,71.59,73.98,75.6,76.61,77.05,75.55,75.23,74.5,75.27,74.7,77.77,77.78,79.03,80.1,80.73,80.33,81.38,80.65,81.33,81.95,79.71,81.14,80.33,80.13,79.89,78.71,78.3,80.54,82.07,82.88,84.13,87.97,91.45,88.83,88.83,91.02,95.43,95.3,97.89,96.88,94.9,93.48,92.07,88.87,88.83,91.2,89.19,87.97,87.49,90.4,93.03,93.52,95.7,95.3,96.48,95.9,94.53,94.17,96.88,97.92,98.77,102.94,103.15,101.77,101.74,99.75,98.1,98.1,98.5,99.23,101.74,103.19,103.19,102.55,102.58,105.42,105.62,106.18,105.42,106.59,105.58,104.65,105.42,105.86,105.42,105.42,104.61,103.39,105.94,102.58,101.93,102.05,104.61,110.22,108.85,110.16,109.02,109.54,110.23,108.65,109.06,109.02,108.49,107.84,107.84,108.19,114.32,119.57,120.37,123.78,128.89,128.28,126.54,127.67,126.45,124.83,124.15,128.43,127.87,126.86,126.42,126.03,126.05,131.72,134.55,134.15,140.22,139.19,140.22,148.71,138.56,130.5,127.19,125.41,121.48,117.56,120.37,120.05,124.35,123.03,123.13,123.5,119.72,124.71,127.35,121.09,117.51,116.77,116.24,115.51,113.62,118.4,119.36,116.72,116.03,114.93,113.93,113.04,112.62,111.51,111.55,114.98,115.46,115.09,113.13,111.44,111.5,110.63,109.15,107.89,107.78,106.25,103.63,105.2,100.25,92.37,97.72,106.57,106.25,103.72,103.86,102.1,101.3,94.21,93.21,98.45,103.67,108.89,113.41,112.62,107.5,106.3,102.63,95.78,96.62,99.68,85.79,89.13,83.6,88.57,91.05,84.17,80.11,77.9,73.83,74.69,77.85,72.37,73.23,76.19,80.57,84.37,87.63,86.27,83.63,84.63,82.1,85.08,90.33,95.59,93.69,90.0,89.42,93.9,97.1,96.83,98.89,98.89,99.37,99.95,98.01,100.78,105.3,107.89,106.73,108.94,106.68,105.82,108.77,105.2,105.25,105.52,102.51,101.56,103.67,106.2,98.49,95.1,93.14,92.48,86.48,83.69,83.06,81.53,84.04,87.84,88.05,86.2,85.17,83.74,81.37,80.48,78.96,79.94,81.32,82.9,86.84,86.05,86.1,86.58,84.69,85.79,85.27,86.2,84.63,83.63,83.37,82.32,80.95,80.27,80.63,83.63,83.06,82.63,83.01,84.01,86.0,86.79,89.42,90.52,89.21,87.62,86.74,89.11,91.95,94.7,95.61,94.45,94.04,92.1,90.5,94.63,92.1,92.89,92.05,92.63,89.84,91.05,91.32,89.47,87.9,87.69,86.63,84.31,87.26,85.69,83.16,83.84,83.16,81.32,80.7,82.58,83.43,81.53,84.69,85.1,85.27,85.48,85.11,83.63,83.74,83.69,83.1,83.1,83.53,82.89,82.85,82.43,83.03,81.06,80.22,80.79,83.77,83.32,82.9,82.27,82.73,82.37,79.76,79.74,78.37,77.43,78.96,81.0,79.23,80.43,79.63,77.22,79.45,83.16,80.48,78.55,77.43,71.32,71.32,71.01,71.59,73.38,75.27,72.7,72.54,76.0,77.83,78.5,75.93,78.8,83.03,79.22,77.83,75.93,75.27,75.93,76.52,75.54,71.32,68.37,68.03,70.34,72.64,74.62,72.64,73.3,73.96,75.27,75.27,77.57,79.09,75.27,76.52,75.2,76.52,76.85,76.25,79.88,80.4,77.9,74.94,73.5,72.83,71.32,68.63,67.32,66.39,66.0,64.23,61.4,59.62,57.52,55.55,51.61,46.28,48.12,41.74,42.33,41.74,42.66,42.39,44.37,47.0,49.5,46.93,47.0,48.31,47.32,47.52,47.32,48.64,52.71,53.17,55.49,55.28,54.63,51.54,51.61,47.0,46.21,46.54,47.46,48.18,50.42,50.55,53.24,54.69,55.09,56.79,55.55,55.09,57.71,59.5,62.12,64.69,69.95,72.9,76.52,76.59,80.47,81.45,83.69,85.13,82.44,82.1,81.25,80.93,80.54,79.35,77.9,75.27,76.59,78.57,75.93,72.31,66.07,67.64,69.29,68.7,66.66,65.54,62.78,64.1,66.73,64.42,63.1,62.78,61.13,62.39,65.41,63.37,59.82,60.48,59.03,59.37,57.65,57.58,57.85,60.74,61.27,58.57,62.64,63.43,61.53,59.76,59.1,59.62,58.5,56.66,54.89,55.55,53.57,54.17,55.55,52.65,57.12,58.17,59.23,58.17,56.47,55.88,55.09,56.07,54.3,51.73,54.23,55.88,52.71,51.54,52.91,54.83,55.68,53.83,55.55,56.73,57.06,56.14,55.81,54.63,53.37,53.17,52.39,53.17,53.7,55.42,56.66,55.55,55.55,59.43,58.17,56.86,58.1,61.79,62.32,66.59,65.54,63.9,62.12,63.04,64.1,62.78,63.04,61.98,61.59,60.81,61.46,61.93,60.68,62.78,63.77,60.88,61.07,61.2,59.5,58.97,60.08,60.35,60.88,59.76,58.17,58.3,58.83,58.24,56.93,56.93,56.86,55.42,55.42,54.89,59.3,59.5,57.19,58.9,59.43,58.17,56.73,56.54,56.54,54.96,53.82,54.57,53.9,56.39,57.9,56.47,55.26,55.71,55.86,54.35,52.69,54.04,54.2,54.2,52.54,53.14,51.7,50.8,50.8,50.11,49.97,51.17,50.27,51.48,51.17,52.3,52.91,51.48,50.64,51.17,53.44,54.12,54.2,51.32,52.01,52.16,50.64,50.42,50.42,50.34,50.19,49.66,49.66,49.66,51.1,51.4,50.04,50.64,51.93,52.38,52.16,52.3,55.26,55.56,55.03,55.71,57.23,58.13,58.81,58.74,60.55,59.11,60.32,60.63,61.76,61.38,61.83,61.46,59.5,58.74,57.76,56.77,56.47,54.88,51.17,53.29,53.14,53.06,51.55,52.3,51.03,51.48,53.37,53.37,53.06,54.65,55.56,53.59,51.93,49.74,51.17,50.34,49.58,50.11,51.63,51.4,51.32,51.32,52.54,53.06,51.85,52.23,53.29,50.87,53.06,52.91,51.85,52.61,52.01,51.7,51.55,51.03,51.17,51.63,51.85,51.17,51.78,52.54,52.54,53.59,54.12,56.09,56.09,55.56,57.0,57.23,56.39,55.49,53.82,54.43,54.5,55.1,55.94,56.47,57.98,59.11,58.74,58.58,56.7,57.68,59.34,58.36,57.6,58.81,61.0,64.78,70.16,70.83,70.08,68.11,70.0,70.0,69.7,67.89,70.83,72.72,70.38,70.3,69.32,70.83,70.83,69.32,67.5,69.24,69.7,71.21,70.83,69.1,64.78,63.96,64.41,63.27,60.63,61.23,61.76,60.24,60.24,58.58,59.42,59.42,60.4,60.1,63.43,62.9,64.33,63.04,63.04,62.14,62.14,63.65,62.97,61.61,61.53,61.23,60.77,60.24,60.77,59.95,59.11,58.97,58.5,58.58,57.52,60.55,62.14,60.24,60.1,59.19,59.34,57.83,58.74,62.29,57.52,57.98,55.71,56.84,54.96,55.33,62.22,62.22,60.57,61.43,60.74,61.0,60.57,62.48,60.57,60.13,61.17,62.39,61.35,60.74,61.43,65.87,64.22,64.9,65.0,64.8,66.0,60.1,60.3,60.0,59.9,61.5,62.8,62.8,61.5,61.2,61.4,61.5,60.8,61.0,59.5,59.9,60.3,60.4,60.4,60.0,60.0,60.1,61.0,62.5,61.5,61.0,60.0,59.9,60.1,59.8,58.9,58.7,57.9,58.8,59.7,59.0,59.4,59.7,60.5,60.9,64.0,64.0,63.5,62.9,64.8,64.0,64.5,64.8,64.0,64.3,63.6,63.0,62.5,63.6,62.0,61.4,61.4,61.7,60.9,61.0,64.0,63.5,62.8,65.0,70.2,69.5,68.0,67.1,67.2,69.5,69.5,69.0,68.4,68.7,68.1,68.2,67.0,67.6,66.9,67.0,67.0,67.6,66.3,66.2,66.9,65.3,66.6,64.3,64.0,65.4,64.3,63.5,64.8,65.0,65.1,65.2,65.1,67.5,66.7,65.7,67.3,67.0,67.0,65.7,67.0,71.8,70.9,69.4,68.2,67.9,69.7,69.7,68.2,64.5,62.8,60.5,59.4,58.9,58.9,59.5,59.7,59.3,59.3,59.1,58.5,58.0,59.7,57.5,58.6,57.6,57.0,57.0,57.5,58.2,58.1,58.0,58.0,57.4,57.2,57.9,56.0,57.0],'l':[59.7,61.53,62.52,62.58,62.52,62.93,63.83,63.03,60.9,61.35,61.85,62.16,61.53,61.92,62.28,61.8,61.82,62.12,63.37,65.2,62.93,64.48,63.79,64.35,63.74,63.43,62.54,62.52,62.4,62.82,64.35,64.19,63.54,63.06,61.7,63.98,63.78,63.33,62.73,62.97,63.14,63.14,64.36,64.23,64.76,64.95,64.95,65.57,66.17,65.85,65.16,66.57,68.39,69.52,70.8,68.59,69.85,70.13,68.71,67.95,68.39,68.31,68.72,69.41,68.8,68.56,68.27,68.83,68.43,68.21,69.52,70.51,70.3,70.06,69.61,71.43,73.45,73.81,74.67,73.98,73.65,73.57,73.65,73.87,74.67,76.33,74.3,78.71,78.47,78.71,78.71,78.8,79.52,79.16,78.03,78.59,79.08,78.97,77.74,76.98,76.69,78.63,80.42,81.35,81.75,84.37,88.02,85.23,86.86,87.41,91.66,91.33,93.76,94.74,91.66,91.66,88.63,86.2,86.08,87.41,87.28,86.14,86.23,86.16,90.64,89.43,92.88,93.28,93.77,93.76,90.12,92.95,93.76,95.3,95.7,97.52,100.37,99.75,96.92,97.57,92.92,94.97,95.7,96.27,98.75,101.29,100.96,100.77,100.97,102.79,102.58,104.62,103.6,104.61,103.5,103.31,103.11,103.51,103.8,103.92,103.23,100.19,101.98,101.38,101.09,100.87,101.57,104.2,103.51,107.03,105.86,107.84,107.94,107.43,106.89,106.83,106.87,105.62,104.41,104.61,108.22,116.18,116.06,120.39,123.63,123.72,123.63,125.0,124.07,120.39,120.39,123.7,124.03,122.13,123.22,123.95,123.83,125.52,131.72,131.11,132.93,135.37,135.16,136.57,128.19,121.28,123.5,119.98,109.06,106.8,115.57,116.34,118.4,116.89,116.3,118.93,116.57,115.93,120.51,116.94,114.36,112.89,112.19,108.89,108.56,111.62,114.04,108.42,111.58,109.98,108.42,110.28,108.94,104.89,106.89,109.3,112.36,113.41,107.62,108.15,107.41,106.89,104.99,105.89,104.27,101.05,99.57,98.42,91.84,84.48,93.69,98.33,102.21,95.29,100.52,99.73,94.26,86.05,93.21,98.31,99.31,102.89,108.15,105.83,104.78,100.65,96.34,91.13,86.91,91.37,83.87,78.62,74.22,86.63,83.31,81.06,76.75,73.5,69.87,72.19,70.01,68.23,70.01,72.64,74.38,79.9,83.6,81.7,79.17,79.48,79.69,80.95,87.74,91.1,89.74,87.32,87.63,88.26,93.84,92.48,96.68,97.02,96.63,95.84,96.16,96.05,100.14,100.52,100.0,104.47,103.94,104.2,104.73,102.16,102.51,102.1,99.04,97.0,97.9,98.1,93.23,91.21,89.37,87.44,82.65,78.22,79.56,77.96,79.58,84.17,84.88,83.63,83.45,80.59,77.48,77.9,76.37,76.85,79.96,79.58,82.9,84.22,83.26,83.16,82.9,82.37,83.69,82.96,81.06,79.53,81.27,79.7,80.03,79.5,78.53,80.01,80.95,81.06,81.71,82.63,83.69,85.17,86.32,87.69,87.26,86.16,85.56,86.1,89.79,91.43,93.42,93.23,91.68,89.06,89.11,90.92,89.77,89.74,90.18,86.32,86.63,87.16,88.42,85.74,85.79,85.69,84.38,82.0,83.96,83.26,80.59,82.39,81.63,79.89,79.1,80.79,80.54,80.54,81.7,83.46,83.16,83.69,82.58,82.1,82.9,82.56,81.27,81.06,81.85,81.97,81.11,80.22,81.85,79.27,79.11,79.22,81.32,81.5,80.54,81.11,80.69,79.22,79.22,77.96,76.6,75.22,73.96,78.74,78.74,77.01,77.32,74.01,76.85,80.59,77.48,76.59,73.11,68.63,68.09,67.44,69.11,71.23,71.06,70.84,66.85,69.35,74.62,75.15,73.63,74.88,73.96,74.45,72.64,71.98,74.29,74.29,72.77,70.93,65.41,67.37,64.42,66.07,66.13,66.13,70.01,70.15,70.67,71.2,71.2,74.74,72.18,73.63,72.77,73.3,73.63,74.81,73.03,75.8,76.13,74.29,72.57,70.15,70.01,66.46,67.37,64.76,62.45,62.12,59.82,57.91,54.69,52.32,52.0,47.07,43.05,41.47,39.1,39.77,38.05,40.42,40.42,40.1,41.81,45.62,45.49,45.03,46.01,45.81,45.95,46.54,47.52,49.3,49.96,52.39,52.98,50.29,49.23,46.86,43.05,45.03,44.37,46.47,47.0,47.32,48.97,50.29,52.0,51.93,54.23,52.25,52.91,54.57,55.88,58.83,60.88,63.9,68.03,68.17,72.18,73.03,76.71,75.93,80.01,77.57,78.1,77.37,77.24,76.98,76.32,73.3,69.03,68.89,72.57,70.4,67.25,61.46,64.03,66.52,64.49,63.5,61.66,57.78,58.57,62.05,61.59,60.94,60.42,60.08,60.88,61.0,59.82,58.17,58.97,58.37,57.58,55.03,56.59,56.86,57.85,56.66,56.86,58.04,61.2,59.82,57.58,57.25,58.17,57.19,55.28,53.37,53.44,51.27,51.2,51.73,50.49,53.05,54.03,57.06,55.22,54.23,54.1,53.11,54.43,52.25,49.1,47.66,52.25,50.29,48.64,49.96,51.67,52.46,52.25,52.59,54.89,53.83,54.63,53.7,52.59,52.06,52.06,51.8,52.25,52.71,52.91,54.69,53.83,53.97,55.94,55.61,55.22,55.22,58.37,59.82,61.86,62.51,60.28,58.04,59.17,60.08,60.48,60.68,59.82,59.82,58.57,59.1,59.23,56.93,59.69,58.83,59.82,59.3,58.3,56.86,56.54,58.37,57.78,58.5,56.34,56.2,57.06,54.89,55.35,55.74,55.22,54.43,53.77,53.9,53.31,53.57,55.22,55.68,56.79,57.32,56.54,55.61,55.09,53.67,51.48,51.17,51.03,52.69,54.65,55.33,54.04,53.59,53.52,54.04,51.93,51.63,49.74,51.55,52.23,50.87,50.42,50.57,49.89,48.9,48.9,49.13,49.43,49.13,50.42,49.58,49.89,50.42,50.34,49.66,49.81,50.5,50.19,51.93,50.11,50.42,50.64,50.19,49.89,49.89,49.89,49.58,49.06,48.98,48.98,49.89,50.42,49.58,49.66,50.34,50.42,50.95,51.17,52.99,54.2,53.75,53.44,55.63,55.56,57.37,56.7,58.36,57.98,58.21,59.57,60.63,60.24,60.24,58.89,57.6,56.54,55.26,54.96,53.9,52.83,49.89,51.17,51.1,50.5,50.64,49.89,49.51,49.66,51.7,51.93,52.08,52.91,53.52,51.32,49.43,49.06,49.13,49.06,49.06,49.13,50.64,49.81,50.19,49.74,50.95,51.48,50.8,51.1,50.27,49.97,50.87,51.4,50.95,51.1,51.03,50.72,50.42,49.89,50.42,50.64,50.95,50.8,51.1,51.17,50.95,52.23,52.61,53.9,53.29,53.82,54.73,54.88,53.67,53.59,52.83,53.59,53.44,54.35,54.35,54.96,56.31,57.68,57.52,57.37,54.96,55.1,57.23,56.54,56.62,57.23,58.81,59.11,65.01,66.75,66.07,64.71,67.81,67.81,64.94,64.71,67.81,68.94,68.03,67.2,66.45,67.81,67.89,66.68,65.01,65.62,65.7,66.9,65.92,62.06,62.06,60.02,60.32,59.95,56.31,58.74,59.34,58.74,58.21,57.45,57.83,57.98,59.57,59.19,60.1,61.46,61.08,60.77,60.77,61.0,61.0,60.4,60.32,59.95,60.02,59.72,59.34,59.57,59.64,59.19,58.28,57.76,57.07,56.47,56.31,57.23,59.11,58.81,58.74,57.52,56.84,56.7,56.84,56.92,56.31,55.71,53.75,54.28,54.28,54.28,61.17,59.96,59.0,58.74,59.35,59.87,58.3,60.13,58.65,58.65,57.26,60.39,59.96,59.43,59.87,59.87,62.04,63.0,63.8,62.4,62.5,58.2,58.5,58.9,58.6,59.7,60.5,61.4,60.5,60.0,60.0,60.0,59.5,59.3,58.8,58.6,59.1,59.6,59.3,59.2,59.5,59.6,59.9,60.0,58.5,59.8,59.3,58.8,58.6,58.8,58.0,57.0,56.7,57.9,58.1,58.0,58.4,58.7,59.8,60.1,60.9,62.5,62.2,61.8,62.1,63.5,62.2,63.7,63.0,62.7,61.5,58.1,61.7,62.2,60.0,60.7,60.7,59.9,59.4,60.2,60.0,62.3,61.8,62.0,64.9,66.2,65.6,64.8,65.5,66.8,66.8,66.6,67.1,67.1,67.0,66.9,65.7,65.5,65.9,66.0,65.8,65.5,65.6,65.6,65.4,64.6,64.8,63.2,63.5,63.9,63.3,62.8,63.5,64.0,64.0,64.0,64.5,64.5,64.8,64.1,64.1,65.1,64.9,64.0,65.1,67.0,68.1,67.0,65.2,65.4,67.1,67.4,66.5,61.6,59.8,58.0,57.4,57.7,58.0,58.3,58.6,58.9,58.7,58.0,57.1,57.6,56.8,56.2,57.4,56.6,56.2,56.6,56.9,57.3,57.2,57.0,57.1,56.5,56.2,55.2,54.3,55.0],'v':[1048000.0,992000.0,1636500.0,1529500.0,1025500.0,2518500.0,1573000.0,1071500.0,2286000.0,1456000.0,1803500.0,1130500.0,958000.0,1001500.0,1042000.0,1153500.0,1273500.0,1523000.0,2311500.0,3554000.0,1449000.0,1840500.0,1074500.0,1415500.0,850500.0,538000.0,682500.0,653000.0,1083000.0,829000.0,1036500.0,784500.0,903500.0,566000.0,434500.0,530500.0,558000.0,444500.0,518000.0,856500.0,722500.0,742000.0,987500.0,944500.0,1215000.0,970500.0,1131000.0,1422000.0,1228000.0,913500.0,1199500.0,2733000.0,3671500.0,2038500.0,1984000.0,2416000.0,1472500.0,784500.0,931500.0,982000.0,504500.0,604500.0,531000.0,1044500.0,1038500.0,469000.0,737000.0,419500.0,871000.0,592000.0,2379000.0,779500.0,1036500.0,1528500.0,1420500.0,2553000.0,2660000.0,3042500.0,2518500.0,2426500.0,1861000.0,1444500.0,928000.0,842500.0,3092000.0,1226500.0,1627500.0,1745000.0,1135500.0,1535000.0,1362500.0,840000.0,1288000.0,1364000.0,930000.0,751500.0,521500.0,971500.0,860500.0,1042500.0,576500.0,1614000.0,1322500.0,1741500.0,1590000.0,2735500.0,1653000.0,1709500.0,1069000.0,1707500.0,3440000.0,1556500.0,1747500.0,1487500.0,1560500.0,795500.0,983500.0,892500.0,549000.0,285500.0,310000.0,309500.0,603000.0,608500.0,1302000.0,868000.0,1066000.0,1161500.0,1599500.0,703000.0,507500.0,355000.0,1181500.0,1293000.0,1931000.0,2074500.0,1480000.0,2001500.0,1016000.0,1580000.0,1336500.0,642500.0,1176500.0,889500.0,1744500.0,1450500.0,1333500.0,1213000.0,747000.0,1635500.0,1501000.0,1010000.0,922500.0,681000.0,565500.0,600000.0,791500.0,694000.0,555000.0,647000.0,807500.0,613500.0,267500.0,336500.0,285500.0,374000.0,315000.0,1865000.0,1303500.0,972500.0,582500.0,721500.0,1027500.0,800500.0,710000.0,930500.0,1061500.0,489500.0,758000.0,772500.0,2051500.0,2378000.0,1701000.0,2463500.0,2113000.0,1441500.0,1024000.0,863000.0,959500.0,1237500.0,517500.0,884500.0,759500.0,665000.0,724500.0,566500.0,448000.0,1567000.0,808000.0,846500.0,1212000.0,1036000.0,1057000.0,1887500.0,2486500.0,2530000.0,1475500.0,1599500.0,2863500.0,1166000.0,1177500.0,1775000.0,1246500.0,974500.0,763000.0,612500.0,544000.0,971500.0,705500.0,364500.0,518500.0,337000.0,439000.0,959000.0,669500.0,648500.0,696000.0,688500.0,299000.0,431500.0,267000.0,137500.0,408000.0,1132000.0,809000.0,570500.0,345500.0,439000.0,194000.0,196500.0,292500.0,233000.0,435500.0,125500.0,248500.0,456500.0,396500.0,377500.0,467000.0,88500.0,199000.0,860000.0,938000.0,616000.0,1156000.0,551000.0,705500.0,63000.0,57000.0,100000.0,958000.0,794500.0,1575000.0,782000.0,392000.0,512000.0,452500.0,582000.0,350000.0,203000.0,398000.0,788000.0,575000.0,486500.0,254500.0,113000.0,287500.0,268000.0,155500.0,156000.0,476000.0,392500.0,371500.0,461500.0,601500.0,548000.0,738000.0,489500.0,380000.0,306500.0,515000.0,626000.0,1169500.0,1422000.0,447000.0,502000.0,345500.0,541000.0,929000.0,860000.0,998000.0,496500.0,691500.0,578000.0,342000.0,891500.0,1316500.0,1211500.0,699000.0,945000.0,422500.0,657000.0,1236500.0,414000.0,486000.0,372500.0,741000.0,521500.0,301500.0,1369500.0,1401000.0,328500.0,774500.0,386500.0,438500.0,443500.0,308500.0,248000.0,303500.0,265000.0,419000.0,294000.0,195000.0,211500.0,263000.0,136500.0,200500.0,177500.0,159500.0,168000.0,291000.0,233000.0,143000.0,164500.0,219000.0,186000.0,204000.0,292500.0,267500.0,119500.0,116000.0,110000.0,74000.0,60000.0,65000.0,161000.0,87500.0,210500.0,100000.0,202000.0,214500.0,249000.0,572000.0,224000.0,199500.0,240000.0,358000.0,540000.0,800000.0,918000.0,659500.0,647500.0,868000.0,372000.0,485500.0,368500.0,357000.0,351500.0,461000.0,405500.0,551000.0,499500.0,282000.0,309500.0,303000.0,164500.0,168000.0,155500.0,103500.0,178000.0,167000.0,97000.0,66000.0,170500.0,59500.0,89000.0,61000.0,48000.0,218500.0,219000.0,152500.0,120500.0,104000.0,119000.0,73000.0,65500.0,182500.0,91000.0,111500.0,62000.0,130000.0,106000.0,143000.0,132500.0,81500.0,237500.0,137500.0,159500.0,44000.0,36500.0,47000.0,85000.0,36000.0,83500.0,32500.0,106500.0,234000.0,256000.0,131000.0,47000.0,134000.0,71500.0,92500.0,94000.0,20000.0,81500.0,119500.0,172500.0,120000.0,187500.0,67000.0,140000.0,104500.0,66000.0,242500.0,257500.0,195000.0,115500.0,217000.0,321000.0,195000.0,167000.0,100500.0,20000.0,49000.0,56500.0,42000.0,84500.0,61500.0,11500.0,40500.0,59500.0,135000.0,49000.0,30500.0,55000.0,148000.0,254500.0,254500.0,133500.0,62000.0,109500.0,101000.0,184000.0,201000.0,114000.0,273500.0,541000.0,281000.0,191500.0,202500.0,103500.0,141500.0,195000.0,103000.0,93500.0,78500.0,111000.0,66500.0,71500.0,82500.0,105000.0,207000.0,172500.0,201000.0,134000.0,163000.0,129000.0,152500.0,98000.0,75000.0,128500.0,112000.0,179000.0,89500.0,66500.0,63000.0,86000.0,70000.0,49000.0,206500.0,210000.0,208500.0,205000.0,258500.0,120500.0,110500.0,188000.0,156000.0,103000.0,142000.0,47000.0,60500.0,110500.0,158000.0,332000.0,260000.0,337500.0,330000.0,291000.0,306000.0,462500.0,694000.0,730500.0,1070000.0,1489000.0,1067500.0,1096000.0,1392500.0,2042500.0,1389000.0,1402000.0,1508000.0,1264000.0,935500.0,1357000.0,915000.0,616500.0,502500.0,480000.0,1775000.0,3590500.0,1968000.0,1348000.0,1313500.0,862000.0,538000.0,459500.0,443000.0,313500.0,276500.0,484000.0,390500.0,399000.0,197000.0,211000.0,272500.0,148500.0,126000.0,357000.0,251000.0,273000.0,162000.0,185000.0,184000.0,204000.0,181000.0,132000.0,193500.0,272500.0,86500.0,433000.0,482500.0,119500.0,154500.0,111500.0,95500.0,76500.0,142500.0,203500.0,88500.0,127500.0,114000.0,165500.0,147500.0,250000.0,352000.0,395500.0,264000.0,141000.0,126500.0,148000.0,115500.0,186000.0,171500.0,271000.0,188000.0,136000.0,174500.0,99500.0,171000.0,331500.0,192500.0,221000.0,342500.0,256500.0,175500.0,235500.0,154500.0,132000.0,144000.0,123500.0,160000.0,225000.0,360000.0,285000.0,205500.0,254500.0,661000.0,567500.0,333500.0,560000.0,979500.0,580000.0,1742000.0,687000.0,535500.0,651000.0,491500.0,655000.0,753000.0,632500.0,586000.0,832500.0,833500.0,632000.0,841000.0,726000.0,1032000.0,432000.0,495000.0,418500.0,380000.0,252500.0,275500.0,354500.0,436000.0,323000.0,230000.0,176000.0,130500.0,167500.0,242000.0,154500.0,159500.0,237000.0,170000.0,62000.0,98500.0,442500.0,318500.0,186500.0,336000.0,555500.0,200500.0,165000.0,325000.0,365000.0,175000.0,137500.0,302000.0,311500.0,379000.0,420500.0,343000.0,79500.0,178500.0,287000.0,144000.0,71500.0,128000.0,273000.0,146000.0,107500.0,96500.0,62500.0,83000.0,63000.0,38000.0,29500.0,42000.0,20500.0,77500.0,82000.0,80000.0,156500.0,92500.0,74500.0,59500.0,94000.0,444000.0,60000.0,94500.0,91000.0,67500.0,59500.0,44500.0,77000.0,87500.0,43000.0,86000.0,87000.0,50000.0,238500.0,85500.0,99000.0,107500.0,156000.0,340000.0,302500.0,227000.0,743000.0,429500.0,141000.0,344500.0,592500.0,472000.0,278000.0,589500.0,598500.0,281500.0,1176000.0,527000.0,764000.0,566000.0,772500.0,479000.0,298500.0,192000.0,134000.0,244000.0,275500.0,115500.0,182500.0,146000.0,130500.0,270500.0,47500.0,38500.0,88500.0,113000.0,199000.0,215500.0,96000.0,418000.0,151000.0,138000.0,384500.0,158000.0,335000.0,71500.0,227500.0,77000.0,167000.0,169500.0,150500.0,106500.0,184000.0,181000.0,87000.0,94500.0,141500.0,165000.0,205000.0,67500.0,111500.0,78000.0,97000.0,99000.0,134500.0,92500.0,118500.0,54500.0,57500.0,49500.0,94000.0,121500.0,160000.0,239000.0,202500.0,423000.0,270000.0,247000.0,492500.0,760000.0,280500.0,225000.0,50500.0,151000.0,200500.0,287500.0,293000.0,336500.0,634500.0,730500.0,605500.0,527000.0,444000.0,324000.0,492500.0,381500.0,322000.0,498000.0,794500.0,1817500.0,3510500.0,1572000.0,1646000.0,1244000.0,1297500.0,1297500.0,1151000.0,840000.0,1828000.0,1619500.0,1066000.0,868000.0,989500.0,2683000.0,814500.0,523500.0,474500.0,691000.0,1206500.0,2420500.0,1094000.0,447500.0,449500.0,405000.0,315500.0,429000.0,132500.0,228500.0,290500.0,226500.0,117000.0,109500.0,146000.0,50000.0,161000.0,141500.0,191000.0,179000.0,466000.0,162500.0,162500.0,407500.0,407500.0,705000.0,242000.0,410500.0,324000.0,186500.0,207000.0,161000.0,172500.0,117500.0,151500.0,99500.0,201500.0,234500.0,241500.0,165500.0,227000.0,167000.0,197000.0,169000.0,96000.0,84000.0,67500.0,73500.0,63500.0,71500.0,171500.0,39500.0,63500.0,139000.0,35500.0,45000.0,101000.0,90500.0,120000.0,59500.0,72000.0,35000.0,79500.0,81500.0,79000.0,108000.0,106000.0,154000.0,55500.0,218500.0,344500.0,215000.0,205000.0,311000.0,237000.0,804500.0,192000.0,108000.0,152500.0,266500.0,297500.0,370000.0,258000.0,275000.0,174500.0,172500.0,116500.0,98500.0,113000.0,75500.0,75500.0,64000.0,99500.0,101000.0,105500.0,207500.0,183000.0,173000.0,84000.0,76500.0,104500.0,49500.0,91000.0,70000.0,58000.0,110500.0,41500.0,97000.0,49500.0,46500.0,48500.0,72500.0,202500.0,126500.0,460500.0,222500.0,161500.0,150000.0,492000.0,204000.0,192500.0,408500.0,406000.0,590500.0,421000.0,253000.0,245500.0,309500.0,339500.0,390000.0,390000.0,459500.0,219000.0,166500.0,442500.0,208500.0,329500.0,857500.0,2059000.0,706500.0,583500.0,334500.0,293500.0,673000.0,673000.0,217000.0,335500.0,235000.0,139500.0,311000.0,145500.0,111500.0,115500.0,134500.0,94500.0,156000.0,105500.0,112000.0,121500.0,71000.0,128500.0,64000.0,72500.0,28000.0,86000.0,31500.0,74000.0,93000.0,49000.0,71000.0,56000.0,231000.0,146000.0,122000.0,294000.0,133500.0,135500.0,27000.0,172500.0,790000.0,273500.0,234000.0,225500.0,121000.0,464500.0,418000.0,163500.0,417500.0,169500.0,343000.0,146500.0,247500.0,92500.0,118000.0,125500.0,90000.0,76000.0,143500.0,71500.0,18500.0,163500.0,41500.0,78500.0,132500.0,29500.0,38500.0,45500.0,49500.0,34500.0,115000.0,43000.0,70000.0,58500.0,271500.0,16000.0,96000.0],'s':'ok'}";        exit;    }}