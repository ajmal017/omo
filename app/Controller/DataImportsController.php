<?phpApp::uses('AppController', 'Controller');/** * Instruments Controller * */class DataImportsController extends AppController{    public function beforeFilter()    {        parent::beforeFilter();        //$this->Auth->allow('test');        $this->Auth->allow();        Configure::write('debug', 2);    }    /*function _getSymbolList($keyIsID = 1)    {        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $symbolsResult = $db->get_results("SELECT id,dse_code FROM symbols");        $symbolList = array();        foreach ($symbolsResult as $symbol) {            $symbolList[$symbol->id] = $symbol->dse_code;        }        return $symbolList;    }*/    /*     * Action to import data from live site     * */    function ca_import()    {        Configure::write('debug', 2);        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $dataToSave = array();        App::uses('CorporateAction', 'Model');        $CorporateAction = new CorporateAction();        $corporateActionData = $CorporateAction->find('first', array(            'recursive' => -1,            'order' => array('CorporateAction.id' => 'desc')        ));$lastId=$corporateActionData['CorporateAction']['id'];    //    pr($corporateActionData);    //    exit;        $result = $db->get_results("SELECT * FROM corporate_action where id>$lastId");        $dataToSave = array();        $notfound = array();        foreach ($result as $ca) {            if (isset($instrumentList[$ca->code])) {                $temp = array();                $temp['id'] = $ca->id;                $temp['instrument_id'] = $instrumentList[$ca->code];                $temp['action'] = $ca->action;                $temp['value'] = $ca->value;                $temp['premium'] = $ca->premium;                $temp['record_date'] = date('Y-m-d', $ca->datestamp);                $temp['active'] = $ca->active;                $dataToSave[] = $temp;            } else {                $notfound[] = $ca;            }        }if(count($dataToSave)) {    $CorporateAction->saveMany($dataToSave, array('atomic' => true));}echo "Total corporate action : ". count($dataToSave);        pr($dataToSave);        exit;    }    function ca_import_full()    {        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $result = $db->get_results("SELECT * FROM corporate_action");        $dataToSave = array();        App::uses('CorporateAction', 'Model');        $CorporateAction = new CorporateAction();        $dataToSave = array();        $notfound = array();        foreach ($result as $ca) {            if (isset($instrumentList[$ca->code])) {                $temp = array();                $temp['id'] = $ca->id;                $temp['instrument_id'] = $instrumentList[$ca->code];                $temp['action'] = $ca->action;                $temp['value'] = $ca->value;                $temp['premium'] = $ca->premium;                $temp['record_date'] = date('Y-m-d', $ca->datestamp);                $temp['active'] = $ca->active;                $dataToSave[] = $temp;            } else {                $notfound[] = $ca;            }        }        $CorporateAction->deleteAll(array('1=1'), false);        $CorporateAction->saveMany($dataToSave, array('atomic' => true));echo "Total corporate action : ". count($dataToSave);        exit;    }    function market_import()    {        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $result = $db->get_results("SELECT date FROM market_summeries");        $dataToSave = array();        App::uses('Market', 'Model');        $Market = new Market();        $dataToSave = array();        $notfound = array();        foreach ($result as $trade_date) {            $temp = array();            $temp['trade_date'] = $trade_date->date;            $temp['exchange_id'] = 1;            $temp['market_started'] = '10:30:00';            $temp['market_closed'] = '14:30:00';            $temp['comments'] = 'Market started and closed time is set to default value. It may not be correct all time';            $dataToSave[] = $temp;        }        pr($dataToSave);        $Market->deleteAll(array('1=1'), false);        $Market->saveMany($dataToSave, array('atomic' => true));        exit;    }    function market_stats_import()    {        Configure::write('debug', 2);        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $result = $db->get_results("SELECT * FROM market_summeries");        App::uses('Market', 'Model');        $Market = new Market();        App::uses('Meta', 'Model');        $Meta = new Meta();        App::uses('MarketStat', 'Model');        $MarketStat = new MarketStat();//pr($result);//        exit;        $dataToSave = array();        $notfound = array();        foreach ($result as $eod) {            $trade_date = date('Y-m-d', strtotime($eod->date));            $marketRow = $Market->find('all', array(                'conditions' => "Market.trade_date='$trade_date' and Market.exchange_id=1",                'recursive' => -1            ));            if (empty($marketRow)) {                pr("$trade_date empty or missing ");                $data['trade_date'] = $trade_date;                $data['exchange_id'] = 1;                $data['market_started'] = '10:30:00';                $data['market_closed'] = '14:30:00';                $data['comments'] = 'Market started and closed time is set to default value. It may not be correct all time';                $Market->create();                $Market->save($data);                $market_id = $Market->getLastInsertId();            } else {                $market_id = $marketRow[0]['Market']['id'];            }            foreach ($eod as $fname => $data) {                $temp = array();                $marketMetaRow = $Meta->find('all', array(                    'conditions' => "Meta.meta_key LIKE '$fname'",                    'recursive' => -1                ));                $temp['market_id'] = $market_id;                $temp['meta_id'] = $marketMetaRow[0]['Meta']['id'];                $temp['meta_value'] = $data;                $temp['meta_date'] = $trade_date;                if(!empty($marketMetaRow) && isset($temp['meta_value']))                $dataToSave[] = $temp;            }        }        $MarketStat->deleteAll(array('1=1'), false);        $MarketStat->saveMany($dataToSave, array('atomic' => true));        pr($dataToSave);        exit;    }    function instrument_import()    {        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $result = $db->get_results("SELECT * FROM symbols");        $dataToSave = array();        $dataToSave = array();        $notfound = array();        foreach ($result as $ins) {            if (isset($instrumentList[$ins->dse_code])) {                $this->Instrument->id = $instrumentList[$ins->dse_code];                $this->Instrument->saveField('name', $ins->name);            } else {                $notfound[] = $ins->dse_code;            }        }        pr($notfound);        exit;    }    function instrument_check()    {        Configure::write('debug', 2);        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql_dse.php');        $result = $db->get_results("SELECT MKISTAT_INSTRUMENT_CODE,MKISTAT_INSTRUMENT_NUMBER FROM MKISTAT");//pr($result);//pr($instrumentList);        App::uses('Instrument', 'Model');        $Instrument = new Instrument();        $dataToSave = array();        $report = array();        $notfound = array();        foreach($result as $row)        {            $temp = array();            $temp['id']=$row->MKISTAT_INSTRUMENT_NUMBER;            $temp['exchange_id']=1;            $temp['instrument_code']=trim($row->MKISTAT_INSTRUMENT_CODE);            $temp['active']=1;            $dataToSave[]=$temp;        }pr($dataToSave);        if (!empty($dataToSave)) {            $Instrument->saveMany($dataToSave, array('atomic' => true));        }        exit;        $dataToSave = array();        $dataToSave = array();        $notfound = array();        foreach ($result as $ins) {            if (isset($instrumentList[$ins->dse_code])) {                $this->Instrument->id = $instrumentList[$ins->dse_code];                $this->Instrument->saveField('name', $ins->name);            } else {                $notfound[] = $ins->dse_code;            }        }        pr($notfound);        exit;    }    function data_bank_eod_import($starLimit = 0)    {        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $instrumentList['DSEX']=10001;        $instrumentList['DS30']=10002;        $instrumentList['DSES']=10003;        $symbolsResult = $db->get_results("SELECT id,dse_code FROM symbols");        $symbolList = array();        foreach ($symbolsResult as $symbol) {            $symbolList[$symbol->id] = $symbol->dse_code;        }        App::uses('Market', 'Model');        $Market = new Market();        $processPerTransaction = 10000;        $nextstart=$starLimit+$processPerTransaction;        echo "next start from =  $nextstart";        echo "</br /><a href='http://localhost/omo/DataImports/data_bank_eod_import/$nextstart/'> Next batchprocess from id  $nextstart</a>";        pr($starLimit);        $result = $db->get_results("SELECT * FROM outputs where id>$starLimit order by id asc LIMIT 0 , $processPerTransaction");echo "<br />Total processed row=".count($result);        echo "<br />SELECT * FROM outputs where id>$starLimit order by id asc LIMIT 0 , $processPerTransaction";//        pr($result);//         exit;        $dataToSave = array();        App::uses('DataBanksEod', 'Model');        $DataBanksEod = new DataBanksEod();        $dataToSave = array();        $report = array();        $notfound = array();        $last_imported_id=end($result)->id;        foreach ($result as $eod) {            if (isset($instrumentList[$symbolList[$eod->symbol]])) {                $trade_date = date('Y-m-d', strtotime($eod->date));                $marketRow = $Market->find('all', array(                    'conditions' => "Market.trade_date='$trade_date' and Market.exchange_id=1",                    'recursive' => -1                ));                $temp = array();                if (empty($marketRow)) {                    pr("$trade_date empty or missing ");                    $data['trade_date'] = $trade_date;                    $data['exchange_id'] = 1;                    $data['market_started'] = '10:30:00';                    $data['market_closed'] = '14:30:00';                    $data['comments'] = 'Market started and closed time is set to default value. It may not be correct all time';                    $Market->create();                    $Market->save($data);                    $temp['market_id'] = $Market->getLastInsertId();                } else {                    $temp['market_id'] = $marketRow[0]['Market']['id'];                }                $temp['instrument_id'] = $instrumentList[$symbolList[$eod->symbol]];            //    $last_imported_id=$eod->id;                $temp['id'] = $eod->id;                $temp['open'] = $eod->open;                $temp['high'] = $eod->high;                $temp['low'] = $eod->low;                $temp['close'] = $eod->close;                $temp['volume'] = $eod->volume;                $temp['trade'] = $eod->trade;                $temp['tradevalues'] = $eod->tradevalues;                $temp['date'] = $trade_date;                $dataToSave[] = $temp;                $report[] = $temp['instrument_id'];            } else {                $notfound[$eod->name] = $eod->code;            }        }        pr("Instrument that should be added");        pr($notfound);        pr("Instrument array that have processed. Total=".count($report));        pr($report);        //$DataBanksEod->deleteAll(array("1=1"), false);        if (!empty($dataToSave)) {            $DataBanksEod->saveMany($dataToSave, array('atomic' => true));        }   //     pr('============================');        $data=array();        $data['import_from']='outputs';        $data['import_to']='data_banks_eods';        $data['last_import_start_id']=$starLimit;        $data['last_import_end_id']=$last_imported_id;        $data['summary']="Nothing/ Later";        //2014-07-13 13:37:59        $data['last_updated']=date('Y-m-d H:i:s');    //    pr($last_imported_id);    //    pr($data);        $this->DataImport->save($data);        //pr($symbolList);        // pr($result);        exit;    }    function data_bank_intraday_import($starLimit = 0)    {        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $instrumentList['DSEX']=10001;        $instrumentList['DS30']=10002;        $instrumentList['DSES']=10003;        $symbolsResult = $db->get_results("SELECT id,dse_code FROM symbols");        $symbolList = array();        foreach ($symbolsResult as $symbol) {            $symbolList[$symbol->id] = $symbol->dse_code;        }        App::uses('Market', 'Model');        $Market = new Market();//$starLimit=0;        $processPerTransaction = 10000;        $nextstart=$starLimit+$processPerTransaction;        echo "next start from =  $nextstart";        echo "</br /><a href='http://localhost/omo/DataImports/data_bank_intraday_import/$nextstart/'> Next batchprocess from id  $nextstart</a>";     //   pr($starLimit);        $result = $db->get_results("SELECT * FROM data_banks_intraday where id>$starLimit LIMIT 0 , $processPerTransaction");echo "<br />SELECT * FROM data_banks_intraday where id>$starLimit LIMIT 0 , $processPerTransaction";        $dataToSave = array();        App::uses('DataBanksIntraday', 'Model');        $DataBanksIntraday = new DataBanksIntraday();        $dataToSave = array();        $report = array();        $notfound = array();        $last_imported_id=end($result)->id;        foreach ($result as $eod) {            if (isset($instrumentList[$eod->code])) {                $trade_date = date('Y-m-d', strtotime($eod->date_time));                $trade_time = date('H:i', strtotime($eod->date_time)); //14:25                $marketRow = $Market->find('all', array(                    'conditions' => "Market.trade_date='$trade_date' and Market.exchange_id=1",                    'recursive' => -1                ));                $temp = array();                if (empty($marketRow)) {                    pr("$trade_date empty or missing ");                    $data['trade_date'] = $trade_date;                    $data['exchange_id'] = 1;                    $data['market_started'] = '10:30:00';                    $data['market_closed'] = '14:30:00';                    $data['comments'] = 'Market started and closed time is set to default value. It may not be correct all time';                    $Market->create();                    $Market->save($data);                    $temp['market_id'] = $Market->getLastInsertId();                } else {                    $temp['market_id'] = $marketRow[0]['Market']['id'];                }                $temp['id'] = $eod->id;                $temp['instrument_id'] = $instrumentList[$eod->code];                $temp['quote_bases'] = $eod->quote_bases;                $temp['open_price'] = $eod->open;                $temp['pub_last_traded_price'] = $eod->last_trade_price;                $temp['spot_last_traded_price'] = $eod->spotlastprice;                $temp['high_price'] = $eod->high;                $temp['low_price'] = $eod->low;                $temp['close_price'] = $eod->close;                $temp['yday_close_price'] = $eod->yclose;                $temp['total_trades'] = $eod->trade;                $temp['total_volume'] = $eod->volume;                $temp['total_value'] = $eod->value;                $temp['public_total_trades'] = $eod->trade;                $temp['public_total_volume'] = $eod->volume;                $temp['public_total_value'] = $eod->value;                // $temp['spot_total_trades'] = $eod->tradevalues;                //  $temp['spot_total_volume'] = $eod->tradevalues;                //  $temp['spot_total_value'] = $eod->tradevalues;                $temp['lm_date_time'] = date('Y-m-d H:i:s', strtotime($eod->date_time));                $temp['trade_time'] = $trade_time;                $temp['trade_date'] = $trade_date;                $dataToSave[] = $temp;                $report[] = $temp['instrument_id'];            } else {                $notfound[$eod->name] = $eod->code;            }        }        pr("Instrument that should be added");        pr($notfound);        pr("Instrument array that have processed. Total=".count($report));        pr($report);        //   pr($dataToSave);        //$DataBanksEod->deleteAll(array("1=1"), false);        if (!empty($dataToSave)) {            $DataBanksIntraday->saveMany($dataToSave, array('atomic' => true));        }        $data=array();        $data['import_from']='data_banks_intraday';        $data['import_to']='data_banks_intradays';        $data['last_import_start_id']=$starLimit;        $data['last_import_end_id']=$last_imported_id;        //2014-07-13 13:37:59        $data['last_updated']=date('Y-m-d H:i:s');        $data['summary']="Nothing/ Later";        $this->DataImport->save($data);        //pr($symbolList);        // pr($result);        exit;    }    function index_values_import($starLimit = 0)    {        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $symbolsResult = $db->get_results("SELECT id,dse_code FROM symbols");        $symbolList = array();        foreach ($symbolsResult as $symbol) {            $symbolList[$symbol->id] = $symbol->dse_code;        }        App::uses('Market', 'Model');        $Market = new Market();//$starLimit=0;        $processPerTransaction = 10000;        // pr($instrumentList);        pr($starLimit);        $result = $db->get_results("SELECT * FROM `index` order by id desc LIMIT $starLimit , $processPerTransaction");        $dataToSave = array();        App::uses('IndexValue', 'Model');        $IndexValue = new IndexValue();        $dataToSave = array();        $report = array();        $notfound = array();        foreach ($result as $eod) {            if (isset($instrumentList[trim($eod->IDX_INDEX_ID)])) {                $trade_date = date('Y-m-d', strtotime($eod->IDX_DATE_TIME));                $index_time = date('H:i', strtotime($eod->IDX_DATE_TIME)); //14:25                $marketRow = $Market->find('all', array(                    'conditions' => "Market.trade_date='$trade_date' and Market.exchange_id=1",                    'recursive' => -1                ));                $temp = array();                if (empty($marketRow)) {                    pr("$trade_date empty or missing ");                    $data['trade_date'] = $trade_date;                    $data['exchange_id'] = 1;                    $data['market_started'] = '10:30:00';                    $data['market_closed'] = '14:30:00';                    $data['comments'] = 'Market started and closed time is set to default value. It may not be correct all time';                    $Market->create();                    $Market->save($data);                    $temp['market_id'] = $Market->getLastInsertId();                } else {                    $temp['market_id'] = $marketRow[0]['Market']['id'];                }                $temp['instrument_id'] = $instrumentList[trim($eod->IDX_INDEX_ID)];                $temp['capital_value'] = $eod->IDX_CAPITAL_VALUE;                $temp['deviation'] = $eod->IDX_DEVIATION;                $temp['percentage_deviation'] = $eod->IDX_PERCENTAGE_DEVIATION;                $temp['date_time'] = date('Y-m-d H:i:s', strtotime($eod->IDX_DATE_TIME));                $temp['index_date'] = $trade_date;                $temp['index_time'] = $index_time;                $dataToSave[] = $temp;                $report[] = $temp['date_time'];            } else {                $notfound[] = $eod;            }        }        pr($report);        //   pr($dataToSave);        //$DataBanksEod->deleteAll(array("1=1"), false);        if (!empty($dataToSave)) {            $IndexValue->saveMany($dataToSave, array('atomic' => true));        }        //pr($symbolList);        // pr($result);        exit;    }    function trades_import($starLimit = 0)    {        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $symbolsResult = $db->get_results("SELECT id,dse_code FROM symbols");        $symbolList = array();        foreach ($symbolsResult as $symbol) {            $symbolList[$symbol->id] = $symbol->dse_code;        }        App::uses('Market', 'Model');        $Market = new Market();//$starLimit=0;        $processPerTransaction = 10000;        // pr($instrumentList);        pr($starLimit);        $result = $db->get_results("SELECT * FROM `trd_index` order by id desc LIMIT $starLimit , $processPerTransaction");        $dataToSave = array();        App::uses('Trade', 'Model');        $Trade = new Trade();        $dataToSave = array();        $report = array();        $notfound = array();        foreach ($result as $eod) {            $trade_date = date('Y-m-d', strtotime($eod->TRD_LM_DATE_TIME));            $index_time = date('H:i', strtotime($eod->TRD_LM_DATE_TIME)); //14:25            $marketRow = $Market->find('all', array(                'conditions' => "Market.trade_date='$trade_date' and Market.exchange_id=1",                'recursive' => -1            ));            $temp = array();            if (empty($marketRow)) {                pr("$trade_date empty or missing ");                $data['trade_date'] = $trade_date;                $data['exchange_id'] = 1;                $data['market_started'] = '10:30:00';                $data['market_closed'] = '14:30:00';                $data['comments'] = 'Market started and closed time is set to default value. It may not be correct all time';                $Market->create();                $Market->save($data);                $temp['market_id'] = $Market->getLastInsertId();            } else {                $temp['market_id'] = $marketRow[0]['Market']['id'];            }            $temp['TRD_SNO'] = $eod->TRD_SNO;            $temp['TRD_TOTAL_TRADES'] = $eod->TRD_TOTAL_TRADES;            $temp['TRD_TOTAL_VOLUME'] = $eod->TRD_TOTAL_VOLUME;            $temp['TRD_TOTAL_VALUE'] = $eod->TRD_TOTAL_VALUE;            $temp['TRD_LM_DATE_TIME'] = date('Y-m-d H:i:s', strtotime($eod->TRD_LM_DATE_TIME));            $temp['trade_date'] = $trade_date;            $temp['trade_time'] = $index_time;            $dataToSave[] = $temp;            $report[] = $temp['TRD_LM_DATE_TIME'];        }        pr($report);        //   pr($dataToSave);        //$DataBanksEod->deleteAll(array("1=1"), false);        if (!empty($dataToSave)) {            $Trade->saveMany($dataToSave, array('atomic' => true));        }        //pr($symbolList);        // pr($result);        exit;    }    function symbols_table_field_import()    {        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $result = $db->get_results("SELECT * FROM `symbols` ");        // pr($result);        App::uses('FundamentalMeta', 'Model');        $FundamentalMeta = new FundamentalMeta();        $dataToSave = array();        foreach ($result[0] as $fname => $data) {            $temp = array();            $temp['fundamental_meta_group_id'] = 1;            $temp['meta_key'] = $fname;            $temp['meta_description'] = $fname;            $dataToSave[] = $temp;        }        if (!empty($dataToSave)) {            $FundamentalMeta->saveMany($dataToSave, array('atomic' => true));        }        pr($dataToSave);        exit;    }    function symbols_table_data_import()    {        Configure::write('debug', 2);        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $result = $db->get_results("SELECT * FROM `symbols` ");        // pr($result);        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        /*  App::uses('Fundamental', 'Model');          $Fundamental = new Fundamental();*/        App::uses('Meta', 'Model');        $Meta = new Meta();        App::uses('Fundamental', 'Model');        $Fundamental = new Fundamental();        $dataToSave = array();        foreach ($result as $row) {            $temp = array();            $instrumentId = $instrumentList[$row->dse_code];            if ($instrumentId)                foreach ($row as $fname => $data) {                    $fundamental_meta = $Meta->find('all', array(                        'conditions' => "Meta.meta_key LIKE '$fname'",                        'recursive' => -1                    ));                    if (!empty($fundamental_meta)) {                        $data = trim($data);                        if (empty($data)) {                            // echo "continue";                            continue;                        }                        $temp['instrument_id'] = $instrumentId;                        $temp['meta_id'] = $fundamental_meta[0]['Meta']['id'];                        $temp['meta_value'] = $data;                        $temp['meta_date'] = '2014-06-30';                        $dataToSave[] = $temp;                    }                }            //  $temp['meta_value'] = $fname;            // $temp['meta_date'] = $fname;        }        //  pr($instrumentList);        //pr($dataToSave);        // exit;        if (!empty($dataToSave)) {            $Fundamental->saveMany($dataToSave, array('atomic' => true));        }        pr($dataToSave);        exit;    }    function news_import($starLimit = 0)    {        //   Configure::write('debug', 2);        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $processPerTransaction = 10000;        pr($starLimit);        $result = $db->get_results("SELECT * FROM `news` order by id desc LIMIT $starLimit , $processPerTransaction");        //  pr($result);//exit;        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        /*  App::uses('Fundamental', 'Model');          $Fundamental = new Fundamental();*/        App::uses('News', 'Model');        $News = new News();        $dataToSave = array();        foreach ($result as $eod) {            if (isset($instrumentList[trim($eod->code)])) {                $instrumentId = $instrumentList[trim($eod->code)];            } else {                $instrumentId = 0; // 0 means news is not dse news            }            $postdate = date('Y-m-d H:i', strtotime($eod->postdate));            $expiredate = date('Y-m-d H:i', strtotime($eod->expiredate)); //14:25            $temp = array();            $temp['instrument_id'] = $instrumentId;            $temp['prefix'] = $eod->code;            $temp['title'] = $eod->title;            $temp['details'] = $eod->details;            $temp['post_date'] = $postdate;            $temp['expire_date'] = $expiredate;            $dataToSave[] = $temp;            $report[] = $temp['date_time'];        }        //  pr($instrumentList);        //pr($dataToSave);        // exit;        if (!empty($dataToSave)) {            $News->saveMany($dataToSave, array('atomic' => true));        }        pr($dataToSave);        exit;    }    function sbsector_intraday_import($starLimit = 0)    {        require_once(APP . 'Vendor' . DS . 'data_import' . DS . 'ez_sql.php');        $processPerTransaction = 10000;        pr($starLimit);        $result = $db->get_results("SELECT * FROM `sbsector_intraday` order by id asc LIMIT $starLimit , $processPerTransaction");         // pr($result);        $StockBangladesh = $this->Components->load('StockBangladesh');        $setorArr = $StockBangladesh->getSectorList(1);        App::uses('SectorIntraday', 'Model');        $SectorIntraday = new SectorIntraday();        App::uses('Market', 'Model');        $Market = new Market();        $dataToSave = array();        $report = array();        foreach ($result as $eod) {            $index_date = date('Y-m-d', strtotime($eod->date_time));            $index_time = date('H:i', strtotime($eod->date_time)); //14:25            $marketRow = $Market->find('all', array(                'conditions' => "Market.trade_date='$index_date' and Market.exchange_id=1",                'recursive' => -1            ));            $temp = array();            if (empty($marketRow)) {                pr("$index_date empty or missing ");                $data['trade_date'] = $index_date;                $data['exchange_id'] = 1;                $data['market_started'] = '10:30:00';                $data['market_closed'] = '14:30:00';                $data['comments'] = 'Market started and closed time is set to default value. It may not be correct all time';                $Market->create();                $Market->save($data);                $temp['market_id'] = $Market->getLastInsertId();            } else {                $temp['market_id'] = $marketRow[0]['Market']['id'];            }            $temp['sector_list_id'] = $setorArr[$eod->sector]['id'];            $temp['index_change'] = $eod->index_change;            $temp['index_change_per'] = $eod->index_change_per;            $temp['price_change'] = $eod->price_change;            $temp['volume'] = $eod->volume;            $temp['contribution'] = $eod->contribution;;            $temp['index_date'] = $index_date;            $temp['index_time'] = $index_time;            if(!isset($temp['sector_list_id']))            {                echo "missing sector=".$eod->sector;                continue;            }            $dataToSave[] = $temp;            $report[] = $eod->id." : ".$eod->date_time;        }        //  pr($instrumentList);        //pr($dataToSave);        //exit;        if (!empty($dataToSave)) {            $SectorIntraday->saveMany($dataToSave, array('atomic' => true));        }       // pr($report);        pr(count($dataToSave));        exit;    }    public function temp()    {      //  Configure::write('debug', 2);       // $StockBangladesh = $this->Components->load('StockBangladesh');       // $t=$StockBangladesh->getLastTradeInfo();       // require_once(APP . 'Vendor' . DS . 'xcrud' . DS . 'xcrud.php');        require_once(APP . 'webroot' . DS . 'xcrud' . DS . 'xcrud.php');        $xcrud = Xcrud::get_instance();        $xcrud->table('metas');        $xcrud->join('meta_group_id','meta_groups','id');        $xcrud->relation('meta_group_id','meta_groups','id','group_key');        $xcrud->columns('id,meta_key,meta_groups.group_key');        $xcrud->benchmark(true);        $xcrud->unset_csv();        //$user_table= $xcrud->render();        $this->set('xcrud',$xcrud);       // pr($t);      //  exit;    }    public function export() {        $data = array(            array('a', 'b', 'c'),            array(1, 2, 3),            array('you', 'and', 'me'),        );        $_serialize = 'data';        $this->viewClass = 'CsvView.Csv';        $this->set(compact('data', '_serialize'));    }    public function adjustData($instrumentIdP=0)    {        //Configure::write('debug', 2);        App::uses('CorporateAction', 'Model');        $CorporateAction = new CorporateAction();        $tradeDate = date('Y-m-d');        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $instrumentList=array();        $instrumentList['DSES']=10003;        $instrumentList['DS30']=10002;        $i=0;        foreach($instrumentList as $instrumentCode=>$instrumentId)        {            /*if($instrumentIdP && $instrumentIdP!=$instrumentId)                continue;*/            /*$corporateActionData = $CorporateAction->find('all', array(                'conditions' => "CorporateAction.adjusted=0 and CorporateAction.active=1 and CorporateAction.instrument_id=$instrumentId",                'recursive' => -1,                'limit' => 10,                'order' => array('CorporateAction.record_date' => 'asc')            ));*/                echo $this->_getAdjustedDailyData($instrumentId, '1999-12-30', $tradeDate, 0);                $CorporateAction->updateAll(                    array('adjusted' => 1),                    array('instrument_id' => $instrumentId)                );                echo "  $instrumentCode completed ********  ";        }        exit;    }    private function _getAdjustedDailyData($instrumentId = 12, $from = '2010-10-25', $to = '2013-04-25', $extraPoint = 0)    {        //  Configure::write('debug', 2);        App::uses('DataBanksEod', 'Model');        require_once(APP . 'Vendor' . DS . 'chartdir' . DS . 'FinanceChart.php');        $DataBanksEod = new DataBanksEod();        $dataBank = $DataBanksEod->find('all', array(            'conditions' => "DataBanksEod.instrument_id=$instrumentId and date BETWEEN '$from' AND '$to'",            'recursive' => -1,            'order' => 'DataBanksEod.date ASC'        ));        if ($extraPoint) {            $dataBankExtra = $DataBanksEod->find('all', array(                'conditions' => "DataBanksEod.instrument_id=$instrumentId and date < '$from'",                'recursive' => -1,                'limit' => $extraPoint,                'order' => 'DataBanksEod.date DESC'            ));            $dataBankExtra = array_reverse($dataBankExtra);            $dataBankall = array_merge($dataBankExtra, $dataBank);        } else {            $dataBankall = $dataBank;        }        $StockBangladesh = $this->Components->load('StockBangladesh');        $metaKey = array();        $metaKey[] = 'face_value';        $faceValueArr = $StockBangladesh->getFundamentalInfo($instrumentId, $metaKey);        App::uses('CorporateAction', 'Model');        $CorporateAction = new CorporateAction();        $corporateActionData = $CorporateAction->find('all', array(            'conditions' => "CorporateAction.instrument_id=$instrumentId and CorporateAction.active=1",            'recursive' => -1,            'order' => array('CorporateAction.record_date' => 'asc')        ));//pr($corporateActionData);        $resultarr = $dataBankall;        // pr($resultarr);        //exit;        foreach ($corporateActionData as $row) {            $action = $row['CorporateAction']['action'];            $adjustedArr = array();            if ($action == 'stockdiv') {                $adjustmentFactor = (100 + $row['CorporateAction']['value']) / 100;                $day = $row['CorporateAction']['record_date'];                //$daystamp= strtotime($day)-24*60*60;                $daystamp = strtotime($day);                foreach ($resultarr as $data) {                    if (strtotime($data['DataBanksEod']['date']) < $daystamp) {                        $data['DataBanksEod']['date'] = $data['DataBanksEod']['date'];                        $data['DataBanksEod']['open'] = $data['DataBanksEod']['open'] / $adjustmentFactor;                        $data['DataBanksEod']['high'] = $data['DataBanksEod']['high'] / $adjustmentFactor;                        $data['DataBanksEod']['low'] = $data['DataBanksEod']['low'] / $adjustmentFactor;                        $data['DataBanksEod']['close'] = $data['DataBanksEod']['close'] / $adjustmentFactor;                        // Notes: In previous version volume is not adjustd                        $data['DataBanksEod']['volume'] = $data['DataBanksEod']['volume'] * $adjustmentFactor;                    }                    $adjustedArr[] = $data;                }                $resultarr = array();                $resultarr = $adjustedArr;            } elseif ($action == 'cashdiv') {                $facevalue = $faceValueArr['face_value']['meta_value'];                $adjustmentFactor = $facevalue * $row['CorporateAction']['value'] / 100;                $day = $row['CorporateAction']['record_date'];                $daystamp = strtotime($day);                foreach ($resultarr as $data) {                    if (strtotime($data['DataBanksEod']['date']) < $daystamp) {                        $data['DataBanksEod']['date'] = $data['DataBanksEod']['date'];                        $data['DataBanksEod']['open'] = $data['DataBanksEod']['open'] - $adjustmentFactor;                        $data['DataBanksEod']['high'] = $data['DataBanksEod']['high'] - $adjustmentFactor;                        $data['DataBanksEod']['low'] = $data['DataBanksEod']['low'] - $adjustmentFactor;                        $data['DataBanksEod']['close'] = $data['DataBanksEod']['close'] - $adjustmentFactor;                    }                    $adjustedArr[] = $data;                }                $resultarr = array();                $resultarr = $adjustedArr;            } elseif ($action == 'rightshare') {                $facevalue = $faceValueArr['face_value']['meta_value'];                $adjustmentFactor = (100 + $row['CorporateAction']['value']) / 100;                $premium = $row['CorporateAction']['premium'];                $day = $row['CorporateAction']['record_date'];                //$daystamp= strtotime($day)-24*60*60;                $daystamp = strtotime($day);                foreach ($resultarr as $data) {                    if (strtotime($data['DataBanksEod']['date']) < $daystamp) {                        $data['DataBanksEod']['date'] = $data['DataBanksEod']['date'];                        $data['DataBanksEod']['open'] = (($data['DataBanksEod']['open'] * 100) + (($premium + $facevalue) * $row['CorporateAction']['value'])) / (100 + $row['CorporateAction']['value']);                        $data['DataBanksEod']['high'] = (($data['DataBanksEod']['high'] * 100) + (($premium + $facevalue) * $row['CorporateAction']['value'])) / (100 + $row['CorporateAction']['value']);                        $data['DataBanksEod']['low'] = (($data['DataBanksEod']['low'] * 100) + (($premium + $facevalue) * $row['CorporateAction']['value'])) / (100 + $row['CorporateAction']['value']);                        $data['DataBanksEod']['close'] = (($data['DataBanksEod']['close'] * 100) + (($premium + $facevalue) * $row['CorporateAction']['value'])) / (100 + $row['CorporateAction']['value']);                        // Notes: In previous version volume is not adjustd                        $data['DataBanksEod']['volume'] = $data['DataBanksEod']['volume'] * $adjustmentFactor;                        /*$data['DataBanksEod']['open']=($data['DataBanksEod']['open']+$close_price_adjustment_factor)/$adjustmentFactor;                        $data['DataBanksEod']['high']=($data['DataBanksEod']['high']+$close_price_adjustment_factor)/$adjustmentFactor;                        $data['DataBanksEod']['low']=($data['DataBanksEod']['low']+$close_price_adjustment_factor)/$adjustmentFactor;                        $data['DataBanksEod']['close']=($data['DataBanksEod']['close']+$close_price_adjustment_factor)/$adjustmentFactor;*/                    }                    $adjustedArr[] = $data;                }                $resultarr = array();                $resultarr = $adjustedArr;            } elseif ($action == 'split') {                $adjustmentFactor = $row['CorporateAction']['value'];                $day = $row['CorporateAction']['record_date'];                //$daystamp= strtotime($day)-24*60*60;                $daystamp = strtotime($day);                foreach ($resultarr as $data) {                    if (strtotime($data['DataBanksEod']['date']) < $daystamp) {                        $data['DataBanksEod']['date'] = $data['DataBanksEod']['date'];                        $data['DataBanksEod']['open'] = $data['DataBanksEod']['open'] / $adjustmentFactor;                        $data['DataBanksEod']['high'] = $data['DataBanksEod']['high'] / $adjustmentFactor;                        $data['DataBanksEod']['low'] = $data['DataBanksEod']['low'] / $adjustmentFactor;                        $data['DataBanksEod']['close'] = $data['DataBanksEod']['close'] / $adjustmentFactor;                        $data['DataBanksEod']['volume'] = $data['DataBanksEod']['volume'] * $adjustmentFactor;                    }                    $adjustedArr[] = $data;                }                $resultarr = array();                $resultarr = $adjustedArr;            }            //print_r($adjustedArr);        }        $dataBankall = $resultarr;        $dataToSave = array();        foreach ($dataBankall as $eod) {            $temp = array();            $temp['id'] = $eod['DataBanksEod']['id'];            $temp['market_id'] = $eod['DataBanksEod']['market_id'];            $temp['instrument_id'] = $instrumentId;            $temp['open'] = $eod['DataBanksEod']['open'];            $temp['high'] = $eod['DataBanksEod']['high'];            $temp['low'] = $eod['DataBanksEod']['low'];            $temp['close'] = $eod['DataBanksEod']['close'];            $temp['volume'] = $eod['DataBanksEod']['volume'];            $temp['trade'] = $eod['DataBanksEod']['trade'];            $temp['tradevalues'] = $eod['DataBanksEod']['tradevalues'];            $temp['date'] = $eod['DataBanksEod']['date'];            $dataToSave[] = $temp;        }//return $dataToSave;        App::uses('DataBanksAdjustedEod', 'Model');        $DataBanksAdjustedEod = new DataBanksAdjustedEod();        if (!empty($dataToSave)) {            //$DataBanksAdjustedEod->deleteAll(array("DataBanksAdjustedEod.instrument_id=$instrumentId"), false);            $DataBanksAdjustedEod->saveMany($dataToSave, array('atomic' => true));        }        //pr($dataBankall);        //    exit;        return count($dataToSave) . " Rows Updated";    }}