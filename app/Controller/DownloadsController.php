<?phpApp::uses('AppController', 'Controller');/** * Instruments Controller * */class DownloadsController extends AppController{    public $components = array(        'RequestHandler' => array(            'viewClassMap' => array('csv' => 'CsvView.Csv')        )    );    public function beforeFilter()    {        parent::beforeFilter();        //$this->Auth->allow('test');        $this->Auth->allow();    }    public function export() {        $data = array(            array('a', 'b', 'c'),            array(1, 2, 3),            array('you', 'and', 'me'),        );        $_serialize = 'data';        $this->response->download('my_file.csv'); // <= setting the file name        $this->viewClass = 'CsvView.Csv';        $this->set(compact('data', '_serialize'));    }    public function dse_data($instrumentId = 12, $from = '2010-10-25', $to = '2013-04-25')    {        $StockBangladesh = $this->Components->load('StockBangladesh');        $this->set('instrumentList', $StockBangladesh->instrumentList(1));    }    public function adjusted_data()    {       // Configure::write('debug', 2);        App::uses('CakeTime', 'Utility');        $StockBangladesh = $this->Components->load('StockBangladesh');      //  pr($this->request->data('shareLists'));        $instrumentList = $StockBangladesh->instrumentList(2);        $instrumentCode='DSEX';  $from=$tradeEndTime = date('Y-m-d', strtotime("-2 years"));  $to=date('Y-m-d');        if($this->request->data('shareList'))        $instrumentCode=$this->request->data('shareList');        if($this->request->data('from'))        $from=$this->request->data('from');        if($this->request->data('to'))        $to=$this->request->data('to');        $adjusted=$this->request->data('adjusted');        $instrumentId=$instrumentList[$instrumentCode];      //  pr("DataBanksAdjustedEod.instrument_id=$instrumentId and date BETWEEN '$from' AND '$to'");    //        exit;       if($adjusted) {           App::uses('DataBanksAdjustedEod', 'Model');           $DataBanksAdjustedEod = new DataBanksAdjustedEod();           $dataBank = $DataBanksAdjustedEod->find('all', array(               'conditions' => "DataBanksAdjustedEod.instrument_id=$instrumentId and date BETWEEN '$from' AND '$to'",               'recursive' => -1,               'order' => 'DataBanksAdjustedEod.date DESC'           ));           $results = array();           foreach ($dataBank as $row) {               $date = $row['DataBanksAdjustedEod']['date'];               $row['DataBanksAdjustedEod']['date'] = CakeTime::format($date, '%Y/%m/%d');               $row['DataBanksAdjustedEod']['code'] = $instrumentCode;               $results[] = $row;           }           $_serialize = 'results';           $_header = array('Code', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume');           $_extract = array('DataBanksAdjustedEod.code', 'DataBanksAdjustedEod.date', 'DataBanksAdjustedEod.open', 'DataBanksAdjustedEod.high', 'DataBanksAdjustedEod.low', 'DataBanksAdjustedEod.close', 'DataBanksAdjustedEod.volume');           $this->response->download("$instrumentCode"."_DailyDataAdjusted_".$to.".csv"); // <= setting the file name           $this->viewClass = 'CsvView.Csv';           $this->set(compact('results', '_serialize', '_header', '_extract'));       }else       {           App::uses('DataBanksEod', 'Model');           $DataBanksEod = new DataBanksEod();           $dataBank = $DataBanksEod->find('all', array(               'conditions' => "DataBanksEod.instrument_id=$instrumentId and date BETWEEN '$from' AND '$to'",               'recursive' => -1,               'order' => 'DataBanksEod.date DESC'           ));           $results = array();           foreach ($dataBank as $row) {               $date = $row['DataBanksEod']['date'];               $row['DataBanksEod']['date'] = CakeTime::format($date, '%Y/%m/%d');               $row['DataBanksEod']['code'] = $instrumentCode;               $results[] = $row;           }           $_serialize = 'results';           $_header = array('Code', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume');           $_extract = array('DataBanksEod.code', 'DataBanksEod.date', 'DataBanksEod.open', 'DataBanksEod.high', 'DataBanksEod.low', 'DataBanksEod.close', 'DataBanksEod.volume');           $this->response->download("$instrumentCode"."_DailyDataNormal_".$to.".csv"); // <= setting the file name           $this->viewClass = 'CsvView.Csv';           $this->set(compact('results', '_serialize', '_header', '_extract'));       }    }    public function all_data($date='2014-11-17',$adjusted=1)    {   //     Configure::write('debug', 2);        App::uses('CakeTime', 'Utility');        $StockBangladesh = $this->Components->load('StockBangladesh');      //  pr($this->request->data('shareLists'));        $instrumentList = $StockBangladesh->instrumentList(3);        $date=trim($date);      //  pr(CakeTime::format($date, '%Y'));$from=CakeTime::format($date, '%Y').'-'.CakeTime::format($date, '%m').'-01';$to=CakeTime::format($date, '%Y').'-'.CakeTime::format($date, '%m').'-31';        $range="$from"."_"."$to";    //    pr($range);    //    exit;        // pr("DataBanksAdjustedEod.date BETWEEN '$from' AND '$to'");       //     exit;       if($adjusted) {           App::uses('DataBanksAdjustedEod', 'Model');           $DataBanksAdjustedEod = new DataBanksAdjustedEod();           $dataBank = $DataBanksAdjustedEod->find('all', array(               'conditions' => "DataBanksAdjustedEod.date BETWEEN '$from' AND '$to'",               'recursive' => -1,               'limit' =>'9000',               'offset'=>0,               'order' => 'DataBanksAdjustedEod.date DESC'           ));           $results = array();           foreach ($dataBank as $row) {               $instrument_id=$row['DataBanksAdjustedEod']['instrument_id'];               $date = $row['DataBanksAdjustedEod']['date'];               $row['DataBanksAdjustedEod']['date'] = CakeTime::format($date, '%Y/%m/%d');               $row['DataBanksAdjustedEod']['code'] = $instrumentList[$instrument_id];               $results[] = $row;           }           $_serialize = 'results';           $_header = array('Code', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume');           $_extract = array('DataBanksAdjustedEod.code', 'DataBanksAdjustedEod.date', 'DataBanksAdjustedEod.open', 'DataBanksAdjustedEod.high', 'DataBanksAdjustedEod.low', 'DataBanksAdjustedEod.close', 'DataBanksAdjustedEod.volume');           $this->response->download("DataAdjusted_".$range.".csv"); // <= setting the file name           $this->viewClass = 'CsvView.Csv';           $this->set(compact('results', '_serialize', '_header', '_extract'));       }else       {           App::uses('DataBanksEod', 'Model');           $DataBanksEod = new DataBanksEod();           $dataBank = $DataBanksEod->find('all', array(               'conditions' => "DataBanksEod.date BETWEEN '$from' AND '$to'",               'recursive' => -1,               'order' => 'DataBanksEod.date DESC'           ));           $results = array();           foreach ($dataBank as $row) {               $instrument_id=$row['DataBanksEod']['instrument_id'];               $date = $row['DataBanksEod']['date'];               $row['DataBanksEod']['date'] = CakeTime::format($date, '%Y/%m/%d');               $row['DataBanksEod']['code'] = $instrumentList[$instrument_id];;               $results[] = $row;           }           $_serialize = 'results';           $_header = array('Code', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume');           $_extract = array('DataBanksEod.code', 'DataBanksEod.date', 'DataBanksEod.open', 'DataBanksEod.high', 'DataBanksEod.low', 'DataBanksEod.close', 'DataBanksEod.volume');           $this->response->download("DataNormal_".$range.".csv"); // <= setting the file name           $this->viewClass = 'CsvView.Csv';           $this->set(compact('results', '_serialize', '_header', '_extract'));       }    }    public function all_data_lastday($adjusted=1)    {      //  Configure::write('debug', 2);        App::uses('CakeTime', 'Utility');        $StockBangladesh = $this->Components->load('StockBangladesh');      //  pr($this->request->data('shareLists'));        $instrumentList = $StockBangladesh->instrumentList(3);        $marketIdArr = $StockBangladesh->getMarketInfo(0,0);        $marketId=$marketIdArr[0]['Market']['id'];$range=$marketIdArr[0]['Market']['trade_date'];        // pr("DataBanksAdjustedEod.date BETWEEN '$from' AND '$to'");       //     exit;       if($adjusted) {           App::uses('DataBanksAdjustedEod', 'Model');           $DataBanksAdjustedEod = new DataBanksAdjustedEod();           $dataBank = $DataBanksAdjustedEod->find('all', array(               'conditions' => "DataBanksAdjustedEod.market_id=$marketId",               'recursive' => -1,               'limit' =>'9000',               'offset'=>0,               'order' => 'DataBanksAdjustedEod.date DESC'           ));           $results = array();           foreach ($dataBank as $row) {               $instrument_id=$row['DataBanksAdjustedEod']['instrument_id'];               $date = $row['DataBanksAdjustedEod']['date'];               $row['DataBanksAdjustedEod']['date'] = CakeTime::format($date, '%Y/%m/%d');               $row['DataBanksAdjustedEod']['code'] = $instrumentList[$instrument_id];               $results[] = $row;           }           $_serialize = 'results';           $_header = array('Code', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume');           $_extract = array('DataBanksAdjustedEod.code', 'DataBanksAdjustedEod.date', 'DataBanksAdjustedEod.open', 'DataBanksAdjustedEod.high', 'DataBanksAdjustedEod.low', 'DataBanksAdjustedEod.close', 'DataBanksAdjustedEod.volume');           $this->response->download("DataAdjusted_".$range.".csv"); // <= setting the file name           $this->viewClass = 'CsvView.Csv';           $this->set(compact('results', '_serialize', '_header', '_extract'));       }else       {           App::uses('DataBanksEod', 'Model');           $DataBanksEod = new DataBanksEod();           $dataBank = $DataBanksEod->find('all', array(               'conditions' => "DataBanksEod.market_id=$marketId",               'recursive' => -1,               'order' => 'DataBanksEod.date DESC'           ));           $results = array();           foreach ($dataBank as $row) {               $instrument_id=$row['DataBanksEod']['instrument_id'];               $date = $row['DataBanksEod']['date'];               $row['DataBanksEod']['date'] = CakeTime::format($date, '%Y/%m/%d');               $row['DataBanksEod']['code'] = $instrumentList[$instrument_id];;               $results[] = $row;           }           $_serialize = 'results';           $_header = array('Code', 'Date', 'Open', 'High', 'Low', 'Close', 'Volume');           $_extract = array('DataBanksEod.code', 'DataBanksEod.date', 'DataBanksEod.open', 'DataBanksEod.high', 'DataBanksEod.low', 'DataBanksEod.close', 'DataBanksEod.volume');           $this->response->download("DataNormal_".$range.".csv"); // <= setting the file name           $this->viewClass = 'CsvView.Csv';           $this->set(compact('results', '_serialize', '_header', '_extract'));       }    }    function scan_dir($dir)    {        $ignored = array('.', '..', '.svn', '.htaccess');        $files = array();        foreach (scandir($dir) as $file) {            if (in_array($file, $ignored)) continue;            $files[$file] = filemtime($dir . '/' . $file);        }        arsort($files);        $files = array_keys($files);        return ($files) ? $files : false;    }    public function execute_report()    {       // Configure::write('debug', 3);       /* App::uses('Broker', 'Model');        $Broker = new Broker();        $broker_id = $this->Auth->user('broker_id');        $brokerInfo = $Broker->findById($broker_id);        $execute_report_upload_time = $brokerInfo['Broker']['execute_report_upload_time'];*/        $dir = 'apex/execute';        $fileArr = $this->scan_dir($dir);        $reportFile='nofile.xls';        if(isset($fileArr[0]))        $reportFile = $fileArr[0];        $filename="$dir/$reportFile";        $ext = pathinfo($filename, PATHINFO_EXTENSION);        pr($ext);        if (file_exists($filename)) {            App::uses('CakeTime', 'Utility');            echo "$filename was last uploaded at :  <h2> " . CakeTime::nice(date ("F d Y H:i:s.", filemtime($filename)))." </h2> ";            echo "<h3>".CakeTime::timeAgoInWords(date ("F d Y H:i:s.", filemtime($filename)))." </h3> ";            $rt=Router::url('/', true)."Downloads/all_orders_report2";            echo "<br /><a target='_blank' href='$rt'><h3>Run Script</h3></a> <br />";        }else        {            echo "There is no file uploaded";        }        exit;    }    public function all_orders_report2()    {        Configure::write('debug', 3);        $brokerId = 11;        App::uses('Broker', 'Model');        $Broker = new Broker();        //$broker_id = $this->Auth->user('broker_id');        $broker_id=$brokerId;        $brokerInfo = $Broker->findById($broker_id);        $prev_execute_report_str = $brokerInfo['Broker']['execute_report'];        App::uses('CakeTime', 'Utility');        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'Order.created');        App::uses('Order', 'Model');        $Order = new Order();        $allOrdersInfo = $Order->find('all', array(            'conditions' => "User.broker_id=$brokerId and $tradeDateCondition /*and Order.dse_order_id IS NULL*/",            'contain' => 'User.broker_id',            'recursive' => -1        ));        $dir = 'apex/execute';        $fileArr = $this->scan_dir($dir);        $reportFile = $fileArr[0];        $reportFilePath="$dir/$reportFile";        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');       /* $objPHPExcel = new PHPExcel();        $objReader = new PHPExcel_Reader_Excel5();        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load("$dir/$reportFile");*/        $inputFileType = PHPExcel_IOFactory::identify($reportFilePath);        $objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load($reportFilePath);        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row) {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false); // Loop all cells, even if it is not set         //   if (1 == $row->getRowIndex()) continue;//skip first row            $rowIndex = $row->getRowIndex();            //$array_data[$rowIndex] = array('A'=>'', 'B'=>'','C'=>'','D'=>'');            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $array_data[$rowIndex]['client_id'] = $cell->getCalculatedValue();                } else if ('B' == $cell->getColumn()) {                    $array_data[$rowIndex]['instrument_code'] = $cell->getCalculatedValue();                } else if ('C' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_type'] = $cell->getCalculatedValue();                } else if ('D' == $cell->getColumn()) {                    $order_qty=$cell->getCalculatedValue();                    $order_qty = preg_replace('/\s+/', '', $order_qty);                    $array_data[$rowIndex]['order_qty'] = $order_qty;                } else if ('E' == $cell->getColumn()) {                    $avg_price=$cell->getCalculatedValue();                    if(empty($avg_price))                        $avg_price=0.00;                    else                        $avg_price = preg_replace('/\s+/', '', $avg_price);                    $array_data[$rowIndex]['avg_price'] =$avg_price;                } else if ('F' == $cell->getColumn()) {                    $executed_qty=$cell->getCalculatedValue();                    $executed_qty = preg_replace('/\s+/', '', $executed_qty);                    $array_data[$rowIndex]['executed_qty'] = $executed_qty;                } else if ('G' == $cell->getColumn()) {                    $array_data[$rowIndex]['status'] = trim($cell->getCalculatedValue());                } else if ('H' == $cell->getColumn()) {                    $array_data[$rowIndex]['sub_status'] = $cell->getCalculatedValue();                } else if ('I' == $cell->getColumn()) {                    $remaining_qty=$cell->getCalculatedValue();                    $remaining_qty = preg_replace('/\s+/', '', $remaining_qty);                    $array_data[$rowIndex]['remaining_qty'] = $remaining_qty;                } else if ('J' == $cell->getColumn()) {                    //$array_data[$rowIndex]['created'] = trim($cell->getValue());                    $array_data[$rowIndex]['created'] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'h:i:s');                } else if ('K' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_date'] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'dd-mm-YYYY');                }                else if ('L' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_id'] = trim($cell->getCalculatedValue());                }            }        }        $paternArray= array        (            'client_id' => 'Client A/C',            'instrument_code' => 'Name',            'order_type' => 'Side',            'order_qty' => 'SentQty',            'avg_price' => 'Limit',            'executed_qty' => 'ExecQty',            'status' => 'Status',            'sub_status' => 'SubStatus',            'remaining_qty' => 'RemQty',            'created' => 'Date/Time',            'order_date' => 'Date',            'order_id' => 'OrderID',        );        if ($array_data[1] !== $paternArray)//chk order        {            echo"File Column order is not in correct format.";            echo "Expected File Order Is: Client A/C => Name=> Side => SentQty => Limit => ExecQty => Status => SubStatus => RemQty => Date/Time => Date";            exit;        }        echo "<h3>today is:</h3>".date('d-m-Y');        echo "<br>";        echo "<h3>file date is:</h3>".$array_data[2]['order_date'];        echo "<br>";        if($array_data[2]['order_date'] != date('d-m-Y'))        {            echo "<br>";            echo "<h2>this is not today's file.please recheck and upload the correct file again</h2>";            exit;        }        $validTransactionArr = array();        foreach ($array_data as $eachRow) {            $col_c = trim($eachRow['order_qty']);            if ($col_c != '') {                $validTransactionArr[] = $eachRow;            }        }        unset($validTransactionArr[0]);        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1);        $brokerUsers = array();        foreach ($userList[$brokerId] as $irn => $arr) {            $key = trim($irn);            $key = str_pad($key, 5, "0", STR_PAD_LEFT);            $key = strtoupper($key);            $brokerUsers[$key] = $arr;        }        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'ReportLog.date_time');        $ReportLog = ClassRegistry::init('ReportLog');        $todayReportLog = $ReportLog->find('all', array(            'conditions' => "ReportLog.broker_id=$broker_id and $tradeDateCondition",            'recursive' => -1        ));        $todayReportLog=Hash::combine($todayReportLog, '{n}.ReportLog.dse_order_id', '{n}.ReportLog');        $dataToSaveInReportLog=array();        $new_transaction_count=count($validTransactionArr);        $prev_transaction_count=count($todayReportLog);        //$prev_transaction_report_arr set to null by runTradeIns        if($new_transaction_count<$prev_transaction_count) {            echo "New file ($new_transaction_count) has less transaction than previous file($prev_transaction_count)";            exit;        }        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $dataToSave=array();        $dataToSaveInPortfolioTransaction=array();        $i=0;        foreach($validTransactionArr as $trans)        {            $temp=array();            $temp2=array();            $tempPT=array();            $tempReportLog=array();            $irn=$trans['client_id'];            $sub_status=trim($trans['sub_status']);            $status=trim($trans['status']);            $user_id=$portfolio_id=0;            if(isset($brokerUsers[$irn]['portfolio_id']))            {                $portfolio_id=$user_id=$brokerUsers[$irn]['portfolio_id'];                $broker_fee=$brokerUsers[$irn]['broker_fee'];            }            $order_type=$trans['order_type'];            $remaining_qty=$trans['remaining_qty'];            $order_qty=$trans['order_qty'];            $avg_price=$trans['avg_price'];            $executed_qty=$trans['executed_qty'];            $created=$trans['created'];            $today=date('Y-m-d');            $created="$today $created";            $created = date("Y-m-d H:i:s", strtotime("$created +4 hours"));            //$created = date("Y-m-d H:i:s", strtotime("$created +5 hours"));         //   $later = strtotime("+6 hours", $created);          //  $created=date('Y-m-d H:i:s', $later);            $instrument_code=trim($trans['instrument_code']);            $instrument_id=$instrumentList[$instrument_code];            $price_type='fixed';            $rate=$trans['avg_price'];            $dse_order_id=$trans['order_id'];            if(trim($trans['order_type'])=='Sell')            {                $order_type=2;            }else            {                $order_type=1;            }          //  $temp['temp_id']=$i;            $temp['user_id']=$portfolio_id;            $temp['order_type']=$order_type;            $temp['instrument_id']=$instrument_id;            $temp['partial_amount']=0;            $temp['price_type']=$price_type;            $temp['rate']=$rate;            $temp['rate_start_range']=$rate;            $temp['rate_end_range']=$rate;            $temp['created']=$created;            $temp['dse_order_id']=$dse_order_id;            $tempPT['portfolio_id']=$portfolio_id;            $tempPT['instrument_id']=$instrument_id;            $tempPT['transaction_type_id']=$order_type;            $tempPT['amount']=0;            $tempPT['rate']=$rate;            $tempPT['transaction_time']=$created;            $tempPT['commission']=$broker_fee;            $tempPT['parent_id']=0;            $tempPT['dse_execution_id']='temp';            if(isset($todayReportLog[$dse_order_id])) //  if this order is already in database            {                // we are updating only here                // Checking if anything changed                if($todayReportLog[$dse_order_id]['status']!=$status or $todayReportLog[$dse_order_id]['sub_status']!=$sub_status or $todayReportLog[$dse_order_id]['executed_qty']!=$executed_qty)                {                    $todayReportLog[$dse_order_id]['is_changed']=1;                    $todayReportLog[$dse_order_id]['email_sent']=0; // resetting email sent to 0 so that we resend email with updated information                }else                {                    $todayReportLog[$dse_order_id]['is_changed']=0;                }                $tempReportLog=$todayReportLog[$dse_order_id];                $tempReportLog['order_qty']=$order_qty;                $tempReportLog['executed_qty']=$executed_qty;                $tempReportLog['avg_price']=$avg_price;                $tempReportLog['status']=$status;                $tempReportLog['sub_status']=$sub_status;            }            else            {                // inserting new row of order                $tempReportLog['irn']=$irn;                $tempReportLog['instrument_code']=$instrument_code;                $tempReportLog['date_time']=$created;                $tempReportLog['dse_order_id']=$dse_order_id;                $tempReportLog['broker_id']=$brokerId;                $tempReportLog['order_qty']=$order_qty;                $tempReportLog['order_type']=$trans['order_type'];                $tempReportLog['executed_qty']=$executed_qty;                $tempReportLog['avg_price']=$avg_price;                $tempReportLog['status']=$status;                $tempReportLog['sub_status']=$sub_status;                $tempReportLog['email_sent']=0;                $tempReportLog['sms_sent']=0;                $tempReportLog['is_changed']=1;            }            $dataToSaveInReportLog[]=$tempReportLog;            $partial_executed=0;            if($sub_status=='New') {  // new locked order                $temp['amount']=$order_qty;                $temp['order_status']='locked';            }            if($sub_status=='Filled') {  // full executed                $temp['amount']=$executed_qty;                $temp['order_status']='executed';                $tempPT['amount']=$executed_qty;            }            if($sub_status=='Partially filled') {  // partial executed executed                $temp['amount']=$executed_qty;                $temp['order_status']='executed';                $tempPT['amount']=$executed_qty;                $temp2=$temp;                $temp2['amount']=$remaining_qty;                $temp2['order_status']='locked';            }            if($sub_status=='Canceled') {  // Order cancel                if($executed_qty) { // if any share executed before withdraw/cancel                    $temp['amount'] = $executed_qty;                    $temp['order_status'] = 'executed';                    $tempPT['amount']=$executed_qty;                }            }            if($sub_status=='Replaced') {  // Order modified                if($executed_qty) { // if any share executed before modified                    $temp['amount'] = $executed_qty;                    $temp['order_status'] = 'executed';                    $tempPT['amount']=$executed_qty;                }            }            if($tempPT['amount'] && $tempPT['portfolio_id'])            $dataToSaveInPortfolioTransaction[]=$tempPT;            if(isset($temp['amount']) && $temp['user_id'])            $dataToSave[]=$temp;            if(!empty($temp2))            {                $dataToSave[]=$temp2;  // storing another row to insert            }            $i++;        }        //  pr($dataToSaveInReportLog);        $updateReportLog=$this->generateReport2($dataToSaveInReportLog,$brokerUsers,'Apex');        if (count($updateReportLog)) {            // saving report log            $ReportLog->saveMany($updateReportLog, array('atomic' => true));        }        $allOrders = $Omo->get_broker_orders($allOrdersInfo, $brokerId);        $allLockedOrder = $allOrders['locked'];        $allExecutedOrder = $allOrders['executed'];        $allDeletedOrder = $allOrders['delete'];        $allOrderToReplace=array();        /* We will remove all lock,execute order and reinsert them from excel*/        $allOrderToReplace=array_merge($allOrderToReplace,$allLockedOrder);        $allOrderToReplace=array_merge($allOrderToReplace,$allExecutedOrder);     //   $allOrderToReplace=array_merge($allOrderToReplace,$allDeletedOrder);        $orderIdArrToDelete=Hash::extract($allOrderToReplace, '{n}.id');        $lockedOrders = Hash::extract($dataToSave, '{n}[order_status=locked].order_status');        $ExecutedOrders = Hash::extract($dataToSave, '{n}[order_status=executed].order_status');        $totalLock=count($lockedOrders);        $totalExecuted=count($ExecutedOrders);        echo "<br />Total Locked order=$totalLock";        echo "<br /> Total Executed order=$totalExecuted";       // $Order->query("INSERT INTO orders_backup SELECT * FROM orders");       /* $orders_backup = ClassRegistry::init('orders_backup');        $backup_orders=$Order->find('all',array('conditions'=>array('Order.id'=>$orderIdArrToDelete)));        $orders_backup->saveMany($backup_orders, array('atomic' => true));*/        // first delete all existing order        $Order->deleteAll(array('Order.id' => $orderIdArrToDelete), false);        // re insert order        if (count($dataToSave)) {            $Order->saveMany($dataToSave, array('atomic' => true));        }        // delete all todays portfolio transaction        $model = ClassRegistry::init('PortfolioTransaction');        $model->deleteAll("Portfolio.broker=$brokerId and PortfolioTransaction.dse_execution_id  LIKE  'temp'", false);        if (count($dataToSaveInPortfolioTransaction)) {            $model->saveMany($dataToSaveInPortfolioTransaction, array('atomic' => true));        }        // deleting all existing file       /* $dir = 'apex/execute/*';        $files = glob($dir); // get all file names        foreach($files as $file){ // iterate files            if(is_file($file))                unlink($file); // delete file        }*/        exit;    }    public function generateReport2($dataToSaveInReportLog,$brokerUsers,$broker='Apex')    {        App::uses('CakeEmail', 'Network/Email');        $email  = new CakeEmail('smtp');        $dataToSave=array();        $delivery_report='Email report sent to: <br />';        $sms_report='SMS sent to: <br />';        $i=0;        foreach($dataToSaveInReportLog as $row)        {            $irn=$row['irn'];            $upperIrn=strtoupper($irn);            if(isset($brokerUsers[$irn]['email']))            {                $useremail=trim($brokerUsers[$irn]['email']);                $mobile_no=trim($brokerUsers[$irn]['mobile_no']);                $mobile_no=str_replace('+','',$mobile_no);                $instrument_code=$row['instrument_code'];                $dse_order_id=$row['dse_order_id'];                $order_qty=$row['order_qty'];                $executed_qty=$row['executed_qty'];                $avg_price=$row['avg_price'];                $avg_price=number_format($avg_price, 2, '.', '');                $order_type=$row['order_type'];                $status=$row['status'];                $sms_sent=$row['sms_sent'];                $sub_status=$row['sub_status'];                $is_changed=$row['is_changed'];                $emailContent='Dear investor,<br />';                $emailContent.='Here is the update of your order<br /><br />';                $emailContent.="BO Code: $upperIrn <br/>";                $emailContent.="===================== <br/>";                $emailContent.="<b>$instrument_code $order_type</b><br/><br/>";                $emailContent.="Order id: $dse_order_id <br/>";                $emailContent.="Status: <b>$sub_status</b><br/>";                $emailContent.="Order quantity: $order_qty <br/>";                $emailContent.="Executed quantity: $executed_qty <br/>";                $emailContent.="Order price: $avg_price <br/>";                $emailContent.="<br/>";                $emailContent.="<br/>";                $emailContent.="Thanks for trading with us <br/><br/>";                $emailContent.="    --- StockBangladesh OMO Team <br/>";                //$useremail='afmsohail@gmail.com'; // for debug                if($is_changed)  // send only if changed                {                   // CakeEmail::deliver($useremail, "$instrument_code $order_type order update : $sub_status", "$emailContent", array('from' => array('info@stockbangladesh.com' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                    $email->to("$useremail")                        ->subject("$instrument_code $order_type order update : $sub_status")                        ->emailFormat('html')                        ->send("$emailContent");                    if($i==0) {                        //for debug only                     //   CakeEmail::deliver('afmsohail@gmail.com', "$instrument_code $order_type order update : $sub_status", "$emailContent", array('from' => array('info@stockbangladesh.com' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                        $i++;                    }                    $delivery_report.="$useremail<br/>";                }                $StockBangladesh = $this->Components->load('StockBangladesh');                $instrumentList = $StockBangladesh->instrumentList(2);                $enableSMS=1;                $tradeValue=$avg_price*$order_qty;               // if($broker=='Apex') // SMS only enabled for Apex right now                if($enableSMS && $status=='Done' && $sms_sent==0 && $tradeValue>9999)                {                    if(is_numeric($mobile_no)) {                        $text="$order_qty $instrument_code $order_type Completed. BO code: $upperIrn. Avg Cost $avg_price Tk. Wish You Happy Trading. StockBangladesh OMO. Phone: 028189296";                        //$text="$order_qty $instrument_code $order_type Order Completed For $upperIrn. Wish You Happy Trading. StockBangladesh OMO. Phone: 028189296";                        $l=strlen($text);                        //$text_encoded=urlencode($text);                        echo "Code: $upperIrn mobile no: $mobile_no text: $text <br/>";                        $sms_report.= "Code: $upperIrn mobile no: $mobile_no text: $text <br/>";                        $StockBangladesh->send_sms($mobile_no, $text);                        //$response = file_get_contents("http://api.mimsms.com/api/sendsms/plain?user=hostingbd&password=UmThGy69&sender=StockBD&SMSText=$text_encoded&GSM=$mobile_no");                        //$response = file_get_contents("http://route1n.digitalmarketingplus.net/api/sendsms/plain?user=stockbangladesh1&password=g4NbqNWa&sender=StockBD&SMSText=$text_encoded&GSM=$mobile_no");                        //$response = file_get_contents("http://user.circlesms.com/api/sendsms/plain?user=hostingbd2&password=T5BRKujm&sender=StockBD&SMSText=$text_encoded&GSM=$mobile_no");                        //$response = file_get_contents("http://route1.circleplusbd.com/api/sendsms/plain?user=hostingbd2&password=T5BRKujm&sender=StockBD&SMSText=$text_encoded&GSM=$mobile_no");                        //$response = file_get_contents("http://cloud.circlesms.com/app/smsapi/index.php?key=4596704959D1AC&routeid=100015&type=text&contacts=$mobile_no&senderid=SB&msg=$text_encoded");                        //http://route1n.digitalmarketingplus.net/api/command?user=stockbangladesh1&password=g4NbqNWa&cmd=Credits                        //http://api.mimsms.com/api/command?user=hostingbd&password=UmThGy69&cmd=Credits                        //http://user.circlesms.com/api/command?user=hostingbd2&password=T5BRKujm&cmd=Credits                    }                    $row['sms_sent']=1;                }            }            $dataToSave[]=$row;        }       /* $email->to('afmsohail@gmail.com')            ->subject("Execute report of $broker")            ->send("$delivery_report $sms_report");*/        echo $delivery_report;      // CakeEmail::deliver('afmsohail@gmail.com', "Execute report of $broker", "$delivery_report $sms_report", array('from' => array('info@stockbangladesh.com' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));      //  file_get_contents("http://api.mimsms.com/api/sendsms/plain?user=hostingbd&password=UmThGy69&sender=StockBD&SMSText=$text_encoded&GSM=8801552573043");        return $dataToSave;    }    public function sendSMS($dataToSaveInReportLog,$brokerUsers)    {        Configure::write('debug', 2);        //$response = file_get_contents('http://api.mimsms.com/api/sendsms/plain?user=hostingbd&password=UmThGy69&sender=StockBD&SMSText=TestMessage&GSM=8801552573043');        $text="55555 CENTRALPHL Sell Order Completed For H005. Avg Cost 1223.45 Tk. Wish You Happy Trading. StockBangladesh OMO.8189296";        $text=urlencode($text);        $response = file_get_contents("http://api.mimsms.com/api/sendsms/plain?user=hostingbd&password=UmThGy69&sender=StockBD&SMSText=$text&GSM=8801552573043");        //http://route1n.digitalmarketingplus.net/api/sendsms/plain?user=stockbangladesh&password=ZRvqhALF&sender=StockBD&SMSText=12345%20CENTRALPHL%20Sell%20Order%20Completed%20For%20H005.%20Avg%20Cost%201223.45%20Tk.%20Wish%20You%20Happy%20Trading.%20StockBangladesh%20OMO.8189296&GSM=8801552573043        $response = json_decode($response);        pr($response);        exit;    }    /////////////////////////////////////////////////////////////for Hac broker House//////////////////////////////////////////////////////////////////////    public function execute_report_hac()    {        Configure::write('debug', 2);        $dir = Configure::read('broker.hac.execute_file_path');        $fileArr = $this->scan_dir($dir);        // $reportFile='nofile.xls';        if(isset($fileArr[0]))            $reportFile = $fileArr[0];        $filename="$dir/$reportFile";        $ext = pathinfo($filename, PATHINFO_EXTENSION);        if (file_exists($filename)) {            App::uses('CakeTime', 'Utility');            echo "$filename was last uploaded at :  <h2> " . CakeTime::nice(date ("F d Y H:i:s.", filemtime($filename)))." </h2> ";            echo "<h3>".CakeTime::timeAgoInWords(date ("F d Y H:i:s.", filemtime($filename)))." </h3> ";            $rt=Router::url('/', true)."Downloads/all_orders_report2_hac";            echo "<br /><a target='_blank' href='$rt'><h3>Run Script</h3></a> <br />";        }else        {            echo "There is no file uploaded";        }        exit;    }    public function all_orders_report2_hac()    {        Configure::write('debug', 2);        App::uses('Broker', 'Model');        $Broker = new Broker();        $broker_id = $this->Auth->user('broker_id');        $brokerInfo = $Broker->findById($broker_id);        $prev_execute_report_str = $brokerInfo['Broker']['execute_report'];        App::uses('CakeTime', 'Utility');        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'Order.created');        App::uses('Order', 'Model');        $Order = new Order();        $allOrdersInfo = $Order->find('all', array(            'conditions' => "User.broker_id=$broker_id and $tradeDateCondition",            'contain' => 'User.broker_id',            'recursive' => -1        ));        $execute_file_path =  Configure::read('broker.hac.execute_file_path');        $fileArr = $this->scan_dir($execute_file_path);        $reportFile = $fileArr[0];        $reportFilePath="$execute_file_path/$reportFile";        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $inputFileType = PHPExcel_IOFactory::identify($reportFilePath);        $objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load($reportFilePath);        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row)        {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false);// Loop all cells, even if it is not set            $rowIndex = $row->getRowIndex();            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $array_data[$rowIndex]['client_id'] = $cell->getCalculatedValue();                } else if ('B' == $cell->getColumn()) {                    $array_data[$rowIndex]['instrument_code'] = $cell->getCalculatedValue();                } else if ('C' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_type'] = $cell->getCalculatedValue();                } else if ('D' == $cell->getColumn()) {                    $order_qty = $cell->getCalculatedValue();                    $order_qty = preg_replace('/\s+/', '', $order_qty);                    $array_data[$rowIndex]['order_qty'] = $order_qty;                } else if ('E' == $cell->getColumn()) {                    $avg_price = $cell->getCalculatedValue();                    if(empty($avg_price))                        $avg_price = 0.00;                    else                        $avg_price = preg_replace('/\s+/', '', $avg_price);                    $array_data[$rowIndex]['avg_price'] = $avg_price;                } else if ('F' == $cell->getColumn()) {                    $executed_qty = $cell->getCalculatedValue();                    $executed_qty = preg_replace('/\s+/', '', $executed_qty);                    $array_data[$rowIndex]['executed_qty'] = $executed_qty;                } else if ('G' == $cell->getColumn()) {                    $array_data[$rowIndex]['status'] = trim($cell->getCalculatedValue());                } else if ('H' == $cell->getColumn()) {                    $array_data[$rowIndex]['sub_status'] = $cell->getCalculatedValue();                } else if ('I' == $cell->getColumn()) {                    $remaining_qty = $cell->getCalculatedValue();                    $remaining_qty = preg_replace('/\s+/', '', $remaining_qty);                    $array_data[$rowIndex]['remaining_qty'] = $remaining_qty;                } else if ('J' == $cell->getColumn()) {                    //$array_data[$rowIndex]['created'] = trim($cell->getValue());                    $array_data[$rowIndex]['execVal'] = trim($cell->getCalculatedValue());                } else if ('K' == $cell->getColumn()) {                    //$array_data[$rowIndex]['created'] = trim($cell->getValue());                    $array_data[$rowIndex]['created'] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'h:i:s');                } else if ('L' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_id'] = trim($cell->getCalculatedValue());                } else if ('M' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_date'] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'dd-mm-YYYY');                }            }        }        $paternArray= array        (            'client_id' => 'Client A/C',            'instrument_code' => 'Name',            'order_type' => 'Side',            'order_qty' => 'SentQty',            'avg_price' => 'Limit',            'executed_qty' => 'ExecQty',            'status' => 'Status',            'sub_status' => 'SubStatus',            'remaining_qty' => 'RemQty',            'execVal' => 'ExecVal',            'created' => 'Date/Time',            'order_id' => 'OrderID',            'order_date' => 'Date'        );        if ($array_data[1] !== $paternArray)//chk order        {            echo"File Column order is not in correct format.";            echo "Expected File Order Is: Client A/C => Name=> Side => SentQty => Limit => ExecQty => Status => SubStatus => RemQty => ExecVal => Date/Time => OrderID => Date";            exit;        }        echo "<h3>today is:</h3>".date('d-m-Y');        echo "<br>";        echo "<h3>file date is:</h3>".$array_data[2]['order_date'];        echo "<br>";        if($array_data[2]['order_date'] != date('d-m-Y'))        {            echo "<br>";            echo "<h2>this is not today's file.please recheck and upload the correct file again</h2>";            exit;        }        $validTransactionArr = array();        foreach ($array_data as $eachRow) {            $col_c = trim($eachRow['order_qty']);            if ($col_c != '') {                $validTransactionArr[] = $eachRow;            }        }        unset($validTransactionArr[0]);        //$validTransactionArr = Hash::sort($validTransactionArr, "{n}.avg_price", 'ASC');        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1);        $brokerUsers = array();        foreach ($userList[$broker_id] as $irn => $arr) {            $key = trim($irn);            $key = str_pad($key, 5, "0", STR_PAD_LEFT);            $key = strtoupper($key);            $brokerUsers[$key] = $arr;        }        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'ReportLog.date_time');        $ReportLog = ClassRegistry::init('ReportLog');        $todayReportLog = $ReportLog->find('all', array(            'conditions' => "ReportLog.broker_id=$broker_id and $tradeDateCondition",            'recursive' => -1        ));        $todayReportLog=Hash::combine($todayReportLog, '{n}.ReportLog.dse_order_id', '{n}.ReportLog');        $dataToSaveInReportLog=array();        $new_transaction_count=count($validTransactionArr);        $prev_transaction_count=count($todayReportLog);        if($new_transaction_count<$prev_transaction_count) {            $difference=($prev_transaction_count)-($new_transaction_count);            echo "New file has $difference less transactions than previous file";            exit;        }        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $dataToSave=array();        $dataToSaveInPortfolioTransaction=array();        $i=0;        foreach($validTransactionArr as $trans)        {            $temp=array();            $temp2=array();            $tempPT=array();            $irn=$trans['client_id'];            $irn = str_pad($irn, 5, "0", STR_PAD_LEFT);            $sub_status=trim($trans['sub_status']);            $status=trim($trans['status']);            $user_id=$portfolio_id=0;                        if(isset($brokerUsers[$irn]['portfolio_id']))            {                $portfolio_id=$user_id=$brokerUsers[$irn]['portfolio_id'];                $broker_fee=$brokerUsers[$irn]['broker_fee'];            }            $remaining_qty=$trans['remaining_qty'];            $order_qty=$trans['order_qty'];            $executed_qty=$trans['executed_qty'];            $avg_price=$trans['avg_price'];            $created=$trans['created'];            $today=date('Y-m-d');            $created="$today $created";            //$created = date("Y-m-d H:i:s", strtotime("$created +5 hours"));            $created = date("Y-m-d H:i:s", strtotime("$created +4 hours"));            //   $later = strtotime("+6 hours", $created);            //  $created=date('Y-m-d H:i:s', $later);            $instrument_code=trim($trans['instrument_code']);            $instrument_id=$instrumentList[$instrument_code];            $price_type='fixed';            $rate=$trans['avg_price'];            $dse_order_id=$trans['order_id'];            if(trim($trans['order_type'])=='Sell')            {                $order_type=2;            }else            {                $order_type=1;            }            //  $temp['temp_id']=$i;            $temp['user_id']=$portfolio_id;            $temp['order_type']=$order_type;            $temp['instrument_id']=$instrument_id;            $temp['partial_amount']=0;            $temp['price_type']=$price_type;            $temp['rate']=$rate;            $temp['rate_start_range']=$rate;            $temp['rate_end_range']=$rate;            $temp['created']=$created;            $temp['dse_order_id']=$dse_order_id;            $tempPT['portfolio_id']=$portfolio_id;            $tempPT['instrument_id']=$instrument_id;            $tempPT['transaction_type_id']=$order_type;            $tempPT['amount']=0;            $tempPT['rate']=$rate;            $tempPT['transaction_time']=$created;            $tempPT['commission']=$broker_fee;            $tempPT['parent_id']=0;            $tempPT['dse_execution_id']='temp';            if(isset($todayReportLog[$dse_order_id])) //  if this order is already in database            {                // we are updating only here                // Checking if anything changed                if($todayReportLog[$dse_order_id]['status']!=$status or $todayReportLog[$dse_order_id]['sub_status']!=$sub_status or $todayReportLog[$dse_order_id]['executed_qty']!=$executed_qty)                {                    $todayReportLog[$dse_order_id]['is_changed']=1;                    $todayReportLog[$dse_order_id]['email_sent']=0; // resetting email sent to 0 so that we resend email with updated information                }else                {                    $todayReportLog[$dse_order_id]['is_changed']=0;                }                $tempReportLog=$todayReportLog[$dse_order_id];                $tempReportLog['order_qty']=$order_qty;                $tempReportLog['executed_qty']=$executed_qty;                $tempReportLog['avg_price']=$avg_price;                $tempReportLog['status']=$status;                $tempReportLog['sub_status']=$sub_status;            }            else            {                // inserting new row of order                $tempReportLog['irn']=$irn;                $tempReportLog['instrument_code']=$instrument_code;                $tempReportLog['date_time']=$created;                $tempReportLog['dse_order_id']=$dse_order_id;                $tempReportLog['broker_id']=$broker_id;                $tempReportLog['order_qty']=$order_qty;                $tempReportLog['order_type']=$trans['order_type'];                $tempReportLog['executed_qty']=$executed_qty;                $tempReportLog['avg_price']=$avg_price;                $tempReportLog['status']=$status;                $tempReportLog['sub_status']=$sub_status;                $tempReportLog['email_sent']=0;                $tempReportLog['sms_sent']=0;                $tempReportLog['is_changed']=1;            }           $dataToSaveInReportLog[]=$tempReportLog;            $partial_executed=0;            if($sub_status=='New') {  // new locked order                $temp['amount']=$order_qty;                $temp['order_status']='locked';            }            if($sub_status=='Filled') {  // full executed                $temp['amount']=$executed_qty;                $temp['order_status']='executed';                $tempPT['amount']=$executed_qty;            }            if($sub_status=='Partially filled') {  // partial executed executed                $temp['amount']=$executed_qty;                $temp['order_status']='executed';                $tempPT['amount']=$executed_qty;                $temp2=$temp;                $temp2['amount']=$remaining_qty;                $temp2['order_status']='locked';            }            if($sub_status=='Canceled') {  // Order cancel                if($executed_qty) { // if any share executed before withdraw/cancel                    $temp['amount'] = $executed_qty;                    $temp['order_status'] = 'executed';                    $tempPT['amount']=$executed_qty;                }            }            if($sub_status=='Replaced') {  // Order modified                if($executed_qty) { // if any share executed before modified                    $temp['amount'] = $executed_qty;                    $temp['order_status'] = 'executed';                    $tempPT['amount']=$executed_qty;                }            }            if($tempPT['amount'] && $tempPT['portfolio_id'])                $dataToSaveInPortfolioTransaction[]=$tempPT;            if(isset($temp['amount']) && $temp['user_id'])                $dataToSave[]=$temp;            if(!empty($temp2))            {                $dataToSave[]=$temp2;  // storing another row to insert            }            $i++;        }        //  pr($dataToSaveInReportLog);        $updateReportLog=$this->generateReport2($dataToSaveInReportLog,$brokerUsers,'Hac');        if (count($updateReportLog)) {            // saving report log            $ReportLog->saveMany($updateReportLog, array('atomic' => true));        }        $allOrders = $Omo->get_broker_orders($allOrdersInfo, $broker_id);        $allLockedOrder = $allOrders['locked'];        $allExecutedOrder = $allOrders['executed'];        $allDeletedOrder = $allOrders['delete'];        $allOrderToReplace=array();        /* We will remove all lock,execute order and reinsert them from excel*/        $allOrderToReplace=array_merge($allOrderToReplace,$allLockedOrder);        $allOrderToReplace=array_merge($allOrderToReplace,$allExecutedOrder);        //   $allOrderToReplace=array_merge($allOrderToReplace,$allDeletedOrder);        $orderIdArrToDelete=Hash::extract($allOrderToReplace, '{n}.id');        $lockedOrders = Hash::extract($dataToSave, '{n}[order_status=locked].order_status');        $executedOrders = Hash::extract($dataToSave, '{n}[order_status=executed].order_status');        $totalLock=count($lockedOrders);        $totalExecuted=count($executedOrders);        echo "<br />Total Locked order=$totalLock";        echo "<br /> Total Executed order=$totalExecuted";        // first delete all existing order        $Order->deleteAll(array('Order.id' => $orderIdArrToDelete), false);        // re insert order        if (count($dataToSave)) {            $Order->saveMany($dataToSave, array('atomic' => true));        }        // delete all todays portfolio transaction        $model = ClassRegistry::init('PortfolioTransaction');        $model->deleteAll("Portfolio.broker=$broker_id and PortfolioTransaction.dse_execution_id  LIKE  'temp'", false);        if (count($dataToSaveInPortfolioTransaction)) {            $model->saveMany($dataToSaveInPortfolioTransaction, array('atomic' => true));        }        // delete all todays portfolio shares --- testing alternative system        $model = ClassRegistry::init('PortfolioShare');        $model->deleteAll("Portfolio.broker=$broker_id and PortfolioShare.dse_execution_id  LIKE  'temp'", false);        if (count($dataToSaveInPortfolioTransaction)) {            $model->saveMany($dataToSaveInPortfolioTransaction, array('atomic' => true));        }       /* // deleting all existing file        $dir = 'hac/execute/*';        $files = glob($dir); // get all file names        foreach($files as $file){ // iterate files            if(is_file($file))                unlink($file); // delete file        }*/        exit;    }    /////////////////////////////////////////////////////////for Hac broker house END//////////////////////////////////////////////////////////////////    /////////////////////////////////////////////////////////////for Sharp broker House//////////////////////////////////////////////////////////////////////    public function execute_report_sharp()    {        Configure::write('debug', 2);        $dir = Configure::read('broker.sharp.execute_file_path');        $fileArr = $this->scan_dir($dir);        // $reportFile='nofile.xls';        if(isset($fileArr[0]))            $reportFile = $fileArr[0];        $filename="$dir/$reportFile";        $ext = pathinfo($filename, PATHINFO_EXTENSION);        if (file_exists($filename)) {            App::uses('CakeTime', 'Utility');            echo "$filename was last uploaded at :  <h2> " . CakeTime::nice(date ("F d Y H:i:s.", filemtime($filename)))." </h2> ";            echo "<h3>".CakeTime::timeAgoInWords(date ("F d Y H:i:s.", filemtime($filename)))." </h3> ";            $rt=Router::url('/', true)."Downloads/all_orders_report2_sharp";            echo "<br /><a target='_blank' href='$rt'><h3>Run Script</h3></a> <br />";        }else        {            echo "There is no file uploaded";        }        exit;    }    public function all_orders_report2_sharp()    {        //Configure::write('debug', 2);       // ini_set('memory_limit', '-1');        App::uses('Broker', 'Model');        $Broker = new Broker();        $broker_id = $this->Auth->user('broker_id');        $brokerInfo = $Broker->findById($broker_id);        $prev_execute_report_str = $brokerInfo['Broker']['execute_report'];        App::uses('CakeTime', 'Utility');        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'Order.created');        App::uses('Order', 'Model');        $Order = new Order();        $allOrdersInfo = $Order->find('all', array(            'conditions' => "User.broker_id=$broker_id and $tradeDateCondition",            'contain' => 'User.broker_id',            'recursive' => -1        ));        $execute_file_path =  Configure::read('broker.sharp.execute_file_path');        $fileArr = $this->scan_dir($execute_file_path);        $reportFile = $fileArr[0];        $reportFilePath="$execute_file_path/$reportFile";        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $inputFileType = PHPExcel_IOFactory::identify($reportFilePath);        $objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load($reportFilePath);        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row)        {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false);// Loop all cells, even if it is not set            $rowIndex = $row->getRowIndex();            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $array_data[$rowIndex]['client_id'] = $cell->getCalculatedValue();                } else if ('B' == $cell->getColumn()) {                    $array_data[$rowIndex]['instrument_code'] = $cell->getCalculatedValue();                } else if ('C' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_type'] = $cell->getCalculatedValue();                } else if ('D' == $cell->getColumn()) {                    $order_qty=$cell->getCalculatedValue();                    $order_qty = preg_replace('/\s+/', '', $order_qty);                    $array_data[$rowIndex]['order_qty'] = $order_qty;                } else if ('E' == $cell->getColumn()) {                    $avg_price=$cell->getCalculatedValue();                    if(empty($avg_price))                        $avg_price=0.00;                    else                        $avg_price = preg_replace('/\s+/', '', $avg_price);                    $array_data[$rowIndex]['avg_price'] =$avg_price;                } else if ('F' == $cell->getColumn()) {                    $array_data[$rowIndex]['exec_per'] = trim($cell->getCalculatedValue());                } else if ('G' == $cell->getColumn()) {                    $executed_qty=$cell->getCalculatedValue();                    $executed_qty = preg_replace('/\s+/', '', $executed_qty);                    $array_data[$rowIndex]['executed_qty'] = $executed_qty;                } else if ('H' == $cell->getColumn()) {                    $array_data[$rowIndex]['exec_Val'] = trim($cell->getCalculatedValue());                } else if ('I' == $cell->getColumn()) {                    $array_data[$rowIndex]['status'] = trim($cell->getCalculatedValue());                } else if ('J' == $cell->getColumn()) {                    $array_data[$rowIndex]['sub_status'] = $cell->getCalculatedValue();                } else if ('K' == $cell->getColumn()) {                    $remaining_qty=$cell->getCalculatedValue();                    $remaining_qty = preg_replace('/\s+/', '', $remaining_qty);                    $array_data[$rowIndex]['remaining_qty'] = $remaining_qty;                }                else if ('L' == $cell->getColumn()) {                    $array_data[$rowIndex]['created'] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'h:i:s');                }                else if ('M' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_id'] = trim($cell->getCalculatedValue());                }                else if ('N' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_date'] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'dd-mm-YYYY');                }            }        }        $paternArray= array        (            'client_id' => 'Client A/C',            'instrument_code' => 'Name',            'order_type' => 'Side',            'order_qty' => 'SentQty',            'avg_price' => 'Limit',            'exec_per' => 'Exec%',            'executed_qty' => 'ExecQty',            'exec_Val' => 'ExecVal',            'status' => 'Status',            'sub_status' => 'SubStatus',            'remaining_qty' => 'RemQty',            'created' => 'Date/Time',            'order_id' => 'OrderID',            'order_date' => 'Date'        );        if ($array_data[1] !== $paternArray)//chk order        {            echo"File Column order is not in correct format.";            echo "Expected File Order Is: Client A/C => Name=> Side => SentQty => Limit => Exec% => ExecQty => ExecVal => Status => SubStatus => RemQty => Date/Time => OrderID=>Date";            exit;        }        echo "<h3>today is:</h3>".date('d-m-Y');        echo "<br>";        echo "<h3>file date is:</h3>".$array_data[2]['order_date'];        echo "<br>";        if($array_data[2]['order_date'] != date('d-m-Y'))        {            echo "<br>";            echo "<h2>this is not today's file.please recheck and upload the correct file again</h2>";            exit;        }        $validTransactionArr = array();        foreach ($array_data as $eachRow) {            $col_c = trim($eachRow['order_qty']);            if ($col_c != '') {                $validTransactionArr[] = $eachRow;            }        }        unset($validTransactionArr[0]);        //$validTransactionArr = Hash::sort($validTransactionArr, "{n}.avg_price", 'ASC');        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1);        $brokerUsers = array();        foreach ($userList[$broker_id] as $irn => $arr) {            $key = trim($irn);            $key = str_pad($key, 5, "0", STR_PAD_LEFT);            $key = strtoupper($key);            $brokerUsers[$key] = $arr;        }        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'ReportLog.date_time');        $ReportLog = ClassRegistry::init('ReportLog');        $todayReportLog = $ReportLog->find('all', array(            'conditions' => "ReportLog.broker_id=$broker_id and $tradeDateCondition",            'recursive' => -1        ));        $todayReportLog=Hash::combine($todayReportLog, '{n}.ReportLog.dse_order_id', '{n}.ReportLog');        $dataToSaveInReportLog=array();        $new_transaction_count=count($validTransactionArr);        $prev_transaction_count=count($todayReportLog);        //$prev_transaction_report_arr set to null by runTradeIns        if($new_transaction_count<$prev_transaction_count) {            $difference=($prev_transaction_count)-($new_transaction_count);            echo "New file has $difference less transactions than previous file";            exit;        }        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $dataToSave=array();        $dataToSaveInPortfolioTransaction=array();        $i=0;        foreach($validTransactionArr as $trans)        {            $temp=array();            $temp2=array();            $tempPT=array();            $irn=$trans['client_id'];            $irn = str_pad($irn, 5, "0", STR_PAD_LEFT);            $sub_status=trim($trans['sub_status']);            $status=trim($trans['status']);            $user_id=$portfolio_id=0;            if(isset($brokerUsers[$irn]['portfolio_id']))            {                $portfolio_id=$user_id=$brokerUsers[$irn]['portfolio_id'];                $broker_fee=$brokerUsers[$irn]['broker_fee'];            }            $remaining_qty=$trans['remaining_qty'];            $order_qty=$trans['order_qty'];            $executed_qty=$trans['executed_qty'];            $avg_price=$trans['avg_price'];            $created=$trans['created'];            $today=date('Y-m-d');            $created="$today $created";            $created = date("Y-m-d H:i:s", strtotime("$created +4 hours"));            //$created = date("Y-m-d H:i:s", strtotime("$created +5 hours"));            //$later = strtotime("+6 hours", $created);            //$created=date('Y-m-d H:i:s', $later);            $instrument_code=trim($trans['instrument_code']);            $instrument_id=$instrumentList[$instrument_code];            $price_type='fixed';            $rate=$trans['avg_price'];            $dse_order_id=$trans['order_id'];            if(trim($trans['order_type'])=='Sell')            {                $order_type=2;            }else            {                $order_type=1;            }            //  $temp['temp_id']=$i;            $temp['user_id']=$portfolio_id;            $temp['order_type']=$order_type;            $temp['instrument_id']=$instrument_id;            $temp['partial_amount']=0;            $temp['price_type']=$price_type;            $temp['rate']=$rate;            $temp['rate_start_range']=$rate;            $temp['rate_end_range']=$rate;            $temp['created']=$created;            $temp['dse_order_id']=$dse_order_id;          // pr($temp);            $tempPT['portfolio_id']=$portfolio_id;            $tempPT['instrument_id']=$instrument_id;            $tempPT['transaction_type_id']=$order_type;            $tempPT['amount']=0;            $tempPT['rate']=$rate;            $tempPT['transaction_time']=$created;            $tempPT['commission']=$broker_fee;            $tempPT['parent_id']=0;            $tempPT['dse_execution_id']='temp';            if(isset($todayReportLog[$dse_order_id])) //  if this order is already in database            {                // we are updating only here                // Checking if anything changed                if($todayReportLog[$dse_order_id]['status']!=$status or $todayReportLog[$dse_order_id]['sub_status']!=$sub_status or $todayReportLog[$dse_order_id]['executed_qty']!=$executed_qty)                {                    $todayReportLog[$dse_order_id]['is_changed']=1;                    $todayReportLog[$dse_order_id]['email_sent']=0; // resetting email sent to 0 so that we resend email with updated information                }else                {                    $todayReportLog[$dse_order_id]['is_changed']=0;                }                $tempReportLog=$todayReportLog[$dse_order_id];                $tempReportLog['order_qty']=$order_qty;                $tempReportLog['executed_qty']=$executed_qty;                $tempReportLog['avg_price']=$avg_price;                $tempReportLog['status']=$status;                $tempReportLog['sub_status']=$sub_status;            }            else            {                // inserting new row of order                $tempReportLog['irn']=$irn;                $tempReportLog['instrument_code']=$instrument_code;                $tempReportLog['date_time']=$created;                $tempReportLog['dse_order_id']=$dse_order_id;                $tempReportLog['broker_id']=$broker_id;                $tempReportLog['order_qty']=$order_qty;                $tempReportLog['order_type']=$trans['order_type'];                $tempReportLog['executed_qty']=$executed_qty;                $tempReportLog['avg_price']=$avg_price;                $tempReportLog['status']=$status;                $tempReportLog['sub_status']=$sub_status;                $tempReportLog['email_sent']=0;                $tempReportLog['sms_sent']=0;                $tempReportLog['is_changed']=1;            }            $dataToSaveInReportLog[]=$tempReportLog;            $partial_executed=0;            if($sub_status=='New') {  // new locked order                $temp['amount']=$order_qty;                $temp['order_status']='locked';            }            if($sub_status=='Filled') {  // full executed                $temp['amount']=$executed_qty;                $temp['order_status']='executed';                $tempPT['amount']=$executed_qty;            }            if($sub_status=='Partially filled') {  // partial executed executed                $temp['amount']=$executed_qty;                $temp['order_status']='executed';                $tempPT['amount']=$executed_qty;                $temp2=$temp;                $temp2['amount']=$remaining_qty;                $temp2['order_status']='locked';            }            if($sub_status=='Canceled') {  // Order cancel                if($executed_qty) { // if any share executed before withdraw/cancel                    $temp['amount'] = $executed_qty;                    $temp['order_status'] = 'executed';                    $tempPT['amount']=$executed_qty;                }            }            if($sub_status=='Replaced') {  // Order modified                if($executed_qty) { // if any share executed before modified                    $temp['amount'] = $executed_qty;                    $temp['order_status'] = 'executed';                    $tempPT['amount']=$executed_qty;                }            }            if($tempPT['amount'] && $tempPT['portfolio_id'])                $dataToSaveInPortfolioTransaction[]=$tempPT;            if(isset($temp['amount']) && $temp['user_id'])                $dataToSave[]=$temp;            if(!empty($temp2))            {                $dataToSave[]=$temp2;  // storing another row to insert            }            $i++;        }        //  pr($dataToSaveInReportLog);        $updateReportLog=$this->generateReport2($dataToSaveInReportLog,$brokerUsers,'Sharp');        if (count($updateReportLog)) {            // saving report log            $ReportLog->saveMany($updateReportLog, array('atomic' => true));        }              $allOrders = $Omo->get_broker_orders($allOrdersInfo, $broker_id);        $allLockedOrder = $allOrders['locked'];        $allExecutedOrder = $allOrders['executed'];        $allDeletedOrder = $allOrders['delete'];        $allOrderToReplace=array();        /* We will remove all lock,execute order and reinsert them from excel*/        $allOrderToReplace=array_merge($allOrderToReplace,$allLockedOrder);        $allOrderToReplace=array_merge($allOrderToReplace,$allExecutedOrder);        //   $allOrderToReplace=array_merge($allOrderToReplace,$allDeletedOrder);        $orderIdArrToDelete=Hash::extract($allOrderToReplace, '{n}.id');        $lockedOrders = Hash::extract($dataToSave, '{n}[order_status=locked].order_status');        $executedOrders = Hash::extract($dataToSave, '{n}[order_status=executed].order_status');        $totalLock=count($lockedOrders);        $totalExecuted=count($executedOrders);        echo "<br />Total Locked order=$totalLock";        echo "<br /> Total Executed order=$totalExecuted";       // $Order->query("INSERT INTO orders_backup SELECT * FROM orders");        $orders_backup = ClassRegistry::init('orders_backup');        $backup_orders=$Order->find('all',array('conditions'=>array('Order.id'=>$orderIdArrToDelete)));      //  if(count($backup_orders))       // $orders_backup->saveMany($backup_orders, array('atomic' => true));        // first delete all existing order        $Order->deleteAll(array('Order.id' => $orderIdArrToDelete), false);        // re insert order        if (count($dataToSave)) {            $Order->saveMany($dataToSave, array('atomic' => true));        }        // delete all todays portfolio transaction        $model = ClassRegistry::init('PortfolioTransaction');        $model->deleteAll("Portfolio.broker=$broker_id and PortfolioTransaction.dse_execution_id  LIKE  'temp'", false);        if (count($dataToSaveInPortfolioTransaction)) {            $model->saveMany($dataToSaveInPortfolioTransaction, array('atomic' => true));        }        /* // deleting all existing file         $dir = 'hac/execute/*';         $files = glob($dir); // get all file names         foreach($files as $file){ // iterate files             if(is_file($file))                 unlink($file); // delete file         }*/        exit;    }    /////////////////////////////////////////////////////////for Sharp broker house END//////////////////////////////////////////////////////////////////    /////////////////////////////////////////////////////////////for SB Sharp broker House//////////////////////////////////////////////////////////////////////    public function execute_report_sbsharp()    {        Configure::write('debug', 2);        $dir = Configure::read('broker.sbsharp.execute_file_path');        $fileArr = $this->scan_dir($dir);        // $reportFile='nofile.xls';        if(isset($fileArr[0]))            $reportFile = $fileArr[0];        $filename="$dir/$reportFile";        $ext = pathinfo($filename, PATHINFO_EXTENSION);        if (file_exists($filename)) {            App::uses('CakeTime', 'Utility');            echo "$filename was last uploaded at :  <h2> " . CakeTime::nice(date ("F d Y H:i:s.", filemtime($filename)))." </h2> ";            echo "<h3>".CakeTime::timeAgoInWords(date ("F d Y H:i:s.", filemtime($filename)))." </h3> ";            $rt=Router::url('/', true)."Downloads/all_orders_report2_sbsharp";            echo "<br /><a target='_blank' href='$rt'><h3>Run Script</h3></a> <br />";        }else        {            echo "There is no file uploaded";        }        exit;    }    public function all_orders_report2_sbsharp()    {        Configure::write('debug', 2);        // ini_set('memory_limit', '-1');        App::uses('Broker', 'Model');        $Broker = new Broker();        $broker_id = $this->Auth->user('broker_id');        $brokerInfo = $Broker->findById($broker_id);        $prev_execute_report_str = $brokerInfo['Broker']['execute_report'];        App::uses('CakeTime', 'Utility');        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'Order.created');        App::uses('Order', 'Model');        $Order = new Order();        $allOrdersInfo = $Order->find('all', array(            'conditions' => "User.broker_id=$broker_id and $tradeDateCondition",            'contain' => 'User.broker_id',            'recursive' => -1        ));        $execute_file_path =  Configure::read('broker.sbsharp.execute_file_path');        $fileArr = $this->scan_dir($execute_file_path);        $reportFile = $fileArr[0];        $reportFilePath="$execute_file_path/$reportFile";        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $inputFileType = PHPExcel_IOFactory::identify($reportFilePath);        $objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load($reportFilePath);        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row)        {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false);// Loop all cells, even if it is not set            $rowIndex = $row->getRowIndex();            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $array_data[$rowIndex]['client_id'] = $cell->getCalculatedValue();                } else if ('B' == $cell->getColumn()) {                    $array_data[$rowIndex]['instrument_code'] = $cell->getCalculatedValue();                } else if ('C' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_type'] = $cell->getCalculatedValue();                } else if ('D' == $cell->getColumn()) {                    $order_qty=$cell->getCalculatedValue();                    $order_qty = preg_replace('/\s+/', '', $order_qty);                    $array_data[$rowIndex]['order_qty'] = $order_qty;                } else if ('E' == $cell->getColumn()) {                    $avg_price=$cell->getCalculatedValue();                    if(empty($avg_price))                        $avg_price=0.00;                    else                        $avg_price = preg_replace('/\s+/', '', $avg_price);                    $array_data[$rowIndex]['avg_price'] =$avg_price;                } else if ('F' == $cell->getColumn()) {                    $array_data[$rowIndex]['exec_per'] = trim($cell->getCalculatedValue());                } else if ('G' == $cell->getColumn()) {                    $executed_qty=$cell->getCalculatedValue();                    $executed_qty = preg_replace('/\s+/', '', $executed_qty);                    $array_data[$rowIndex]['executed_qty'] = $executed_qty;                } else if ('H' == $cell->getColumn()) {                    $array_data[$rowIndex]['exec_Val'] = trim($cell->getCalculatedValue());                } else if ('I' == $cell->getColumn()) {                    $array_data[$rowIndex]['status'] = trim($cell->getCalculatedValue());                } else if ('J' == $cell->getColumn()) {                    $array_data[$rowIndex]['sub_status'] = $cell->getCalculatedValue();                } else if ('K' == $cell->getColumn()) {                    $remaining_qty=$cell->getCalculatedValue();                    $remaining_qty = preg_replace('/\s+/', '', $remaining_qty);                    $array_data[$rowIndex]['remaining_qty'] = $remaining_qty;                }                else if ('L' == $cell->getColumn()) {                    $array_data[$rowIndex]['created'] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'h:i:s');                }                else if ('M' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_id'] = trim($cell->getCalculatedValue());                }                else if ('N' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_date'] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'dd-mm-YYYY');                }            }        }        $paternArray= array        (            'client_id' => 'Client A/C',            'instrument_code' => 'Name',            'order_type' => 'Side',            'order_qty' => 'SentQty',            'avg_price' => 'Limit',            'exec_per' => 'Exec%',            'executed_qty' => 'ExecQty',            'exec_Val' => 'ExecVal',            'status' => 'Status',            'sub_status' => 'SubStatus',            'remaining_qty' => 'RemQty',            'created' => 'Date/Time',            'order_id' => 'OrderID',            'order_date' => 'Date'        );        if ($array_data[1] !== $paternArray)//chk order        {            echo"File Column order is not in correct format.";            echo "Expected File Order Is: Client A/C => Name=> Side => SentQty => Limit => Exec% => ExecQty => ExecVal => Status => SubStatus => RemQty => Date/Time => OrderID=>Date";            exit;        }        echo "<h3>today is:</h3>".date('d-m-Y');        echo "<br>";        echo "<h3>file date is:</h3>".$array_data[2]['order_date'];        echo "<br>";        if($array_data[2]['order_date'] != date('d-m-Y'))        {            echo "<br>";            echo "<h2>this is not today's file.please recheck and upload the correct file again</h2>";            exit;        }        $validTransactionArr = array();        foreach ($array_data as $eachRow) {            $col_c = trim($eachRow['order_qty']);            if ($col_c != '') {                $validTransactionArr[] = $eachRow;            }        }        unset($validTransactionArr[0]);        //$validTransactionArr = Hash::sort($validTransactionArr, "{n}.avg_price", 'ASC');        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1);        $brokerUsers = array();        foreach ($userList[$broker_id] as $irn => $arr) {            $key = trim($irn);            $key = str_pad($key, 5, "0", STR_PAD_LEFT);            $key = strtoupper($key);            $brokerUsers[$key] = $arr;        }        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'ReportLog.date_time');        $ReportLog = ClassRegistry::init('ReportLog');        $todayReportLog = $ReportLog->find('all', array(            'conditions' => "ReportLog.broker_id=$broker_id and $tradeDateCondition",            'recursive' => -1        ));        $todayReportLog=Hash::combine($todayReportLog, '{n}.ReportLog.dse_order_id', '{n}.ReportLog');        $dataToSaveInReportLog=array();        $new_transaction_count=count($validTransactionArr);        $prev_transaction_count=count($todayReportLog);        //$prev_transaction_report_arr set to null by runTradeIns        if($new_transaction_count<$prev_transaction_count) {            $difference=($prev_transaction_count)-($new_transaction_count);            echo "New file has $difference less transactions than previous file";            exit;        }        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $dataToSave=array();        $dataToSaveInPortfolioTransaction=array();        $i=0;        foreach($validTransactionArr as $trans)        {            $temp=array();            $temp2=array();            $tempPT=array();            $irn=$trans['client_id'];            $irn = str_pad($irn, 5, "0", STR_PAD_LEFT);            $sub_status=trim($trans['sub_status']);            $status=trim($trans['status']);            $user_id=$portfolio_id=0;            if(isset($brokerUsers[$irn]['portfolio_id']))            {                $portfolio_id=$user_id=$brokerUsers[$irn]['portfolio_id'];                $broker_fee=$brokerUsers[$irn]['broker_fee'];            }            $remaining_qty=$trans['remaining_qty'];            $order_qty=$trans['order_qty'];            $executed_qty=$trans['executed_qty'];            $avg_price=$trans['avg_price'];            $created=$trans['created'];            $today=date('Y-m-d');            $created="$today $created";            $created = date("Y-m-d H:i:s", strtotime("$created +4 hours"));            //$created = date("Y-m-d H:i:s", strtotime("$created +5 hours"));            //$later = strtotime("+6 hours", $created);            //$created=date('Y-m-d H:i:s', $later);            $instrument_code=trim($trans['instrument_code']);            $instrument_id=$instrumentList[$instrument_code];            $price_type='fixed';            $rate=$trans['avg_price'];            $dse_order_id=$trans['order_id'];            if(trim($trans['order_type'])=='Sell')            {                $order_type=2;            }else            {                $order_type=1;            }            //  $temp['temp_id']=$i;            $temp['user_id']=$portfolio_id;            $temp['order_type']=$order_type;            $temp['instrument_id']=$instrument_id;            $temp['partial_amount']=0;            $temp['price_type']=$price_type;            $temp['rate']=$rate;            $temp['rate_start_range']=$rate;            $temp['rate_end_range']=$rate;            $temp['created']=$created;            $temp['dse_order_id']=$dse_order_id;            // pr($temp);            $tempPT['portfolio_id']=$portfolio_id;            $tempPT['instrument_id']=$instrument_id;            $tempPT['transaction_type_id']=$order_type;            $tempPT['amount']=0;            $tempPT['rate']=$rate;            $tempPT['transaction_time']=$created;            $tempPT['commission']=$broker_fee;            $tempPT['parent_id']=0;            $tempPT['dse_execution_id']='temp';            if(isset($todayReportLog[$dse_order_id])) //  if this order is already in database            {                // we are updating only here                // Checking if anything changed                if($todayReportLog[$dse_order_id]['status']!=$status or $todayReportLog[$dse_order_id]['sub_status']!=$sub_status or $todayReportLog[$dse_order_id]['executed_qty']!=$executed_qty)                {                    $todayReportLog[$dse_order_id]['is_changed']=1;                    $todayReportLog[$dse_order_id]['email_sent']=0; // resetting email sent to 0 so that we resend email with updated information                }else                {                    $todayReportLog[$dse_order_id]['is_changed']=0;                }                $tempReportLog=$todayReportLog[$dse_order_id];                $tempReportLog['order_qty']=$order_qty;                $tempReportLog['executed_qty']=$executed_qty;                $tempReportLog['avg_price']=$avg_price;                $tempReportLog['status']=$status;                $tempReportLog['sub_status']=$sub_status;            }            else            {                // inserting new row of order                $tempReportLog['irn']=$irn;                $tempReportLog['instrument_code']=$instrument_code;                $tempReportLog['date_time']=$created;                $tempReportLog['dse_order_id']=$dse_order_id;                $tempReportLog['broker_id']=$broker_id;                $tempReportLog['order_qty']=$order_qty;                $tempReportLog['order_type']=$trans['order_type'];                $tempReportLog['executed_qty']=$executed_qty;                $tempReportLog['avg_price']=$avg_price;                $tempReportLog['status']=$status;                $tempReportLog['sub_status']=$sub_status;                $tempReportLog['email_sent']=0;                $tempReportLog['sms_sent']=0;                $tempReportLog['is_changed']=1;            }            $dataToSaveInReportLog[]=$tempReportLog;            $partial_executed=0;            if($sub_status=='New') {  // new locked order                $temp['amount']=$order_qty;                $temp['order_status']='locked';            }            if($sub_status=='Filled') {  // full executed                $temp['amount']=$executed_qty;                $temp['order_status']='executed';                $tempPT['amount']=$executed_qty;            }            if($sub_status=='Partially filled') {  // partial executed executed                $temp['amount']=$executed_qty;                $temp['order_status']='executed';                $tempPT['amount']=$executed_qty;                $temp2=$temp;                $temp2['amount']=$remaining_qty;                $temp2['order_status']='locked';            }            if($sub_status=='Canceled') {  // Order cancel                if($executed_qty) { // if any share executed before withdraw/cancel                    $temp['amount'] = $executed_qty;                    $temp['order_status'] = 'executed';                    $tempPT['amount']=$executed_qty;                }            }            if($sub_status=='Replaced') {  // Order modified                if($executed_qty) { // if any share executed before modified                    $temp['amount'] = $executed_qty;                    $temp['order_status'] = 'executed';                    $tempPT['amount']=$executed_qty;                }            }            if($tempPT['amount'] && $tempPT['portfolio_id'])                $dataToSaveInPortfolioTransaction[]=$tempPT;            if(isset($temp['amount']) && $temp['user_id'])                $dataToSave[]=$temp;            if(!empty($temp2))            {                $dataToSave[]=$temp2;  // storing another row to insert            }            $i++;        }        //  pr($dataToSaveInReportLog);        $updateReportLog=$this->generateReport2($dataToSaveInReportLog,$brokerUsers,'Sharp-KawranBazar');        if (count($updateReportLog)) {            // saving report log            $ReportLog->saveMany($updateReportLog, array('atomic' => true));        }        $allOrders = $Omo->get_broker_orders($allOrdersInfo, $broker_id);        $allLockedOrder = $allOrders['locked'];        $allExecutedOrder = $allOrders['executed'];        $allDeletedOrder = $allOrders['delete'];        $allOrderToReplace=array();        /* We will remove all lock,execute order and reinsert them from excel*/        $allOrderToReplace=array_merge($allOrderToReplace,$allLockedOrder);        $allOrderToReplace=array_merge($allOrderToReplace,$allExecutedOrder);        //   $allOrderToReplace=array_merge($allOrderToReplace,$allDeletedOrder);        $orderIdArrToDelete=Hash::extract($allOrderToReplace, '{n}.id');        $lockedOrders = Hash::extract($dataToSave, '{n}[order_status=locked].order_status');        $executedOrders = Hash::extract($dataToSave, '{n}[order_status=executed].order_status');        $totalLock=count($lockedOrders);        $totalExecuted=count($executedOrders);        echo "<br />Total Locked order=$totalLock";        echo "<br /> Total Executed order=$totalExecuted";        // $Order->query("INSERT INTO orders_backup SELECT * FROM orders");        $orders_backup = ClassRegistry::init('orders_backup');        $backup_orders=$Order->find('all',array('conditions'=>array('Order.id'=>$orderIdArrToDelete), 'recursive' => -1));    //    if(count($backup_orders))    //    $orders_backup->saveMany($backup_orders, array('atomic' => true));        // first delete all existing order        $Order->deleteAll(array('Order.id' => $orderIdArrToDelete), false);        // re insert order        if (count($dataToSave)) {            $Order->saveMany($dataToSave, array('atomic' => true));        }        // delete all todays portfolio transaction        $model = ClassRegistry::init('PortfolioTransaction');        $model->deleteAll("Portfolio.broker=$broker_id and PortfolioTransaction.dse_execution_id  LIKE  'temp'", false);        if (count($dataToSaveInPortfolioTransaction)) {            $model->saveMany($dataToSaveInPortfolioTransaction, array('atomic' => true));        }        /* // deleting all existing file         $dir = 'hac/execute/*';         $files = glob($dir); // get all file names         foreach($files as $file){ // iterate files             if(is_file($file))                 unlink($file); // delete file         }*/        exit;    }    /////////////////////////////////////////////////////////for SB Sharp broker house END///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////for FIS broker House//////////////////////////////////////////////////////////////////////    public function execute_report_fis()    {        Configure::write('debug', 2);        $dir = Configure::read('broker.fis.execute_file_path');        $fileArr = $this->scan_dir($dir);        // $reportFile='nofile.xls';        if (isset($fileArr[0]))            $reportFile = $fileArr[0];        $filename = "$dir/$reportFile";        $ext = pathinfo($filename, PATHINFO_EXTENSION);        if (file_exists($filename)) {            App::uses('CakeTime', 'Utility');            echo "$filename was last uploaded at :  <h2> " . CakeTime::nice(date("F d Y H:i:s.", filemtime($filename))) . " </h2> ";            echo "<h3>" . CakeTime::timeAgoInWords(date("F d Y H:i:s.", filemtime($filename))) . " </h3> ";            $rt = Router::url('/', true) . "Downloads/all_orders_report2_fis";            echo "<br /><a target='_blank' href='$rt'><h3>Run Script</h3></a> <br />";        } else {            echo "There is no file uploaded";        }        exit;    }    public function all_orders_report2_fis()    {        Configure::write('debug', 2);        App::uses('Broker', 'Model');        $Broker = new Broker();        $broker_id = $this->Auth->user('broker_id');        $brokerInfo = $Broker->findById($broker_id);        $prev_execute_report_str = $brokerInfo['Broker']['execute_report'];        App::uses('CakeTime', 'Utility');        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'Order.created');        App::uses('Order', 'Model');        $Order = new Order();        $allOrdersInfo = $Order->find('all', array(            'conditions' => "User.broker_id=$broker_id and $tradeDateCondition",            'contain' => 'User.broker_id',            'recursive' => -1        ));        $execute_file_path = Configure::read('broker.fis.execute_file_path');        $fileArr = $this->scan_dir($execute_file_path);        $reportFile = $fileArr[0];        $reportFilePath = "$execute_file_path/$reportFile";        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $inputFileType = PHPExcel_IOFactory::identify($reportFilePath);        $objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load($reportFilePath);        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row) {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false);// Loop all cells, even if it is not set            $rowIndex = $row->getRowIndex();            foreach ($cellIterator as $cell) {                if ('C' == $cell->getColumn()) {                    $array_data[$rowIndex]['client_id'] = $cell->getCalculatedValue();                } else if ('D' == $cell->getColumn()) {                    $array_data[$rowIndex]['instrument_code'] = $cell->getCalculatedValue();                } else if ('E' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_type'] = $cell->getCalculatedValue();                } else if ('F' == $cell->getColumn()) {                    $order_qty = $cell->getCalculatedValue();                    $order_qty = preg_replace('/\s+/', '', $order_qty);                    $array_data[$rowIndex]['order_qty'] = $order_qty;                } else if ('L' == $cell->getColumn()) {                    $avg_price = $cell->getCalculatedValue();                    if (empty($avg_price))                        $avg_price = 0.00;                    else                        $avg_price = preg_replace('/\s+/', '', $avg_price);                    $array_data[$rowIndex]['avg_price'] = $avg_price;                } else if ('K' == $cell->getColumn()) {                    $executed_qty = $cell->getCalculatedValue();                    $executed_qty = preg_replace('/\s+/', '', $executed_qty);                    $array_data[$rowIndex]['executed_qty'] = $executed_qty;                } else if ('B' == $cell->getColumn()) {                    $array_data[$rowIndex]['x'] = trim($cell->getCalculatedValue());  // just place holder. nothing use                }else if ('H' == $cell->getColumn()) {                    $array_data[$rowIndex]['exec_per'] = trim($cell->getCalculatedValue());  // just place holder. nothing use                }else if ('G' == $cell->getColumn()) {                    $limit = $cell->getCalculatedValue();                    if (empty($limit))                        $limit = 0.00;                    else                        $limit = preg_replace('/\s+/', '', $limit);                    $array_data[$rowIndex]['limit'] = $limit;                }else if ('Q' == $cell->getColumn()) {                    $array_data[$rowIndex]['reason'] = trim($cell->getCalculatedValue());  // just place holder. nothing use                } else if ('J' == $cell->getColumn()) {                    $array_data[$rowIndex]['status'] = trim($cell->getCalculatedValue());                } else if ('I' == $cell->getColumn()) {                    $array_data[$rowIndex]['sub_status'] = $cell->getCalculatedValue();                } else if ('N' == $cell->getColumn()) {                    $remaining_qty = $cell->getCalculatedValue();                    $remaining_qty = preg_replace('/\s+/', '', $remaining_qty);                    $array_data[$rowIndex]['remaining_qty'] = $remaining_qty;                } else if ('M' == $cell->getColumn()) {                    //$array_data[$rowIndex]['created'] = trim($cell->getValue());                    $array_data[$rowIndex]['execVal'] = trim($cell->getCalculatedValue());                } else if ('A' == $cell->getColumn()) {                    //$array_data[$rowIndex]['created'] = trim($cell->getValue());                    $array_data[$rowIndex]['created'] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'h:i:s');                } else if ('O' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_id'] = trim($cell->getCalculatedValue());                } else if ('P' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_date'] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'dd-mm-YYYY');                }            }        }        $paternArray = array        (            'created' => 'Date/Time',            'x' => 'X',            'client_id' => 'Client A/C',            'instrument_code' => 'Name',            'order_type' => 'Side',            'order_qty' => 'SentQty',            'limit' => 'Limit',            'exec_per' => 'Exec%',            'sub_status' => 'SubStatus',            'status' => 'Status',            'executed_qty' => 'ExecQty',            'avg_price' => 'AvgPrice',            'execVal' => 'ExecVal',            'remaining_qty' => 'RemQty',            'order_id' => 'OrderID',            'order_date' => 'Date',            'reason' => 'OrdRejReasonTxt'        );        if ($array_data[1] !== $paternArray)//chk order        {            echo "File Column order is not in correct format.";            echo "Expected File Order Is: Client A/C => Name=> Side => SentQty => Limit => ExecQty => Status => SubStatus => RemQty => ExecVal => Date/Time => OrderID => Date";            exit;        }              echo "<h3>today is:</h3>" . date('d-m-Y');        echo "<br>";        echo "<h3>file date is:</h3>" . $array_data[2]['order_date'];        echo "<br>";        if ($array_data[2]['order_date'] != date('d-m-Y')) {            echo "<br>";            echo "<h2>this is not today's file.please recheck and upload the correct file again</h2>";            exit;        }        $validTransactionArr = array();        foreach ($array_data as $eachRow) {            $col_c = trim($eachRow['order_qty']);            if ($col_c != '') {                $validTransactionArr[] = $eachRow;            }        }        unset($validTransactionArr[0]);        //$validTransactionArr = Hash::sort($validTransactionArr, "{n}.avg_price", 'ASC');        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 0);        $brokerUsers = array();        foreach ($userList[$broker_id] as $irn => $arr) {            $key = trim($irn);            $key = str_pad($key, 6, "0", STR_PAD_LEFT);            $key = strtoupper($key);            $brokerUsers[$key] = $arr;        }        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'ReportLog.date_time');        $ReportLog = ClassRegistry::init('ReportLog');        $todayReportLog = $ReportLog->find('all', array(            'conditions' => "ReportLog.broker_id=$broker_id and $tradeDateCondition",            'recursive' => -1        ));        $todayReportLog = Hash::combine($todayReportLog, '{n}.ReportLog.dse_order_id', '{n}.ReportLog');        $dataToSaveInReportLog = array();        $new_transaction_count = count($validTransactionArr);        $prev_transaction_count = count($todayReportLog);        if ($new_transaction_count < $prev_transaction_count) {            $difference = ($prev_transaction_count) - ($new_transaction_count);            echo "New file has $difference less transactions than previous file";            exit;        }        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $dataToSave = array();        $dataToSaveInPortfolioTransaction = array();        $i = 0;        foreach ($validTransactionArr as $trans) {            $temp = array();            $temp2 = array();            $tempPT = array();            $irn = $trans['client_id'];            $irn = str_pad($irn, 6, "0", STR_PAD_LEFT);            $irn = strtoupper($irn);            $sub_status = trim($trans['sub_status']);            $status = trim($trans['status']);            $user_id = $portfolio_id = 0;            if (isset($brokerUsers[$irn]['portfolio_id'])) {                $portfolio_id = $user_id = $brokerUsers[$irn]['portfolio_id'];                $broker_fee = $brokerUsers[$irn]['broker_fee'];            }            $remaining_qty = $trans['remaining_qty'];            $order_qty = $trans['order_qty'];            $executed_qty = $trans['executed_qty'];            $avg_price = $trans['limit'];            $created = $trans['created'];            $today = date('Y-m-d');            $created = "$today $created";            //$created = date("Y-m-d H:i:s", strtotime("$created +5 hours"));            $created = date("Y-m-d H:i:s", strtotime("$created +4 hours"));            //   $later = strtotime("+6 hours", $created);            //  $created=date('Y-m-d H:i:s', $later);            $instrument_code = trim($trans['instrument_code']);            $instrument_id = $instrumentList[$instrument_code];            $price_type = 'fixed';            $rate = $trans['limit'];            $dse_order_id = $trans['order_id'];            if (trim($trans['order_type']) == 'Sell') {                $order_type = 2;            } else {                $order_type = 1;            }            //  $temp['temp_id']=$i;            $temp['user_id'] = $portfolio_id;            $temp['order_type'] = $order_type;            $temp['instrument_id'] = $instrument_id;            $temp['partial_amount'] = 0;            $temp['price_type'] = $price_type;            $temp['rate'] = $rate;            $temp['rate_start_range'] = $rate;            $temp['rate_end_range'] = $rate;            $temp['created'] = $created;            $temp['dse_order_id'] = $dse_order_id;            $tempPT['portfolio_id'] = $portfolio_id;            $tempPT['instrument_id'] = $instrument_id;            $tempPT['transaction_type_id'] = $order_type;            $tempPT['amount'] = 0;            $tempPT['rate'] = $rate;            $tempPT['transaction_time'] = $created;            $tempPT['commission'] = $broker_fee;            $tempPT['parent_id'] = 0;            $tempPT['dse_execution_id'] = 'temp';            if (isset($todayReportLog[$dse_order_id])) //  if this order is already in database            {                // we are updating only here                // Checking if anything changed                if ($todayReportLog[$dse_order_id]['status'] != $status or $todayReportLog[$dse_order_id]['sub_status'] != $sub_status or $todayReportLog[$dse_order_id]['executed_qty'] != $executed_qty) {                    $todayReportLog[$dse_order_id]['is_changed'] = 1;                    $todayReportLog[$dse_order_id]['email_sent'] = 0; // resetting email sent to 0 so that we resend email with updated information                } else {                    $todayReportLog[$dse_order_id]['is_changed'] = 0;                }                $tempReportLog = $todayReportLog[$dse_order_id];                $tempReportLog['order_qty'] = $order_qty;                $tempReportLog['executed_qty'] = $executed_qty;                $tempReportLog['avg_price'] = $avg_price;                $tempReportLog['status'] = $status;                $tempReportLog['sub_status'] = $sub_status;            } else {                // inserting new row of order                $tempReportLog['irn'] = $irn;                $tempReportLog['instrument_code'] = $instrument_code;                $tempReportLog['date_time'] = $created;                $tempReportLog['dse_order_id'] = $dse_order_id;                $tempReportLog['broker_id'] = $broker_id;                $tempReportLog['order_qty'] = $order_qty;                $tempReportLog['order_type'] = $trans['order_type'];                $tempReportLog['executed_qty'] = $executed_qty;                $tempReportLog['avg_price'] = $avg_price;                $tempReportLog['status'] = $status;                $tempReportLog['sub_status'] = $sub_status;                $tempReportLog['email_sent'] = 0;                $tempReportLog['sms_sent'] = 0;                $tempReportLog['is_changed'] = 1;            }            $dataToSaveInReportLog[] = $tempReportLog;            $partial_executed = 0;            if ($sub_status == 'New') {  // new locked order                $temp['amount'] = $order_qty;                $temp['order_status'] = 'locked';            }            if ($sub_status == 'Filled') {  // full executed                $temp['amount'] = $executed_qty;                $temp['order_status'] = 'executed';                $tempPT['amount'] = $executed_qty;            }            if ($sub_status == 'Partially filled') {  // partial executed executed                $temp['amount'] = $executed_qty;                $temp['order_status'] = 'executed';                $tempPT['amount'] = $executed_qty;                $temp2 = $temp;                $temp2['amount'] = $remaining_qty;                $temp2['order_status'] = 'locked';            }            if ($sub_status == 'Canceled') {  // Order cancel                if ($executed_qty) { // if any share executed before withdraw/cancel                    $temp['amount'] = $executed_qty;                    $temp['order_status'] = 'executed';                    $tempPT['amount'] = $executed_qty;                }            }            if ($sub_status == 'Replaced') {  // Order modified                if ($executed_qty) { // if any share executed before modified                    $temp['amount'] = $executed_qty;                    $temp['order_status'] = 'executed';                    $tempPT['amount'] = $executed_qty;                }            }            if ($tempPT['amount'] && $tempPT['portfolio_id'])                $dataToSaveInPortfolioTransaction[] = $tempPT;            if (isset($temp['amount']) && $temp['user_id'])                $dataToSave[] = $temp;            if (!empty($temp2)) {                $dataToSave[] = $temp2;  // storing another row to insert            }            $i++;        }        $updateReportLog = $this->generateReport2($dataToSaveInReportLog, $brokerUsers, 'FIS');        if (count($updateReportLog)) {            // saving report log            $ReportLog->saveMany($updateReportLog, array('atomic' => true));        }        $allOrders = $Omo->get_broker_orders($allOrdersInfo, $broker_id);        $allLockedOrder = $allOrders['locked'];        $allExecutedOrder = $allOrders['executed'];        $allDeletedOrder = $allOrders['delete'];        $allOrderToReplace = array();        /* We will remove all lock,execute order and reinsert them from excel*/        $allOrderToReplace = array_merge($allOrderToReplace, $allLockedOrder);        $allOrderToReplace = array_merge($allOrderToReplace, $allExecutedOrder);        //   $allOrderToReplace=array_merge($allOrderToReplace,$allDeletedOrder);        $orderIdArrToDelete = Hash::extract($allOrderToReplace, '{n}.id');        $lockedOrders = Hash::extract($dataToSave, '{n}[order_status=locked].order_status');        $executedOrders = Hash::extract($dataToSave, '{n}[order_status=executed].order_status');        $totalLock = count($lockedOrders);        $totalExecuted = count($executedOrders);        echo "<br />Total Locked order=$totalLock";        echo "<br /> Total Executed order=$totalExecuted";        // first delete all existing order        $Order->deleteAll(array('Order.id' => $orderIdArrToDelete), false);        // re insert order        if (count($dataToSave)) {            $Order->saveMany($dataToSave, array('atomic' => true));        }        // delete all todays portfolio transaction        $model = ClassRegistry::init('PortfolioTransaction');        $model->deleteAll("Portfolio.broker=$broker_id and PortfolioTransaction.dse_execution_id  LIKE  'temp'", false);        if (count($dataToSaveInPortfolioTransaction)) {            $model->saveMany($dataToSaveInPortfolioTransaction, array('atomic' => true));        }        // delete all todays portfolio shares --- testing alternative system        $model = ClassRegistry::init('PortfolioShare');        $model->deleteAll("Portfolio.broker=$broker_id and PortfolioShare.dse_execution_id  LIKE  'temp'", false);        if (count($dataToSaveInPortfolioTransaction)) {            $model->saveMany($dataToSaveInPortfolioTransaction, array('atomic' => true));        }        /* // deleting all existing file         $dir = 'hac/execute/*';         $files = glob($dir); // get all file names         foreach($files as $file){ // iterate files             if(is_file($file))                 unlink($file); // delete file         }*/        exit;    }    /////////////////////////////////////////////////////////for FIS broker house END//////////////////////////////////////////////////////////////////    ///////////////////////////////////////////////////////commerce bank/////////////////////    public function execute_report_commerce()    {        Configure::write('debug', 2);        $dir = Configure::read('broker.commerce.execute_file_path');        $fileArr = $this->scan_dir($dir);        // $reportFile='nofile.xls';        if(isset($fileArr[0]))            $reportFile = $fileArr[0];        $filename="$dir/$reportFile";        $ext = pathinfo($filename, PATHINFO_EXTENSION);        if (file_exists($filename)) {            App::uses('CakeTime', 'Utility');            echo "$filename was last uploaded at :  <h2> " . CakeTime::nice(date ("F d Y H:i:s.", filemtime($filename)))." </h2> ";            echo "<h3>".CakeTime::timeAgoInWords(date ("F d Y H:i:s.", filemtime($filename)))." </h3> ";            $rt=Router::url('/', true)."Downloads/all_orders_report2_commerce";            echo "<br /><a target='_blank' href='$rt'><h3>Run Script</h3></a> <br />";        }else        {            echo "There is no file uploaded";        }        exit;    }    public function all_orders_report2_commerce()    {        //Configure::write('debug', 2);        App::uses('Broker', 'Model');        $Broker = new Broker();        $broker_id = $this->Auth->user('broker_id');        $brokerInfo = $Broker->findById($broker_id);        $prev_execute_report_str = $brokerInfo['Broker']['execute_report'];        App::uses('CakeTime', 'Utility');        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'Order.created');        App::uses('Order', 'Model');        $Order = new Order();        $allOrdersInfo = $Order->find('all', array(            'conditions' => "User.broker_id=$broker_id and $tradeDateCondition",            'contain' => 'User.broker_id',            'recursive' => -1        ));        $execute_file_path =  Configure::read('broker.commerce.execute_file_path');        $fileArr = $this->scan_dir($execute_file_path);        $reportFile = $fileArr[0];        $reportFilePath="$execute_file_path/$reportFile";        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $inputFileType = PHPExcel_IOFactory::identify($reportFilePath);        $objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load($reportFilePath);        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row)        {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false);// Loop all cells, even if it is not set            $rowIndex = $row->getRowIndex();            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $array_data[$rowIndex]['client_id'] = $cell->getCalculatedValue();                } else if ('M' == $cell->getColumn()) {                    $array_data[$rowIndex]['instrument_code'] = $cell->getCalculatedValue();                } else if ('B' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_type'] = $cell->getCalculatedValue();                } else if ('L' == $cell->getColumn()) {                    $order_qty = $cell->getCalculatedValue();                    $order_qty = preg_replace('/\s+/', '', $order_qty);                    $array_data[$rowIndex]['order_qty'] = $order_qty;                } else if ('C' == $cell->getColumn()) {                    $avg_price = $cell->getCalculatedValue();                    if(empty($avg_price))                        $avg_price = 0.00;                    else                        $avg_price = preg_replace('/\s+/', '', $avg_price);                    $array_data[$rowIndex]['avg_price'] = $avg_price;                } else if ('D' == $cell->getColumn()) {                    $executed_qty = $cell->getCalculatedValue();                    $executed_qty = preg_replace('/\s+/', '', $executed_qty);                    $array_data[$rowIndex]['executed_qty'] = $executed_qty;                } else if ('F' == $cell->getColumn()) {                    $array_data[$rowIndex]['status'] = trim($cell->getCalculatedValue());                } else if ('G' == $cell->getColumn()) {                    $array_data[$rowIndex]['sub_status'] = $cell->getCalculatedValue();                } else if ('K' == $cell->getColumn()) {                    $remaining_qty = $cell->getCalculatedValue();                    $remaining_qty = preg_replace('/\s+/', '', $remaining_qty);                    $array_data[$rowIndex]['remaining_qty'] = $remaining_qty;                } else if ('E' == $cell->getColumn()) {                    //$array_data[$rowIndex]['created'] = trim($cell->getValue());                    $array_data[$rowIndex]['execVal'] = trim($cell->getCalculatedValue());                } else if ('H' == $cell->getColumn()) {                    //$array_data[$rowIndex]['created'] = trim($cell->getValue());                    $array_data[$rowIndex]['created'] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'h:i:s');                } else if ('J' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_id'] = trim($cell->getCalculatedValue());                } else if ('I' == $cell->getColumn()) {                    $array_data[$rowIndex]['order_date'] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'dd-mm-YYYY');                }            }        }        $paternArray= array        (            'client_id' => 'Client A/C',            'order_type' => 'Side',            'avg_price' => 'Limit',            'executed_qty' => 'ExecQty',            'execVal' => 'ExecVal',            'status' => 'Status',            'sub_status' => 'SubStatus',            'created' => 'Date/Time',            'order_date' => 'Date',            'order_id' => 'OrderID',            'remaining_qty' => 'RemQty',            'order_qty' => 'SentQty',            'instrument_code' => 'Name'        );        if ($array_data[1] !== $paternArray)//chk order        {            echo"File Column order is not in correct format.";            echo "Expected File Order Is: <pre>";            print_r($paternArray);            exit;        }        echo "<h3>today is:</h3>".date('d-m-Y');        echo "<br>";        echo "<h3>file date is:</h3>".$array_data[2]['order_date'];        echo "<br>";        if($array_data[2]['order_date'] != date('d-m-Y'))        {            echo "<br>";            echo "<h2>this is not today's file.please recheck and upload the correct file again</h2>";            exit;        }        $validTransactionArr = array();        foreach ($array_data as $eachRow) {            $col_c = trim($eachRow['order_qty']);            if ($col_c != '') {                $validTransactionArr[] = $eachRow;            }        }        unset($validTransactionArr[0]);        //$validTransactionArr = Hash::sort($validTransactionArr, "{n}.avg_price", 'ASC');        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1);        $brokerUsers = array();        foreach ($userList[$broker_id] as $irn => $arr) {            $key = trim($irn);            $key = strtoupper($key);            $brokerUsers[$key] = $arr;        }        $tradeDateCondition = CakeTime::dayAsSql(date('d-m-Y'), 'ReportLog.date_time');        $ReportLog = ClassRegistry::init('ReportLog');        $todayReportLog = $ReportLog->find('all', array(            'conditions' => "ReportLog.broker_id=$broker_id and $tradeDateCondition",            'recursive' => -1        ));        $todayReportLog=Hash::combine($todayReportLog, '{n}.ReportLog.dse_order_id', '{n}.ReportLog');        $dataToSaveInReportLog=array();        $new_transaction_count=count($validTransactionArr);        $prev_transaction_count=count($todayReportLog);        if($new_transaction_count<$prev_transaction_count) {            $difference=($prev_transaction_count)-($new_transaction_count);            echo "New file has $difference less transactions than previous file";            exit;        }        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList = $StockBangladesh->instrumentList(2);        $dataToSave=array();        $dataToSaveInPortfolioTransaction=array();        $i=0;        foreach($validTransactionArr as $trans)        {            $temp=array();            $temp2=array();            $tempPT=array();            $irn=$trans['client_id'];            $sub_status=trim($trans['sub_status']);            $status=trim($trans['status']);            $user_id=$portfolio_id=0;            $broker_fee=0.5;            if(isset($brokerUsers[$irn]['portfolio_id']))            {                $portfolio_id=$user_id=$brokerUsers[$irn]['portfolio_id'];                $broker_fee=$brokerUsers[$irn]['broker_fee'];            }            $remaining_qty=$trans['remaining_qty'];            $order_qty=$trans['order_qty'];            $executed_qty=$trans['executed_qty'];            $avg_price=$trans['avg_price'];            $created=$trans['created'];            $today=date('Y-m-d');            $created="$today $created";            $created = date("Y-m-d H:i:s", strtotime("$created +4 hours"));            //$created = date("Y-m-d H:i:s", strtotime("$created +5 hours"));            //   $later = strtotime("+6 hours", $created);            //  $created=date('Y-m-d H:i:s', $later);            $instrument_code=trim($trans['instrument_code']);            $instrument_id=$instrumentList[$instrument_code];            $price_type='fixed';            $rate=$trans['avg_price'];            $dse_order_id=$trans['order_id'];            if(trim($trans['order_type'])=='Sell')            {                $order_type=2;            }else            {                $order_type=1;            }            //  $temp['temp_id']=$i;            $temp['user_id']=$portfolio_id;            $temp['order_type']=$order_type;            $temp['instrument_id']=$instrument_id;            $temp['partial_amount']=0;            $temp['price_type']=$price_type;            $temp['rate']=$rate;            $temp['rate_start_range']=$rate;            $temp['rate_end_range']=$rate;            $temp['created']=$created;            $temp['dse_order_id']=$dse_order_id;            $tempPT['portfolio_id']=$portfolio_id;            $tempPT['instrument_id']=$instrument_id;            $tempPT['transaction_type_id']=$order_type;            $tempPT['amount']=0;            $tempPT['rate']=$rate;            $tempPT['transaction_time']=$created;            $tempPT['commission']=$broker_fee;            $tempPT['parent_id']=0;            $tempPT['dse_execution_id']='temp';            if(isset($todayReportLog[$dse_order_id])) //  if this order is already in database            {                // we are updating only here                // Checking if anything changed                if($todayReportLog[$dse_order_id]['status']!=$status or $todayReportLog[$dse_order_id]['sub_status']!=$sub_status or $todayReportLog[$dse_order_id]['executed_qty']!=$executed_qty)                {                    $todayReportLog[$dse_order_id]['is_changed']=1;                    $todayReportLog[$dse_order_id]['email_sent']=0; // resetting email sent to 0 so that we resend email with updated information                }else                {                    $todayReportLog[$dse_order_id]['is_changed']=0;                }                $tempReportLog=$todayReportLog[$dse_order_id];                $tempReportLog['order_qty']=$order_qty;                $tempReportLog['executed_qty']=$executed_qty;                $tempReportLog['avg_price']=$avg_price;                $tempReportLog['status']=$status;                $tempReportLog['sub_status']=$sub_status;            }            else            {                // inserting new row of order                $tempReportLog['irn']=$irn;                $tempReportLog['instrument_code']=$instrument_code;                $tempReportLog['date_time']=$created;                $tempReportLog['dse_order_id']=$dse_order_id;                $tempReportLog['broker_id']=$broker_id;                $tempReportLog['order_qty']=$order_qty;                $tempReportLog['order_type']=$trans['order_type'];                $tempReportLog['executed_qty']=$executed_qty;                $tempReportLog['avg_price']=$avg_price;                $tempReportLog['status']=$status;                $tempReportLog['sub_status']=$sub_status;                $tempReportLog['email_sent']=0;                $tempReportLog['sms_sent']=0;                $tempReportLog['is_changed']=1;            }            $dataToSaveInReportLog[]=$tempReportLog;            $partial_executed=0;            if($sub_status=='New') {  // new locked order                $temp['amount']=$order_qty;                $temp['order_status']='locked';            }            if($sub_status=='Filled') {  // full executed                $temp['amount']=$executed_qty;                $temp['order_status']='executed';                $tempPT['amount']=$executed_qty;            }            if($sub_status=='Partially filled') {  // partial executed executed                $temp['amount']=$executed_qty;                $temp['order_status']='executed';                $tempPT['amount']=$executed_qty;                $temp2=$temp;                $temp2['amount']=$remaining_qty;                $temp2['order_status']='locked';            }            if($sub_status=='Canceled') {  // Order cancel                if($executed_qty) { // if any share executed before withdraw/cancel                    $temp['amount'] = $executed_qty;                    $temp['order_status'] = 'executed';                    $tempPT['amount']=$executed_qty;                }            }            if($sub_status=='Replaced') {  // Order modified                if($executed_qty) { // if any share executed before modified                    $temp['amount'] = $executed_qty;                    $temp['order_status'] = 'executed';                    $tempPT['amount']=$executed_qty;                }            }            if($tempPT['amount'] && $tempPT['portfolio_id'])                $dataToSaveInPortfolioTransaction[]=$tempPT;            if(isset($temp['amount']) && $temp['user_id'])                $dataToSave[]=$temp;            if(!empty($temp2))            {                $dataToSave[]=$temp2;  // storing another row to insert            }            $i++;        }               $updateReportLog=$this->generateReport2($dataToSaveInReportLog,$brokerUsers,'Commerce');        if (count($updateReportLog)) {            // saving report log            $ReportLog->saveMany($updateReportLog, array('atomic' => true));        }        $allOrders = $Omo->get_broker_orders($allOrdersInfo, $broker_id);        $allLockedOrder = $allOrders['locked'];        $allExecutedOrder = $allOrders['executed'];        $allDeletedOrder = $allOrders['delete'];        $allOrderToReplace=array();        /* We will remove all lock,execute order and reinsert them from excel*/        $allOrderToReplace=array_merge($allOrderToReplace,$allLockedOrder);        $allOrderToReplace=array_merge($allOrderToReplace,$allExecutedOrder);        //   $allOrderToReplace=array_merge($allOrderToReplace,$allDeletedOrder);        $orderIdArrToDelete=Hash::extract($allOrderToReplace, '{n}.id');        $lockedOrders = Hash::extract($dataToSave, '{n}[order_status=locked].order_status');        $executedOrders = Hash::extract($dataToSave, '{n}[order_status=executed].order_status');        $totalLock=count($lockedOrders);        $totalExecuted=count($executedOrders);        echo "<br />Total Locked order=$totalLock";        echo "<br /> Total Executed order=$totalExecuted";        // first delete all existing order        $Order->deleteAll(array('Order.id' => $orderIdArrToDelete), false);        // re insert order        if (count($dataToSave)) {            $Order->saveMany($dataToSave, array('atomic' => true));        }        // delete all todays portfolio transaction        $model = ClassRegistry::init('PortfolioTransaction');        $model->deleteAll("Portfolio.broker=$broker_id and PortfolioTransaction.dse_execution_id  LIKE  'temp'", false);        if (count($dataToSaveInPortfolioTransaction)) {            $model->saveMany($dataToSaveInPortfolioTransaction, array('atomic' => true));        }        // delete all todays portfolio shares --- testing alternative system        $model = ClassRegistry::init('PortfolioShare');        $model->deleteAll("Portfolio.broker=$broker_id and PortfolioShare.dse_execution_id  LIKE  'temp'", false);        if (count($dataToSaveInPortfolioTransaction)) {            $model->saveMany($dataToSaveInPortfolioTransaction, array('atomic' => true));        }        /* // deleting all existing file         $dir = 'hac/execute/*';         $files = glob($dir); // get all file names         foreach($files as $file){ // iterate files             if(is_file($file))                 unlink($file); // delete file         }*/        exit;    }    public function generateReportCommerce($prev_execute_report_str, $new_execute_report_str)    {        //  Configure::write('debug', 2);        $prev_execute_reportArr= unserialize($prev_execute_report_str);        $prev_execute_reportArr=Hash::combine($prev_execute_reportArr, '{n}.order_id', '{n}');        $new_execute_reportArr= unserialize($new_execute_report_str);        $new_execute_reportArr=Hash::combine($new_execute_reportArr, '{n}.order_id', '{n}');        $reportSummary=array();        foreach($new_execute_reportArr as $orderId=>$arr)        {            $irn=$arr['client_id'];            $instrument_code=$arr['instrument_code'];            $order_type=$arr['order_type'];            $new_order_qty = $arr['order_qty'];            $new_remaining_qty = $arr['remaining_qty'];            $executed_qty = $arr['executed_qty'];            $new_sub_status = trim($arr['sub_status']);            $order_id = $arr['order_id'];            if(isset($prev_execute_reportArr[$orderId]))  // order previously submitted. So already this order report emailed. We will check further changes of this order            {                $prev_order_qty = $prev_execute_reportArr[$orderId]['order_qty'];                $prev_remaining_qty =$prev_execute_reportArr[$orderId]['remaining_qty'];;                $prev_sub_status = trim($prev_execute_reportArr[$orderId]['sub_status']);                $changedQty=$prev_remaining_qty-$new_remaining_qty;                if($prev_remaining_qty!=$new_remaining_qty) // if any changes happen                {                    if($prev_sub_status=='New') // previously we have emailed that this order justed locked (placed in terminal). No execution yet                    {                        if($new_sub_status=='Filled')                        {                            $reportSummary[$irn][]="$executed_qty $instrument_code $order_type completed ($new_sub_status). Remaining shares to execute is $new_remaining_qty. Order id is $order_id";                        }                        if($new_sub_status=='Partially filled')                        {                            $reportSummary[$irn][]="$executed_qty $instrument_code $order_type completed ($new_sub_status). Remaining shares to execute is $new_remaining_qty. Order id is $order_id";                        }                        if($new_sub_status=='Replaced')                        {                            $reportSummary[$irn][]="$instrument_code $order_type order is replaced by a new order. Before replace total executed share quantity is $executed_qty. Order id is $order_id";                        }                        if($new_sub_status=='Canceled')                        {                            $reportSummary[$irn][]="$instrument_code $order_type order is canceled. Before cancel total executed share quantity is $executed_qty. Order id is $order_id";                        }                    }                    if($prev_sub_status=="Partially filled") // Previously we have report that some of quantity executed                    {                        if($new_sub_status=='Filled')                        {                            $reportSummary[$irn][]="$executed_qty $instrument_code $order_type completed ($new_sub_status). Additionally $changedQty share executed . Remaining shares to execute is $new_remaining_qty. Order id is $order_id";                        }                        if($new_sub_status=='Partially filled')                        {                            $reportSummary[$irn][]="$executed_qty $instrument_code $order_type completed ($new_sub_status). Additionally $changedQty share executed . Remaining shares to execute is $new_remaining_qty. Order id is $order_id";                        }                        if($new_sub_status=='Replaced')                        {                            $reportSummary[$irn][]="$instrument_code $order_type order is replaced by a new order. Before replace total executed share quantity is $executed_qty. Order id is $order_id";                        }                        if($new_sub_status=='Canceled')                        {                            $reportSummary[$irn][]="$instrument_code $order_type order is canceled. Before cancel total executed share quantity is $executed_qty. Order id is $order_id";                        }                    }                }                /*        * @todo: have to consider only substatus=new,filled, partially filled in both $chngArr and $newArr        * */            }            else  // order newly submitted. That means new lock order            {                if($new_sub_status=='New')                {                    $reportSummary[$irn][]="$new_order_qty $instrument_code $order_type order submitted to DSE ($new_sub_status). Order id is $order_id";                }                if($new_sub_status=='Filled')                {                    $reportSummary[$irn][]="$executed_qty $instrument_code $order_type completed ($new_sub_status). Remaining shares to execute is $new_remaining_qty. Order id is $order_id";                }                if($new_sub_status=='Partially filled')                {                    $reportSummary[$irn][]="$executed_qty $instrument_code $order_type completed ($new_sub_status). Remaining shares to execute is $new_remaining_qty. Order id is $order_id";                }                if($new_sub_status=='Replaced')                {                    $reportSummary[$irn][]="$instrument_code $order_type order is replaced by a new order. Before replace total executed share quantity is $executed_qty. Order id is $order_id";                }                if($new_sub_status=='Canceled')                {                    $reportSummary[$irn][]="$instrument_code $order_type order is canceled. Before cancel total executed share quantity is $executed_qty. Order id is $order_id";                }            }        }        return $reportSummary;    }    public function emailReportCommerce($report,$brokerUsers,$prev,$now)    {   //Configure::write('debug', 2);        // pr($report);        App::uses('CakeEmail', 'Network/Email');        $allEmailContent='';        ;/*        foreach($report as $irn=>$reportArr)        {            $irn=trim($irn);            $upperIrn=strtoupper($irn);            if(isset($brokerUsers[$irn]['email']))            {                $useremail=trim($brokerUsers[$irn]['email']);                $emailContent='';                foreach($reportArr as $rep)                {                    $emailContent="$emailContent<br/>$rep";                    $allEmailContent="$allEmailContent<br/>$rep irn: $upperIrn";                }                CakeEmail::deliver($useremail, "$upperIrn Dear Hac User,order status update from StockBangladesh OMO PLUS", "$emailContent", array('from' => 'info@stockbangladesh.com','emailFormat' => 'html'));            }        }        $allEmailContent="$allEmailContent <br />prev count= $prev  new count =$now";        CakeEmail::deliver('info@stockbangladesh.com', 'Hac Order status update For debug', "$allEmailContent", array('from' => 'info@stockbangladesh.com','emailFormat' => 'html'));*/    }    ///////////////////////////////////////////////////////commerce bank end////////////////////////////    public function xlsx()    {        //http://bayu.freelancer.web.id/2010/07/16/phpexcel-advanced-read-write-excel-made-simple/        Configure::write('debug', 2);        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $Omo = $this->Components->load('Omo');        $accepting_order=$Omo->xlsToArray('Executions_report.xls');        pr($accepting_order);        exit;        $inputFileType = PHPExcel_IOFactory::identify('Executions_report.xls');        $objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load('Executions_report.xls');        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row) {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false); // Loop all cells, even if it is not set            if (1 == $row->getRowIndex()) continue;//skip first row            $rowIndex = $row->getRowIndex();            $array_data[$rowIndex] = array('A' => '', 'B' => '', 'C' => '', 'D' => '');            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $array_data[$rowIndex][$cell->getColumn()] = $cell->getCalculatedValue();                } else if ('B' == $cell->getColumn()) {                    $array_data[$rowIndex][$cell->getColumn()] = $cell->getCalculatedValue();                } else if ('C' == $cell->getColumn()) {                    $array_data[$rowIndex][$cell->getColumn()] = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'YYYY-MM-DD');                } else if ('D' == $cell->getColumn()) {                    $array_data[$rowIndex][$cell->getColumn()] = $cell->getCalculatedValue();                }            }        }        pr($array_data);        exit;    }    public function resetBrokerTransaction()    {        Configure::write('debug', 2);        $broker_id=$this->Auth->user('broker_id');        $brokerModel = ClassRegistry::init('Broker');        if(isset($broker_id)) {            if ($brokerModel->updateAll(array('Broker.execute_report' => NULL), array('Broker.id' => $broker_id))) {                echo "reset successful . please run the execute report again";            }        }        else            echo "please login again";        exit;    }    public function boidUpdateHac()    {        //Configure::write('debug', 2);        $broker_id = $this->Auth->user('broker_id');        $dir = 'hac/balance';        $fileArr = $this->scan_dir($dir);        $reportFile = 'bocode_to_irn.xlsx';        $reportFilePath="$dir/$reportFile";        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1);        //print_r($userList);        $brokerUsers = array();        foreach ($userList[$broker_id] as $irn => $arr) {            $key = trim($irn);            $key = str_pad($key, 5, "0", STR_PAD_LEFT);            $key = strtoupper($key);            $brokerUsers[$key] = $arr;        }        /* $objPHPExcel = new PHPExcel();         $objReader = new PHPExcel_Reader_Excel5();         $objReader->setReadDataOnly(true);         $objPHPExcel = $objReader->load("$dir/$reportFile");*/        $inputFileType = PHPExcel_IOFactory::identify($reportFilePath);        $objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load($reportFilePath);        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row) {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false); // Loop all cells, even if it is not set            //   if (1 == $row->getRowIndex()) continue;//skip first row            $rowIndex = $row->getRowIndex();            //$array_data[$rowIndex] = array('A'=>'', 'B'=>'','C'=>'','D'=>'');            $temp=array();            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $irn = trim($cell->getCalculatedValue());                } else if ('B' == $cell->getColumn()) {                    $temp['bo_id'] = trim($cell->getCalculatedValue());                }            }            if(isset($brokerUsers[$irn]))            {                $temp['id']=$brokerUsers[$irn]['id'];                $array_data[]=$temp;            }        }        $User = ClassRegistry::init('User');        $User->saveMany($array_data, array('atomic' => true));        echo "<pre>";        print_r($array_data);        exit;    }    public function boidUpdateSharp()    {        Configure::write('debug', 2);        $broker_id = $this->Auth->user('broker_id');        $dir = 'sharp/bonus_right';        $fileArr = $this->scan_dir($dir);        $reportFile = 'Clientwise_BO_ID.xlsx';        $reportFilePath="$dir/$reportFile";        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1);        //print_r($userList);        $brokerUsers = array();        foreach ($userList[$broker_id] as $irn => $arr) {            $key = trim($irn);            $key = str_pad($key, 5, "0", STR_PAD_LEFT);            $key = strtoupper($key);            $brokerUsers[$key] = $arr;        }        /* $objPHPExcel = new PHPExcel();         $objReader = new PHPExcel_Reader_Excel5();         $objReader->setReadDataOnly(true);         $objPHPExcel = $objReader->load("$dir/$reportFile");*/        $inputFileType = PHPExcel_IOFactory::identify($reportFilePath);        $objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load($reportFilePath);        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row) {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false); // Loop all cells, even if it is not set             if (1 == $row->getRowIndex()) continue;//skip first row            $rowIndex = $row->getRowIndex();            //$array_data[$rowIndex] = array('A'=>'', 'B'=>'','C'=>'','D'=>'');            $temp=array();            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $irn = trim($cell->getCalculatedValue());                    $irn = str_pad($irn, 5, "0", STR_PAD_LEFT);                    $irn = strtoupper($irn);                } else if ('B' == $cell->getColumn()) {                    $temp['bo_id'] = trim($cell->getCalculatedValue());                }            }            if(isset($brokerUsers[$irn]))            {                $temp['id']=$brokerUsers[$irn]['id'];                $array_data[]=$temp;            }        }        $User = ClassRegistry::init('User');        $User->saveMany($array_data, array('atomic' => true));        echo "<pre>";        print_r($array_data);        exit;    }    // Updating isin from xlsx taking from http://www.cdbl.com.bd/isin_details.php    public function isinUpdate()    {        Configure::write('debug', 2);        $broker_id = $this->Auth->user('broker_id');        $dir = 'hac/bonus_right';        $fileArr = $this->scan_dir($dir);        $reportFile = 'isin.xlsx';        $reportFilePath="$dir/$reportFile";        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList=$StockBangladesh->instrumentInfo();        pr($instrumentList);        $instrumentList = Hash::combine($instrumentList, '{n}.Instrument.id', '{n}.Instrument.is_spot');        exit;        $instrumentList = Hash::combine($instrumentList, '{n}.Instrument.id', '{n}.Instrument.name');        pr($instrumentList);        $instrumentList = array_map('strtolower', $instrumentList);        /* $objPHPExcel = new PHPExcel();         $objReader = new PHPExcel_Reader_Excel5();         $objReader->setReadDataOnly(true);         $objPHPExcel = $objReader->load("$dir/$reportFile");*/        $inputFileType = PHPExcel_IOFactory::identify($reportFilePath);        $objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load($reportFilePath);        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        foreach ($rowIterator as $row) {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false); // Loop all cells, even if it is not set            //   if (1 == $row->getRowIndex()) continue;//skip first row            $rowIndex = $row->getRowIndex();            //$array_data[$rowIndex] = array('A'=>'', 'B'=>'','C'=>'','D'=>'');            $temp=array();            foreach ($cellIterator as $cell) {                if ('B' == $cell->getColumn()) {                    $company_name = trim($cell->getCalculatedValue());                    $company_name=strtolower($company_name);                    $company_name=str_replace('ltd','',$company_name);                    $company_name=str_replace('limited','',$company_name);                    if(trim($company_name)=='')                    {                        continue;                    }                    $input = preg_quote("$company_name", '~'); // don't forget to quote input string!                    $result = preg_grep('~' . $input . '~', $instrumentList);                    if(count($result)==0)                    {                        echo "<br /> No share found in database like $company_name";                    }                    if(count($result)>1)                    {                        echo "<pre>$input multiple share matches for $company_name";                        pr($result);                    }                    if(count($result)==1){                        reset($result);                        $instrument_id = key($result);                        $temp['company_name'] = $company_name;                        $temp['instrument_id'] = $instrument_id;                    }                } else if ('E' == $cell->getColumn()) {                    $temp['isin'] = trim($cell->getCalculatedValue());                }            }            $array_data[]=$temp;        }        //  $User = ClassRegistry::init('User');      //  $User->saveMany($array_data, array('atomic' => true));        echo "<pre>";        print_r($array_data);        exit;    }    public function bonusRightHac()    {        App::uses('CakeEmail', 'Network/Email');        Configure::write('debug', 2);        App::uses('CakeTime', 'Utility');        $broker_id = $this->Auth->user('broker_id');        if($broker_id!=5)        {            echo "You are not allowed to do this job. Check if you are HAC operators or you have log in properly";            exit;        }        echo "bid=";        pr($broker_id);        $dir = Configure::read('broker.hac.bonus_path');        $fileArr = $this->scan_dir($dir);        // $reportFile='nofile.xls';        if(isset($fileArr[0]))            $reportFile = $fileArr[0];        $reportFile = $fileArr[0];        $reportFilePath="$dir/$reportFile";        if(!CakeTime::isToday(date ("F d Y H:i:s.", filemtime($reportFilePath))))        {            echo "$reportFile was last uploaded at :  <h2> " . CakeTime::nice(date ("F d Y H:i:s.", filemtime($reportFilePath)))." </h2> ";            echo "upload fresh file";            exit;        }        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList=$StockBangladesh->instrumentInfo();        $instrumentList = Hash::combine($instrumentList, '{n}.Instrument.isin', '{n}.Instrument.name');        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1,$broker_id);        $brokerUsers = array();        foreach ($userList[$broker_id] as $irn => $arr) {            $key = trim($arr['bo_id']);            $key = str_pad($key, 5, "0", STR_PAD_LEFT);            $key = strtoupper($key);            if(!is_null($key))            $brokerUsers[$key] = $arr;        }        /* $objPHPExcel = new PHPExcel();         $objReader = new PHPExcel_Reader_Excel5();         $objReader->setReadDataOnly(true);         $objPHPExcel = $objReader->load("$dir/$reportFile");*/      /*  $x='bl';        $input = preg_quote("$x", '~'); // don't forget to quote input string!        $data = array('orange', 'blue', 'green', 'red', 'pink', 'brown', 'black');        $result = preg_grep('~' . $input . '~', $data);        pr($result);        exit;*/        $inputFileType = PHPExcel_IOFactory::identify($reportFilePath);        $objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load($reportFilePath);        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        $pidArray = array();$script_date='';        foreach ($rowIterator as $row) {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false); // Loop all cells, even if it is not set               if (1 == $row->getRowIndex()) continue;//skip first row            $rowIndex = $row->getRowIndex();            //$array_data[$rowIndex] = array('A'=>'', 'B'=>'','C'=>'','D'=>'');            $instrument_id=0;            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $bo_id = trim($cell->getCalculatedValue());                } else if ('B' == $cell->getColumn()) {                    $name = trim($cell->getCalculatedValue());                }else if ('C' == $cell->getColumn()) {                    $bonus_or_right = trim($cell->getCalculatedValue());                }else if ('D' == $cell->getColumn()) {                    $company_name = trim($cell->getCalculatedValue());                    /*$company_name=strtolower($company_name);                    $company_name=str_replace('ltd','',$company_name);                    $company_name=str_replace('limited','',$company_name);                    if(trim($company_name)=='')                    {                        continue;                    }                    $input = preg_quote("$company_name", '~'); // don't forget to quote input string!                    $result = preg_grep('~' . $input . '~', $instrumentList);                    if(count($result)==0)                    {                        echo "<br /> No share found in database like $company_name";                        CakeEmail::deliver('afmsohail@gmail.com', "OMO action needed: $company_name missing in database", "$company_name missing in database", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                        CakeEmail::deliver('mail.stockbd@gmail.com', "OMO action needed: $company_name missing in database", "$company_name missing in database", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                    }                    if(count($result)>1)                    {                        echo "<pre>$input multiple share matches for $company_name";                        CakeEmail::deliver('afmsohail@gmail.com', "OMO action needed: $input multiple share matches for $company_name", "$input multiple share matches for $company_name", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                        CakeEmail::deliver('mail.stockbd@gmail.com', "OMO action needed: $input multiple share matches for $company_name", "$input multiple share matches for $company_name", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                    }                    if(count($result)==1){                        reset($result);                        $instrument_id = key($result);                    }*/                }else if ('E' == $cell->getColumn()) {                    $isin = trim($cell->getCalculatedValue());                    if(isset($instrumentList[$isin]['id'])) {                        $instrument_id = $instrumentList[$isin]['id'];                    }else                    {                        CakeEmail::deliver('afmsohail@gmail.com', "OMO action needed: ISIN of $company_name missing in database", "$company_name isin missing in database of new site. ISIN is available at http://www.cdbl.com.bd/isin_details.php", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                        CakeEmail::deliver('mail.stockbd@gmail.com', "OMO action needed: ISIN of $company_name missing in database", "$company_name isin missing in database of new site. ISIN is available at http://www.cdbl.com.bd/isin_details.php", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                    }                }else if ('F' == $cell->getColumn()) {                    $qty = trim($cell->getCalculatedValue());                }else if ('G' == $cell->getColumn()) {                    $date = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'YYYY-MM-DD hh:mm');  //2017-01-29 13:41:26                    $d = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'YYYY-MM-DD');                    if($d!='')                        $script_date=$d;                }            }            $temp=array();            // @TODO: Duplicate run should be prevented            if(isset($brokerUsers[$bo_id]))            {                if(isset($instrumentList[$isin]['id'])) {                    pr($qty . ' ' . $company_name . "will be added to " . $brokerUsers[$bo_id]['internal_ref_no'] . '  pid=' . $brokerUsers[$bo_id]['portfolio_id']);                    $temp['portfolio_id'] = $brokerUsers[$bo_id]['portfolio_id'];                    $pidArray[] = $brokerUsers[$bo_id]['portfolio_id'];                    $temp['instrument_id'] = $instrument_id;                    $temp['transaction_type_id'] = 4;                    $temp['amount'] = $qty;                    $temp['rate'] = 0;                    $temp['transaction_time'] = $date;                    $temp['commission'] = $brokerUsers[$bo_id]['broker_fee'];                    $temp['dse_order_id'] = "hac_bonus_script-$script_date";                    $array_data[] = $temp;                }            }        }        $model = ClassRegistry::init('PortfolioTransaction');        // checkif already inserted        $existingData = $model->find('all', array(            'conditions'=>array('PortfolioTransaction.dse_order_id'=>"hac_bonus_script-$script_date",'PortfolioTransaction.portfolio_id'=>$pidArray),            'recursive' => -1        ));       /* pr("bonus_script-$script_date");        pr($pidArray);        pr($existingData);        exit;*/        if (count($existingData))        {            echo "<h2>Duplicate script running :  $reportFile</h2>";            echo "Existing row : ".count($existingData);            echo " New row : ".count($array_data);            exit;        }        if (count($array_data)) {            $model->saveMany($array_data, array('atomic' => true));            echo "<br/>Successfully updated. Total new entry = ". count($array_data);            pr($array_data);        }exit;    }    public function bonusRightApex()    {        App::uses('CakeEmail', 'Network/Email');        Configure::write('debug', 2);        App::uses('CakeTime', 'Utility');        $broker_id = $this->Auth->user('broker_id');        if($broker_id!=11)        {            echo "You are not allowed to do this job. Check if you are Apex operators or you have log in properly";            exit;        }        echo "bid=";        pr($broker_id);        $dir = Configure::read('broker.apex.bonus_path');        $fileArr = $this->scan_dir($dir);        // $reportFile='nofile.xls';        if(isset($fileArr[0]))            $reportFile = $fileArr[0];        $reportFile = $fileArr[0];        $reportFilePath="$dir/$reportFile";        if(!CakeTime::isToday(date ("F d Y H:i:s.", filemtime($reportFilePath))))        {            echo "$reportFile was last uploaded at :  <h2> " . CakeTime::nice(date ("F d Y H:i:s.", filemtime($reportFilePath)))." </h2> ";            echo "upload fresh file";            exit;        }        require_once(APP . 'Vendor' . DS . 'phpexcel' . DS . 'PHPExcel.php');        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList=$StockBangladesh->instrumentInfo();        $instrumentList = Hash::combine($instrumentList, '{n}.Instrument.isin', '{n}.Instrument.name');        $instrumentList = array_map('strtolower', $instrumentList);        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1,$broker_id);        $brokerUsers = array();        foreach ($userList[$broker_id] as $irn => $arr) {            $key = trim($irn);            $key = str_pad($key, 5, "0", STR_PAD_LEFT);            $key = strtoupper($key);            if(!is_null($key))                $brokerUsers[$key] = $arr;        }        /* $objPHPExcel = new PHPExcel();         $objReader = new PHPExcel_Reader_Excel5();         $objReader->setReadDataOnly(true);         $objPHPExcel = $objReader->load("$dir/$reportFile");*/        /*  $x='bl';          $input = preg_quote("$x", '~'); // don't forget to quote input string!          $data = array('orange', 'blue', 'green', 'red', 'pink', 'brown', 'black');          $result = preg_grep('~' . $input . '~', $data);          pr($result);          exit;*/        $inputFileType = PHPExcel_IOFactory::identify($reportFilePath);        $objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objReader->setReadDataOnly(true);        $objPHPExcel = $objReader->load($reportFilePath);        $rowIterator = $objPHPExcel->getActiveSheet()->getRowIterator();        $array_data = array();        $script_date='';        $pidArray=array();        foreach ($rowIterator as $row) {            $cellIterator = $row->getCellIterator();            $cellIterator->setIterateOnlyExistingCells(false); // Loop all cells, even if it is not set              if (1 == $row->getRowIndex()) continue;//skip first row            $rowIndex = $row->getRowIndex();            //$array_data[$rowIndex] = array('A'=>'', 'B'=>'','C'=>'','D'=>'');            $instrument_id=0;            foreach ($cellIterator as $cell) {                if ('A' == $cell->getColumn()) {                    $irn = trim($cell->getCalculatedValue());                } else if ('D' == $cell->getColumn()) {                    $bonus_or_right = trim($cell->getCalculatedValue());                }else if ('E' == $cell->getColumn()) {                    $company_name = trim($cell->getCalculatedValue());                   /* $company_name=strtolower($company_name);                    $company_name=str_replace('ltd','',$company_name);                    $company_name=str_replace('limited','',$company_name);                    if(trim($company_name)=='')                    {                        continue;                    }                    $input = preg_quote("$company_name", '~'); // don't forget to quote input string!                    $result = preg_grep('~' . $input . '~', $instrumentList);                    if(count($result)==0)                    {                        echo "<br /> No share found in database like $company_name";                        CakeEmail::deliver('afmsohail@gmail.com', "OMO action needed: $company_name missing in database", "$company_name missing in database", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                        CakeEmail::deliver('mail.stockbd@gmail.com', "OMO action needed: $company_name missing in database", "$company_name missing in database", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                    }                    if(count($result)>1)                    {                        echo "<pre>$input multiple share matches for $company_name";                        CakeEmail::deliver('afmsohail@gmail.com', "OMO action needed: $input multiple share matches for $company_name", "$input multiple share matches for $company_name", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                        CakeEmail::deliver('mail.stockbd@gmail.com', "OMO action needed: $input multiple share matches for $company_name", "$input multiple share matches for $company_name", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                    }                    if(count($result)==1){                        reset($result);                        $instrument_id = key($result);                    }*/                }else if ('F' == $cell->getColumn()) {                    $isin = trim($cell->getCalculatedValue());                    if(isset($instrumentList[$isin]['id'])) {                        $instrument_id = $instrumentList[$isin]['id'];                    }else                    {                        CakeEmail::deliver('afmsohail@gmail.com', "OMO action needed: ISIN of $company_name missing in database", "$company_name isin missing in database of new site. ISIN is available at http://www.cdbl.com.bd/isin_details.php", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                        CakeEmail::deliver('mail.stockbd@gmail.com', "OMO action needed: ISIN of $company_name missing in database", "$company_name isin missing in database of new site. ISIN is available at http://www.cdbl.com.bd/isin_details.php", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                    }                }else if ('G' == $cell->getColumn()) {                    $qty = trim($cell->getCalculatedValue());                }else if ('H' == $cell->getColumn()) {                    $date = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'YYYY-MM-DD hh:mm');  //2017-01-29 13:41:26                    $d = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), 'YYYY-MM-DD');                    if($d!='')                        $script_date=$d;                }            }            $temp=array();            // @TODO: Duplicate run should be prevented            if(isset($brokerUsers[$irn]))            {                if(isset($instrumentList[$isin]['id'])) {                    pr($qty . ' ' . $company_name . "will be added to " . $brokerUsers[$irn]['internal_ref_no'] . '  pid=' . $brokerUsers[$irn]['portfolio_id']);                    $pidArray[] = $brokerUsers[$irn]['portfolio_id'];                    $temp['portfolio_id'] = $brokerUsers[$irn]['portfolio_id'];                    $temp['instrument_id'] = $instrument_id;                    $temp['transaction_type_id'] = 4;                    $temp['amount'] = $qty;                    $temp['rate'] = 0;                    $temp['transaction_time'] = $date;                    $temp['commission'] = $brokerUsers[$irn]['broker_fee'];                    $temp['dse_order_id'] = "apex_bonus_script-$script_date";                    $array_data[] = $temp;                }            }        }        // $User = ClassRegistry::init('User');        //    $User->saveMany($array_data, array('atomic' => true));        // echo "<pre>";        $model = ClassRegistry::init('PortfolioTransaction');        // checkif already inserted        $existingData = $model->find('all', array(            'conditions'=>array('PortfolioTransaction.dse_order_id'=>"apex_bonus_script-$script_date",'PortfolioTransaction.portfolio_id'=>$pidArray),            'recursive' => -1        ));       if (count($existingData))       {           echo "<h2>Duplicate script running :  $reportFile</h2>";           echo "Existing row : ".count($existingData);           echo " New row : ".count($array_data);           exit;       }        if (count($array_data)) {            $model->saveMany($array_data, array('atomic' => true));            echo "<br/>Successfully updated. Total new entry = ". count($array_data);            pr($array_data);        }        exit;    }    public function bonusRightFis()    {        App::uses('CakeEmail', 'Network/Email');        Configure::write('debug', 2);        App::uses('CakeTime', 'Utility');        $broker_id = $this->Auth->user('broker_id');        if($broker_id!=9)        {            echo "You are not allowed to do this job. Check if you are FIS operators or you have log in properly";            exit;        }        echo "bid=";        pr($broker_id);        $dir = Configure::read('broker.fis.bonus_path');        $fileArr = $this->scan_dir($dir);        // $reportFile='nofile.xls';        if(isset($fileArr[0]))            $reportFile = $fileArr[0];        $reportFile = $fileArr[0];        $reportFilePath="$dir/$reportFile";        if(!CakeTime::isToday(date ("F d Y H:i:s.", filemtime($reportFilePath))))        {            echo "$reportFile was last uploaded at :  <h2> " . CakeTime::nice(date ("F d Y H:i:s.", filemtime($reportFilePath)))." </h2> ";            echo "upload fresh file";            exit;        }        $StockBangladesh = $this->Components->load('StockBangladesh');        $instrumentList=$StockBangladesh->instrumentInfo();        $instrumentList = Hash::combine($instrumentList, '{n}.Instrument.isin', '{n}.Instrument.id');        $instrumentList = array_map('strtolower', $instrumentList);        $model = ClassRegistry::init('PortfolioTransaction');        //pr($instrumentList);      //  pr($userList);        $Omo = $this->Components->load('Omo');        $userList = $Omo->getUsersList(4, 1);        $fisUsers = array();        foreach ($userList[$broker_id] as $irn => $arr) {            $bo_id=trim($arr['bo_id']);            $fisUsers[$bo_id] = $arr;        }        $array_data=array();        $handle = fopen($reportFilePath, "r");        if ($handle) {            while (($line = fgets($handle)) !== false) {                $dataByLine=explode('~', $line);                if(!isset($dataByLine[1]))                    continue;                $isin=trim($dataByLine[0]);                $boid=trim($dataByLine[10]);                $company_name=$dataByLine[1];                $qty=(int)$dataByLine[14];                $datestr= trim($dataByLine[5]);                $date=date('Y-m-d H:i:s',strtotime($datestr));                $ins_name= $dataByLine[1];                if(isset($instrumentList[$isin]))                {                    if (isset($fisUsers[$boid])) {                        $instrument_id= $instrumentList[$isin];                        pr($qty . ' ' . $company_name . "will be added to " . $fisUsers[$boid]['internal_ref_no'] . '  pid=' . $fisUsers[$boid]['portfolio_id']);                        $pidArray[] = $fisUsers[$boid]['portfolio_id'];                        $temp['portfolio_id'] = $fisUsers[$boid]['portfolio_id'];                        $temp['instrument_id'] = $instrument_id;                        $temp['transaction_type_id'] = 4;                        $temp['amount'] = $qty;                        $temp['rate'] = 0;                        $temp['transaction_time'] = $date;                        $temp['commission'] = $fisUsers[$boid]['broker_fee'];                        //$temp['dse_order_id'] = "fis-$datestr-$boid-$isin";   // unique id to check duplicate entry                        $temp['dse_order_id'] = "fis_bonus_script-$datestr";                        $existingData = $model->find('all', array(                            'conditions' => array('PortfolioTransaction.transaction_type_id' => 4, 'PortfolioTransaction.portfolio_id' => $temp['portfolio_id'], 'PortfolioTransaction.instrument_id' => $temp['instrument_id'], 'PortfolioTransaction.transaction_time' => $temp['transaction_time']),                            'recursive' => -1                        ));                        if(count($existingData))                        {                            pr("Bonus Data is already inserted");                        }else                        {                            $array_data[] = $temp;                        }                    } else {                       // pr("==============$boid : user not found===========");                    }                }                else                {                    pr("NOT FOUND ISIN of $ins_name");                    CakeEmail::deliver('afmsohail@gmail.com', "OMO action needed: ISIN of $company_name missing in database", "$company_name isin missing in database of new site. ISIN is available at http://www.cdbl.com.bd/isin_details.php", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                    CakeEmail::deliver('mail.stockbd@gmail.com', "OMO action needed: ISIN of $company_name missing in database", "$company_name isin missing in database of new site. ISIN is available at http://www.cdbl.com.bd/isin_details.php", array('from' => array('omo@stockbangladesh.net' => 'StockBangladesh OMO'), 'emailFormat' => 'html'));                }                //pr($dataByLine);            }            fclose($handle);        } else {            // error opening the file.        }        //pr($array_data);        if (count($array_data)) {            $model->saveMany($array_data, array('atomic' => true));            echo "<br/>Updated. Total new entry = " . count($array_data);            pr($array_data);        }exit;    }}